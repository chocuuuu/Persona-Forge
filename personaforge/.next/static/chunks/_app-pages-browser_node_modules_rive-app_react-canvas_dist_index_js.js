/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_rive-app_react-canvas_dist_index_js"],{

/***/ "(app-pages-browser)/./node_modules/@rive-app/canvas/rive.js":
/*!***********************************************!*\
  !*** ./node_modules/@rive-app/canvas/rive.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory();\n\telse {}\n})(this, () => {\nreturn /******/ (() => { // webpackBootstrap\n/******/ \t\"use strict\";\n/******/ \tvar __webpack_modules__ = ([\n/* 0 */,\n/* 1 */\n/***/ ((__unused_webpack___webpack_module__, __nested_webpack_exports__, __nested_webpack_require_540__) => {\n\n__nested_webpack_require_540__.r(__nested_webpack_exports__);\n/* harmony export */ __nested_webpack_require_540__.d(__nested_webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n\nvar Rive = (() => {\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\n  \n  return (\nfunction(moduleArg = {}) {\n\nvar m = moduleArg, aa, ba;\nm.ready = new Promise((a, b) => {\n  aa = a;\n  ba = b;\n});\nfunction ca() {\n  function a(g) {\n    const n = d;\n    c = b = 0;\n    d = new Map();\n    n.forEach(p => {\n      try {\n        p(g);\n      } catch (l) {\n        console.error(l);\n      }\n    });\n    this.pb();\n    e && e.Tb();\n  }\n  let b = 0, c = 0, d = new Map(), e = null, f = null;\n  this.requestAnimationFrame = function(g) {\n    b || (b = requestAnimationFrame(a.bind(this)));\n    const n = ++c;\n    d.set(n, g);\n    return n;\n  };\n  this.cancelAnimationFrame = function(g) {\n    d.delete(g);\n    b && 0 == d.size && (cancelAnimationFrame(b), b = 0);\n  };\n  this.Rb = function(g) {\n    f && (document.body.remove(f), f = null);\n    g || (f = document.createElement(\"div\"), f.style.backgroundColor = \"black\", f.style.position = \"fixed\", f.style.right = 0, f.style.top = 0, f.style.color = \"white\", f.style.padding = \"4px\", f.innerHTML = \"RIVE FPS\", g = function(n) {\n      f.innerHTML = \"RIVE FPS \" + n.toFixed(1);\n    }, document.body.appendChild(f));\n    e = new function() {\n      let n = 0, p = 0;\n      this.Tb = function() {\n        var l = performance.now();\n        p ? (++n, l -= p, 1000 < l && (g(1000 * n / l), n = p = 0)) : (p = l, n = 0);\n      };\n    }();\n  };\n  this.Ob = function() {\n    f && (document.body.remove(f), f = null);\n    e = null;\n  };\n  this.pb = function() {\n  };\n}\nfunction fa(a) {\n  console.assert(!0);\n  const b = new Map();\n  let c = -Infinity;\n  this.push = function(d) {\n    d = d + ((1 << a) - 1) >> a;\n    b.has(d) && clearTimeout(b.get(d));\n    b.set(d, setTimeout(function() {\n      b.delete(d);\n      0 == b.length ? c = -Infinity : d == c && (c = Math.max(...b.keys()), console.assert(c < d));\n    }, 1000));\n    c = Math.max(d, c);\n    return c << a;\n  };\n}\nconst ha = m.onRuntimeInitialized;\nm.onRuntimeInitialized = function() {\n  ha && ha();\n  let a = m.decodeAudio;\n  m.decodeAudio = function(e, f) {\n    e = a(e);\n    f(e);\n  };\n  let b = m.decodeFont;\n  m.decodeFont = function(e, f) {\n    e = b(e);\n    f(e);\n  };\n  const c = m.FileAssetLoader;\n  m.ptrToAsset = e => {\n    let f = m.ptrToFileAsset(e);\n    return f.isImage ? m.ptrToImageAsset(e) : f.isFont ? m.ptrToFontAsset(e) : f.isAudio ? m.ptrToAudioAsset(e) : f;\n  };\n  m.CustomFileAssetLoader = c.extend(\"CustomFileAssetLoader\", {__construct:function({loadContents:e}) {\n    this.__parent.__construct.call(this);\n    this.Gb = e;\n  }, loadContents:function(e, f) {\n    e = m.ptrToAsset(e);\n    return this.Gb(e, f);\n  },});\n  m.CDNFileAssetLoader = c.extend(\"CDNFileAssetLoader\", {__construct:function() {\n    this.__parent.__construct.call(this);\n  }, loadContents:function(e) {\n    let f = m.ptrToAsset(e);\n    e = f.cdnUuid;\n    if (\"\" === e) {\n      return !1;\n    }\n    (function(g, n) {\n      var p = new XMLHttpRequest();\n      p.responseType = \"arraybuffer\";\n      p.onreadystatechange = function() {\n        4 == p.readyState && 200 == p.status && n(p);\n      };\n      p.open(\"GET\", g, !0);\n      p.send(null);\n    })(f.cdnBaseUrl + \"/\" + e, g => {\n      f.decode(new Uint8Array(g.response));\n    });\n    return !0;\n  },});\n  m.FallbackFileAssetLoader = c.extend(\"FallbackFileAssetLoader\", {__construct:function() {\n    this.__parent.__construct.call(this);\n    this.lb = [];\n  }, addLoader:function(e) {\n    this.lb.push(e);\n  }, loadContents:function(e, f) {\n    for (let g of this.lb) {\n      if (g.loadContents(e, f)) {\n        return !0;\n      }\n    }\n    return !1;\n  },});\n  let d = m.computeAlignment;\n  m.computeAlignment = function(e, f, g, n, p = 1.0) {\n    return d.call(this, e, f, g, n, p);\n  };\n};\nconst ia = \"createConicGradient createImageData createLinearGradient createPattern createRadialGradient getContextAttributes getImageData getLineDash getTransform isContextLost isPointInPath isPointInStroke measureText\".split(\" \"), ja = new function() {\n  function a() {\n    if (!b) {\n      var k = document.createElement(\"canvas\"), t = {alpha:1, depth:0, stencil:0, antialias:0, premultipliedAlpha:1, preserveDrawingBuffer:0, powerPreference:\"high-performance\", failIfMajorPerformanceCaveat:0, enableExtensionsByDefault:1, explicitSwapControl:1, renderViaOffscreenBackBuffer:1,};\n      let r;\n      if (/iPhone|iPad|iPod/i.test(navigator.userAgent)) {\n        if (r = k.getContext(\"webgl\", t), c = 1, !r) {\n          return console.log(\"No WebGL support. Image mesh will not be drawn.\"), !1;\n        }\n      } else {\n        if (r = k.getContext(\"webgl2\", t)) {\n          c = 2;\n        } else {\n          if (r = k.getContext(\"webgl\", t)) {\n            c = 1;\n          } else {\n            return console.log(\"No WebGL support. Image mesh will not be drawn.\"), !1;\n          }\n        }\n      }\n      r = new Proxy(r, {get(D, w) {\n        if (D.isContextLost()) {\n          if (p || (console.error(\"Cannot render the mesh because the GL Context was lost. Tried to invoke \", w), p = !0), \"function\" === typeof D[w]) {\n            return function() {\n            };\n          }\n        } else {\n          return \"function\" === typeof D[w] ? function(...M) {\n            return D[w].apply(D, M);\n          } : D[w];\n        }\n      }, set(D, w, M) {\n        if (D.isContextLost()) {\n          p || (console.error(\"Cannot render the mesh because the GL Context was lost. Tried to set property \" + w), p = !0);\n        } else {\n          return D[w] = M, !0;\n        }\n      },});\n      d = Math.min(r.getParameter(r.MAX_RENDERBUFFER_SIZE), r.getParameter(r.MAX_TEXTURE_SIZE));\n      function A(D, w, M) {\n        w = r.createShader(w);\n        r.shaderSource(w, M);\n        r.compileShader(w);\n        M = r.getShaderInfoLog(w);\n        if (0 < (M || \"\").length) {\n          throw M;\n        }\n        r.attachShader(D, w);\n      }\n      k = r.createProgram();\n      A(k, r.VERTEX_SHADER, \"attribute vec2 vertex;\\n                attribute vec2 uv;\\n                uniform vec4 mat;\\n                uniform vec2 translate;\\n                varying vec2 st;\\n                void main() {\\n                    st = uv;\\n                    gl_Position = vec4(mat2(mat) * vertex + translate, 0, 1);\\n                }\");\n      A(k, r.FRAGMENT_SHADER, \"precision highp float;\\n                uniform sampler2D image;\\n                varying vec2 st;\\n                void main() {\\n                    gl_FragColor = texture2D(image, st);\\n                }\");\n      r.bindAttribLocation(k, 0, \"vertex\");\n      r.bindAttribLocation(k, 1, \"uv\");\n      r.linkProgram(k);\n      t = r.getProgramInfoLog(k);\n      if (0 < (t || \"\").trim().length) {\n        throw t;\n      }\n      e = r.getUniformLocation(k, \"mat\");\n      f = r.getUniformLocation(k, \"translate\");\n      r.useProgram(k);\n      r.bindBuffer(r.ARRAY_BUFFER, r.createBuffer());\n      r.enableVertexAttribArray(0);\n      r.enableVertexAttribArray(1);\n      r.bindBuffer(r.ELEMENT_ARRAY_BUFFER, r.createBuffer());\n      r.uniform1i(r.getUniformLocation(k, \"image\"), 0);\n      r.pixelStorei(r.UNPACK_PREMULTIPLY_ALPHA_WEBGL, !0);\n      b = r;\n    }\n    return !0;\n  }\n  let b = null, c = 0, d = 0, e = null, f = null, g = 0, n = 0, p = !1;\n  a();\n  this.hc = function() {\n    a();\n    return d;\n  };\n  this.Mb = function(k) {\n    b.deleteTexture && b.deleteTexture(k);\n  };\n  this.Lb = function(k) {\n    if (!a()) {\n      return null;\n    }\n    const t = b.createTexture();\n    if (!t) {\n      return null;\n    }\n    b.bindTexture(b.TEXTURE_2D, t);\n    b.texImage2D(b.TEXTURE_2D, 0, b.RGBA, b.RGBA, b.UNSIGNED_BYTE, k);\n    b.texParameteri(b.TEXTURE_2D, b.TEXTURE_WRAP_S, b.CLAMP_TO_EDGE);\n    b.texParameteri(b.TEXTURE_2D, b.TEXTURE_WRAP_T, b.CLAMP_TO_EDGE);\n    b.texParameteri(b.TEXTURE_2D, b.TEXTURE_MAG_FILTER, b.LINEAR);\n    2 == c ? (b.texParameteri(b.TEXTURE_2D, b.TEXTURE_MIN_FILTER, b.LINEAR_MIPMAP_LINEAR), b.generateMipmap(b.TEXTURE_2D)) : b.texParameteri(b.TEXTURE_2D, b.TEXTURE_MIN_FILTER, b.LINEAR);\n    return t;\n  };\n  const l = new fa(8), u = new fa(8), v = new fa(10), y = new fa(10);\n  this.Qb = function(k, t, r, A, D) {\n    if (a()) {\n      var w = l.push(k), M = u.push(t);\n      if (b.canvas) {\n        if (b.canvas.width != w || b.canvas.height != M) {\n          b.canvas.width = w, b.canvas.height = M;\n        }\n        b.viewport(0, M - t, k, t);\n        b.disable(b.SCISSOR_TEST);\n        b.clearColor(0, 0, 0, 0);\n        b.clear(b.COLOR_BUFFER_BIT);\n        b.enable(b.SCISSOR_TEST);\n        r.sort((H, da) => da.xb - H.xb);\n        w = v.push(A);\n        g != w && (b.bufferData(b.ARRAY_BUFFER, 8 * w, b.DYNAMIC_DRAW), g = w);\n        w = 0;\n        for (var T of r) {\n          b.bufferSubData(b.ARRAY_BUFFER, w, T.Ua), w += 4 * T.Ua.length;\n        }\n        console.assert(w == 4 * A);\n        for (var ea of r) {\n          b.bufferSubData(b.ARRAY_BUFFER, w, ea.Db), w += 4 * ea.Db.length;\n        }\n        console.assert(w == 8 * A);\n        w = y.push(D);\n        n != w && (b.bufferData(b.ELEMENT_ARRAY_BUFFER, 2 * w, b.DYNAMIC_DRAW), n = w);\n        T = 0;\n        for (var ra of r) {\n          b.bufferSubData(b.ELEMENT_ARRAY_BUFFER, T, ra.indices), T += 2 * ra.indices.length;\n        }\n        console.assert(T == 2 * D);\n        ra = 0;\n        ea = !0;\n        w = T = 0;\n        for (const H of r) {\n          H.image.Ka != ra && (b.bindTexture(b.TEXTURE_2D, H.image.Ja || null), ra = H.image.Ka);\n          H.mc ? (b.scissor(H.Za, M - H.$a - H.kb, H.Ac, H.kb), ea = !0) : ea && (b.scissor(0, M - t, k, t), ea = !1);\n          r = 2 / k;\n          const da = -2 / t;\n          b.uniform4f(e, H.ha[0] * r * H.Ba, H.ha[1] * da * H.Ca, H.ha[2] * r * H.Ba, H.ha[3] * da * H.Ca);\n          b.uniform2f(f, H.ha[4] * r * H.Ba + r * (H.Za - H.ic * H.Ba) - 1, H.ha[5] * da * H.Ca + da * (H.$a - H.jc * H.Ca) + 1);\n          b.vertexAttribPointer(0, 2, b.FLOAT, !1, 0, w);\n          b.vertexAttribPointer(1, 2, b.FLOAT, !1, 0, w + 4 * A);\n          b.drawElements(b.TRIANGLES, H.indices.length, b.UNSIGNED_SHORT, T);\n          w += 4 * H.Ua.length;\n          T += 2 * H.indices.length;\n        }\n        console.assert(w == 4 * A);\n        console.assert(T == 2 * D);\n      }\n    }\n  };\n  this.canvas = function() {\n    return a() && b.canvas;\n  };\n}(), ka = m.onRuntimeInitialized;\nm.onRuntimeInitialized = function() {\n  function a(q) {\n    switch(q) {\n      case l.srcOver:\n        return \"source-over\";\n      case l.screen:\n        return \"screen\";\n      case l.overlay:\n        return \"overlay\";\n      case l.darken:\n        return \"darken\";\n      case l.lighten:\n        return \"lighten\";\n      case l.colorDodge:\n        return \"color-dodge\";\n      case l.colorBurn:\n        return \"color-burn\";\n      case l.hardLight:\n        return \"hard-light\";\n      case l.softLight:\n        return \"soft-light\";\n      case l.difference:\n        return \"difference\";\n      case l.exclusion:\n        return \"exclusion\";\n      case l.multiply:\n        return \"multiply\";\n      case l.hue:\n        return \"hue\";\n      case l.saturation:\n        return \"saturation\";\n      case l.color:\n        return \"color\";\n      case l.luminosity:\n        return \"luminosity\";\n    }\n  }\n  function b(q) {\n    return \"rgba(\" + ((16711680 & q) >>> 16) + \",\" + ((65280 & q) >>> 8) + \",\" + ((255 & q) >>> 0) + \",\" + ((4278190080 & q) >>> 24) / 255 + \")\";\n  }\n  function c() {\n    0 < M.length && (ja.Qb(w.drawWidth(), w.drawHeight(), M, T, ea), M = [], ea = T = 0, w.reset(512, 512));\n    for (const q of D) {\n      for (const x of q.H) {\n        x();\n      }\n      q.H = [];\n    }\n    D.clear();\n  }\n  ka && ka();\n  var d = m.RenderPaintStyle;\n  const e = m.RenderPath, f = m.RenderPaint, g = m.Renderer, n = m.StrokeCap, p = m.StrokeJoin, l = m.BlendMode, u = d.fill, v = d.stroke, y = m.FillRule.evenOdd;\n  let k = 1;\n  var t = m.RenderImage.extend(\"CanvasRenderImage\", {__construct:function({la:q, xa:x} = {}) {\n    this.__parent.__construct.call(this);\n    this.Ka = k;\n    k = k + 1 & 2147483647 || 1;\n    this.la = q;\n    this.xa = x;\n  }, __destruct:function() {\n    this.Ja && (ja.Mb(this.Ja), URL.revokeObjectURL(this.Xa));\n    this.__parent.__destruct.call(this);\n  }, decode:function(q) {\n    var x = this;\n    x.xa && x.xa(x);\n    var F = new Image();\n    x.Xa = URL.createObjectURL(new Blob([q], {type:\"image/png\",}));\n    F.onload = function() {\n      x.Fb = F;\n      x.Ja = ja.Lb(F);\n      x.size(F.width, F.height);\n      x.la && x.la(x);\n    };\n    F.src = x.Xa;\n  },}), r = e.extend(\"CanvasRenderPath\", {__construct:function() {\n    this.__parent.__construct.call(this);\n    this.T = new Path2D();\n  }, rewind:function() {\n    this.T = new Path2D();\n  }, addPath:function(q, x, F, I, B, G, J) {\n    var K = this.T, Z = K.addPath;\n    q = q.T;\n    const Q = new DOMMatrix();\n    Q.a = x;\n    Q.b = F;\n    Q.c = I;\n    Q.d = B;\n    Q.e = G;\n    Q.f = J;\n    Z.call(K, q, Q);\n  }, fillRule:function(q) {\n    this.Wa = q;\n  }, moveTo:function(q, x) {\n    this.T.moveTo(q, x);\n  }, lineTo:function(q, x) {\n    this.T.lineTo(q, x);\n  }, cubicTo:function(q, x, F, I, B, G) {\n    this.T.bezierCurveTo(q, x, F, I, B, G);\n  }, close:function() {\n    this.T.closePath();\n  },}), A = f.extend(\"CanvasRenderPaint\", {color:function(q) {\n    this.Ya = b(q);\n  }, thickness:function(q) {\n    this.Ib = q;\n  }, join:function(q) {\n    switch(q) {\n      case p.miter:\n        this.Ia = \"miter\";\n        break;\n      case p.round:\n        this.Ia = \"round\";\n        break;\n      case p.bevel:\n        this.Ia = \"bevel\";\n    }\n  }, cap:function(q) {\n    switch(q) {\n      case n.butt:\n        this.Ha = \"butt\";\n        break;\n      case n.round:\n        this.Ha = \"round\";\n        break;\n      case n.square:\n        this.Ha = \"square\";\n    }\n  }, style:function(q) {\n    this.Hb = q;\n  }, blendMode:function(q) {\n    this.Eb = a(q);\n  }, clearGradient:function() {\n    this.ja = null;\n  }, linearGradient:function(q, x, F, I) {\n    this.ja = {zb:q, Ab:x, cb:F, eb:I, Ra:[],};\n  }, radialGradient:function(q, x, F, I) {\n    this.ja = {zb:q, Ab:x, cb:F, eb:I, Ra:[], ec:!0,};\n  }, addStop:function(q, x) {\n    this.ja.Ra.push({color:q, stop:x,});\n  }, completeGradient:function() {\n  }, draw:function(q, x, F) {\n    let I = this.Hb;\n    var B = this.Ya, G = this.ja;\n    q.globalCompositeOperation = this.Eb;\n    if (null != G) {\n      B = G.zb;\n      var J = G.Ab;\n      const Z = G.cb;\n      var K = G.eb;\n      const Q = G.Ra;\n      G.ec ? (G = Z - B, K -= J, B = q.createRadialGradient(B, J, 0, B, J, Math.sqrt(G * G + K * K))) : B = q.createLinearGradient(B, J, Z, K);\n      for (let X = 0, R = Q.length; X < R; X++) {\n        J = Q[X], B.addColorStop(J.stop, b(J.color));\n      }\n      this.Ya = B;\n      this.ja = null;\n    }\n    switch(I) {\n      case v:\n        q.strokeStyle = B;\n        q.lineWidth = this.Ib;\n        q.lineCap = this.Ha;\n        q.lineJoin = this.Ia;\n        q.stroke(x);\n        break;\n      case u:\n        q.fillStyle = B, q.fill(x, F);\n    }\n  },});\n  const D = new Set();\n  let w = null, M = [], T = 0, ea = 0;\n  var ra = m.CanvasRenderer = g.extend(\"Renderer\", {__construct:function(q) {\n    this.__parent.__construct.call(this);\n    this.S = [1, 0, 0, 1, 0, 0];\n    this.C = q.getContext(\"2d\");\n    this.Va = q;\n    this.H = [];\n  }, save:function() {\n    this.S.push(...this.S.slice(this.S.length - 6));\n    this.H.push(this.C.save.bind(this.C));\n  }, restore:function() {\n    const q = this.S.length - 6;\n    if (6 > q) {\n      throw \"restore() called without matching save().\";\n    }\n    this.S.splice(q);\n    this.H.push(this.C.restore.bind(this.C));\n  }, transform:function(q, x, F, I, B, G) {\n    const J = this.S, K = J.length - 6;\n    J.splice(K, 6, J[K] * q + J[K + 2] * x, J[K + 1] * q + J[K + 3] * x, J[K] * F + J[K + 2] * I, J[K + 1] * F + J[K + 3] * I, J[K] * B + J[K + 2] * G + J[K + 4], J[K + 1] * B + J[K + 3] * G + J[K + 5]);\n    this.H.push(this.C.transform.bind(this.C, q, x, F, I, B, G));\n  }, rotate:function(q) {\n    const x = Math.sin(q);\n    q = Math.cos(q);\n    this.transform(q, x, -x, q, 0, 0);\n  }, _drawPath:function(q, x) {\n    this.H.push(x.draw.bind(x, this.C, q.T, q.Wa === y ? \"evenodd\" : \"nonzero\"));\n  }, _drawRiveImage:function(q, x, F, I) {\n    var B = q.Fb;\n    if (B) {\n      var G = this.C, J = a(F);\n      this.H.push(function() {\n        G.globalCompositeOperation = J;\n        G.globalAlpha = I;\n        G.drawImage(B, 0, 0);\n        G.globalAlpha = 1;\n      });\n    }\n  }, _getMatrix:function(q) {\n    const x = this.S, F = x.length - 6;\n    for (let I = 0; 6 > I; ++I) {\n      q[I] = x[F + I];\n    }\n  }, _drawImageMesh:function(q, x, F, I, B, G, J, K, Z, Q, X) {\n    x = this.C.canvas.width;\n    var R = this.C.canvas.height;\n    const Yb = Q - K, Zb = X - Z;\n    K = Math.max(K, 0);\n    Z = Math.max(Z, 0);\n    Q = Math.min(Q, x);\n    X = Math.min(X, R);\n    const Ga = Q - K, Ha = X - Z;\n    console.assert(Ga <= Math.min(Yb, x));\n    console.assert(Ha <= Math.min(Zb, R));\n    if (!(0 >= Ga || 0 >= Ha)) {\n      Q = Ga < Yb || Ha < Zb;\n      x = X = 1;\n      var sa = Math.ceil(Ga * X), ta = Math.ceil(Ha * x);\n      R = ja.hc();\n      sa > R && (X *= R / sa, sa = R);\n      ta > R && (x *= R / ta, ta = R);\n      w || (w = new m.DynamicRectanizer(R), w.reset(512, 512));\n      R = w.addRect(sa, ta);\n      0 > R && (c(), D.add(this), R = w.addRect(sa, ta), console.assert(0 <= R));\n      var $b = R & 65535, ac = R >> 16;\n      M.push({ha:this.S.slice(this.S.length - 6), image:q, Za:$b, $a:ac, ic:K, jc:Z, Ac:sa, kb:ta, Ba:X, Ca:x, Ua:new Float32Array(B), Db:new Float32Array(G), indices:new Uint16Array(J), mc:Q, xb:q.Ka << 1 | (Q ? 1 : 0),});\n      T += B.length;\n      ea += J.length;\n      var za = this.C, qd = a(F);\n      this.H.push(function() {\n        za.save();\n        za.resetTransform();\n        za.globalCompositeOperation = qd;\n        za.globalAlpha = I;\n        const bc = ja.canvas();\n        bc && za.drawImage(bc, $b, ac, sa, ta, K, Z, Ga, Ha);\n        za.restore();\n      });\n    }\n  }, _clipPath:function(q) {\n    this.H.push(this.C.clip.bind(this.C, q.T, q.Wa === y ? \"evenodd\" : \"nonzero\"));\n  }, clear:function() {\n    D.add(this);\n    this.H.push(this.C.clearRect.bind(this.C, 0, 0, this.Va.width, this.Va.height));\n  }, flush:function() {\n  }, translate:function(q, x) {\n    this.transform(1, 0, 0, 1, q, x);\n  },});\n  m.makeRenderer = function(q) {\n    const x = new ra(q), F = x.C;\n    return new Proxy(x, {get(I, B) {\n      if (\"function\" === typeof I[B]) {\n        return function(...G) {\n          return I[B].apply(I, G);\n        };\n      }\n      if (\"function\" === typeof F[B]) {\n        if (-1 < ia.indexOf(B)) {\n          throw Error(\"RiveException: Method call to '\" + B + \"()' is not allowed, as the renderer cannot immediately pass through the return                 values of any canvas 2d context methods.\");\n        }\n        return function(...G) {\n          x.H.push(F[B].bind(F, ...G));\n        };\n      }\n      return I[B];\n    }, set(I, B, G) {\n      if (B in F) {\n        return x.H.push(() => {\n          F[B] = G;\n        }), !0;\n      }\n    },});\n  };\n  m.decodeImage = function(q, x) {\n    (new t({la:x})).decode(q);\n  };\n  m.renderFactory = {makeRenderPaint:function() {\n    return new A();\n  }, makeRenderPath:function() {\n    return new r();\n  }, makeRenderImage:function() {\n    let q = da;\n    return new t({xa:() => {\n      q.total++;\n    }, la:() => {\n      q.loaded++;\n      if (q.loaded === q.total) {\n        const x = q.ready;\n        x && (x(), q.ready = null);\n      }\n    },});\n  },};\n  let H = m.load, da = null;\n  m.load = function(q, x, F = !0) {\n    const I = new m.FallbackFileAssetLoader();\n    void 0 !== x && I.addLoader(x);\n    F && (x = new m.CDNFileAssetLoader(), I.addLoader(x));\n    return new Promise(function(B) {\n      let G = null;\n      da = {total:0, loaded:0, ready:function() {\n        B(G);\n      },};\n      G = H(q, I);\n      0 == da.total && B(G);\n    });\n  };\n  let rd = m.RendererWrapper.prototype.align;\n  m.RendererWrapper.prototype.align = function(q, x, F, I, B = 1.0) {\n    rd.call(this, q, x, F, I, B);\n  };\n  d = new ca();\n  m.requestAnimationFrame = d.requestAnimationFrame.bind(d);\n  m.cancelAnimationFrame = d.cancelAnimationFrame.bind(d);\n  m.enableFPSCounter = d.Rb.bind(d);\n  m.disableFPSCounter = d.Ob;\n  d.pb = c;\n  m.resolveAnimationFrame = c;\n  m.cleanup = function() {\n    w && w.delete();\n  };\n};\nvar la = Object.assign({}, m), ma = \"./this.program\", na = \"object\" == typeof window, oa = \"function\" == typeof importScripts, pa = \"\", qa, ua;\nif (na || oa) {\n  oa ? pa = self.location.href : \"undefined\" != typeof document && document.currentScript && (pa = document.currentScript.src), _scriptDir && (pa = _scriptDir), 0 !== pa.indexOf(\"blob:\") ? pa = pa.substr(0, pa.replace(/[?#].*/, \"\").lastIndexOf(\"/\") + 1) : pa = \"\", oa && (ua = a => {\n    var b = new XMLHttpRequest();\n    b.open(\"GET\", a, !1);\n    b.responseType = \"arraybuffer\";\n    b.send(null);\n    return new Uint8Array(b.response);\n  }), qa = (a, b, c) => {\n    var d = new XMLHttpRequest();\n    d.open(\"GET\", a, !0);\n    d.responseType = \"arraybuffer\";\n    d.onload = () => {\n      200 == d.status || 0 == d.status && d.response ? b(d.response) : c();\n    };\n    d.onerror = c;\n    d.send(null);\n  };\n}\nvar va = m.print || console.log.bind(console), wa = m.printErr || console.error.bind(console);\nObject.assign(m, la);\nla = null;\nm.thisProgram && (ma = m.thisProgram);\nvar xa;\nm.wasmBinary && (xa = m.wasmBinary);\nvar noExitRuntime = m.noExitRuntime || !0;\n\"object\" != typeof WebAssembly && ya(\"no native wasm support detected\");\nvar Aa, z, Ba = !1, C, E, Ca, Da, L, N, Ea, Fa;\nfunction Ia() {\n  var a = Aa.buffer;\n  m.HEAP8 = C = new Int8Array(a);\n  m.HEAP16 = Ca = new Int16Array(a);\n  m.HEAP32 = L = new Int32Array(a);\n  m.HEAPU8 = E = new Uint8Array(a);\n  m.HEAPU16 = Da = new Uint16Array(a);\n  m.HEAPU32 = N = new Uint32Array(a);\n  m.HEAPF32 = Ea = new Float32Array(a);\n  m.HEAPF64 = Fa = new Float64Array(a);\n}\nvar Ja, Ka = [], La = [], Ma = [];\nfunction Na() {\n  var a = m.preRun.shift();\n  Ka.unshift(a);\n}\nvar Oa = 0, Pa = null, Qa = null;\nfunction ya(a) {\n  if (m.onAbort) {\n    m.onAbort(a);\n  }\n  a = \"Aborted(\" + a + \")\";\n  wa(a);\n  Ba = !0;\n  a = new WebAssembly.RuntimeError(a + \". Build with -sASSERTIONS for more info.\");\n  ba(a);\n  throw a;\n}\nfunction Ra(a) {\n  return a.startsWith(\"data:application/octet-stream;base64,\");\n}\nvar Sa;\nSa = \"canvas_advanced.wasm\";\nif (!Ra(Sa)) {\n  var Ta = Sa;\n  Sa = m.locateFile ? m.locateFile(Ta, pa) : pa + Ta;\n}\nfunction Ua(a) {\n  if (a == Sa && xa) {\n    return new Uint8Array(xa);\n  }\n  if (ua) {\n    return ua(a);\n  }\n  throw \"both async and sync fetching of the wasm failed\";\n}\nfunction Va(a) {\n  if (!xa && (na || oa)) {\n    if (\"function\" == typeof fetch && !a.startsWith(\"file://\")) {\n      return fetch(a, {credentials:\"same-origin\"}).then(b => {\n        if (!b.ok) {\n          throw \"failed to load wasm binary file at '\" + a + \"'\";\n        }\n        return b.arrayBuffer();\n      }).catch(() => Ua(a));\n    }\n    if (qa) {\n      return new Promise((b, c) => {\n        qa(a, d => b(new Uint8Array(d)), c);\n      });\n    }\n  }\n  return Promise.resolve().then(() => Ua(a));\n}\nfunction Wa(a, b, c) {\n  return Va(a).then(d => WebAssembly.instantiate(d, b)).then(d => d).then(c, d => {\n    wa(\"failed to asynchronously prepare wasm: \" + d);\n    ya(d);\n  });\n}\nfunction Xa(a, b) {\n  var c = Sa;\n  return xa || \"function\" != typeof WebAssembly.instantiateStreaming || Ra(c) || c.startsWith(\"file://\") || \"function\" != typeof fetch ? Wa(c, a, b) : fetch(c, {credentials:\"same-origin\"}).then(d => WebAssembly.instantiateStreaming(d, a).then(b, function(e) {\n    wa(\"wasm streaming compile failed: \" + e);\n    wa(\"falling back to ArrayBuffer instantiation\");\n    return Wa(c, a, b);\n  }));\n}\nvar Ya, Za, cb = {460364:(a, b, c, d, e) => {\n  if (\"undefined\" === typeof window || void 0 === (window.AudioContext || window.webkitAudioContext)) {\n    return 0;\n  }\n  if (\"undefined\" === typeof window.h) {\n    window.h = {Aa:0};\n    window.h.I = {};\n    window.h.I.ya = a;\n    window.h.I.capture = b;\n    window.h.I.La = c;\n    window.h.ga = {};\n    window.h.ga.stopped = d;\n    window.h.ga.yb = e;\n    let f = window.h;\n    f.D = [];\n    f.yc = function(g) {\n      for (var n = 0; n < f.D.length; ++n) {\n        if (null == f.D[n]) {\n          return f.D[n] = g, n;\n        }\n      }\n      f.D.push(g);\n      return f.D.length - 1;\n    };\n    f.Cb = function(g) {\n      for (f.D[g] = null; 0 < f.D.length;) {\n        if (null == f.D[f.D.length - 1]) {\n          f.D.pop();\n        } else {\n          break;\n        }\n      }\n    };\n    f.Sc = function(g) {\n      for (var n = 0; n < f.D.length; ++n) {\n        if (f.D[n] == g) {\n          return f.Cb(n);\n        }\n      }\n    };\n    f.ra = function(g) {\n      return f.D[g];\n    };\n    f.Ta = [\"touchend\", \"click\"];\n    f.unlock = function() {\n      for (var g = 0; g < f.D.length; ++g) {\n        var n = f.D[g];\n        null != n && null != n.J && n.state === f.ga.yb && n.J.resume().then(() => {\n          $a(n.qb);\n        }, p => {\n          console.error(\"Failed to resume audiocontext\", p);\n        });\n      }\n      f.Ta.map(function(p) {\n        document.removeEventListener(p, f.unlock, !0);\n      });\n    };\n    f.Ta.map(function(g) {\n      document.addEventListener(g, f.unlock, !0);\n    });\n  }\n  window.h.Aa += 1;\n  return 1;\n}, 462542:() => {\n  \"undefined\" !== typeof window.h && (window.h.Ta.map(function(a) {\n    document.removeEventListener(a, window.h.unlock, !0);\n  }), --window.h.Aa, 0 === window.h.Aa && delete window.h);\n}, 462846:() => void 0 !== navigator.mediaDevices && void 0 !== navigator.mediaDevices.getUserMedia, 462950:() => {\n  try {\n    var a = new (window.AudioContext || window.webkitAudioContext)(), b = a.sampleRate;\n    a.close();\n    return b;\n  } catch (c) {\n    return 0;\n  }\n}, 463121:(a, b, c, d, e, f) => {\n  if (\"undefined\" === typeof window.h) {\n    return -1;\n  }\n  var g = {}, n = {};\n  a == window.h.I.ya && 0 != c && (n.sampleRate = c);\n  g.J = new (window.AudioContext || window.webkitAudioContext)(n);\n  g.J.suspend();\n  g.state = window.h.ga.stopped;\n  c = 0;\n  a != window.h.I.ya && (c = b);\n  g.Z = g.J.createScriptProcessor(d, c, b);\n  g.Z.onaudioprocess = function(p) {\n    if (null == g.sa || 0 == g.sa.length) {\n      g.sa = new Float32Array(Ea.buffer, e, d * b);\n    }\n    if (a == window.h.I.capture || a == window.h.I.La) {\n      for (var l = 0; l < b; l += 1) {\n        for (var u = p.inputBuffer.getChannelData(l), v = g.sa, y = 0; y < d; y += 1) {\n          v[y * b + l] = u[y];\n        }\n      }\n      ab(f, d, e);\n    }\n    if (a == window.h.I.ya || a == window.h.I.La) {\n      for (bb(f, d, e), l = 0; l < p.outputBuffer.numberOfChannels; ++l) {\n        for (u = p.outputBuffer.getChannelData(l), v = g.sa, y = 0; y < d; y += 1) {\n          u[y] = v[y * b + l];\n        }\n      }\n    } else {\n      for (l = 0; l < p.outputBuffer.numberOfChannels; ++l) {\n        p.outputBuffer.getChannelData(l).fill(0.0);\n      }\n    }\n  };\n  a != window.h.I.capture && a != window.h.I.La || navigator.mediaDevices.getUserMedia({audio:!0, video:!1}).then(function(p) {\n    g.Da = g.J.createMediaStreamSource(p);\n    g.Da.connect(g.Z);\n    g.Z.connect(g.J.destination);\n  }).catch(function(p) {\n    console.log(\"Failed to get user media: \" + p);\n  });\n  a == window.h.I.ya && g.Z.connect(g.J.destination);\n  g.qb = f;\n  return window.h.yc(g);\n}, 465998:a => window.h.ra(a).J.sampleRate, 466071:a => {\n  a = window.h.ra(a);\n  void 0 !== a.Z && (a.Z.onaudioprocess = function() {\n  }, a.Z.disconnect(), a.Z = void 0);\n  void 0 !== a.Da && (a.Da.disconnect(), a.Da = void 0);\n  a.J.close();\n  a.J = void 0;\n  a.qb = void 0;\n}, 466471:a => {\n  window.h.Cb(a);\n}, 466521:a => {\n  a = window.h.ra(a);\n  a.J.resume();\n  a.state = window.h.ga.yb;\n}, 466660:a => {\n  a = window.h.ra(a);\n  a.J.suspend();\n  a.state = window.h.ga.stopped;\n}}, db = a => {\n  for (; 0 < a.length;) {\n    a.shift()(m);\n  }\n}, eb = (a, b) => {\n  for (var c = 0, d = a.length - 1; 0 <= d; d--) {\n    var e = a[d];\n    \".\" === e ? a.splice(d, 1) : \"..\" === e ? (a.splice(d, 1), c++) : c && (a.splice(d, 1), c--);\n  }\n  if (b) {\n    for (; c; c--) {\n      a.unshift(\"..\");\n    }\n  }\n  return a;\n}, fb = a => {\n  var b = \"/\" === a.charAt(0), c = \"/\" === a.substr(-1);\n  (a = eb(a.split(\"/\").filter(d => !!d), !b).join(\"/\")) || b || (a = \".\");\n  a && c && (a += \"/\");\n  return (b ? \"/\" : \"\") + a;\n}, gb = a => {\n  var b = /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/.exec(a).slice(1);\n  a = b[0];\n  b = b[1];\n  if (!a && !b) {\n    return \".\";\n  }\n  b && (b = b.substr(0, b.length - 1));\n  return a + b;\n}, hb = a => {\n  if (\"/\" === a) {\n    return \"/\";\n  }\n  a = fb(a);\n  a = a.replace(/\\/$/, \"\");\n  var b = a.lastIndexOf(\"/\");\n  return -1 === b ? a : a.substr(b + 1);\n}, ib = () => {\n  if (\"object\" == typeof crypto && \"function\" == typeof crypto.getRandomValues) {\n    return a => crypto.getRandomValues(a);\n  }\n  ya(\"initRandomDevice\");\n}, jb = a => (jb = ib())(a);\nfunction kb() {\n  for (var a = \"\", b = !1, c = arguments.length - 1; -1 <= c && !b; c--) {\n    b = 0 <= c ? arguments[c] : \"/\";\n    if (\"string\" != typeof b) {\n      throw new TypeError(\"Arguments to path.resolve must be strings\");\n    }\n    if (!b) {\n      return \"\";\n    }\n    a = b + \"/\" + a;\n    b = \"/\" === b.charAt(0);\n  }\n  a = eb(a.split(\"/\").filter(d => !!d), !b).join(\"/\");\n  return (b ? \"/\" : \"\") + a || \".\";\n}\nvar lb = \"undefined\" != typeof TextDecoder ? new TextDecoder(\"utf8\") : void 0, mb = (a, b, c) => {\n  var d = b + c;\n  for (c = b; a[c] && !(c >= d);) {\n    ++c;\n  }\n  if (16 < c - b && a.buffer && lb) {\n    return lb.decode(a.subarray(b, c));\n  }\n  for (d = \"\"; b < c;) {\n    var e = a[b++];\n    if (e & 128) {\n      var f = a[b++] & 63;\n      if (192 == (e & 224)) {\n        d += String.fromCharCode((e & 31) << 6 | f);\n      } else {\n        var g = a[b++] & 63;\n        e = 224 == (e & 240) ? (e & 15) << 12 | f << 6 | g : (e & 7) << 18 | f << 12 | g << 6 | a[b++] & 63;\n        65536 > e ? d += String.fromCharCode(e) : (e -= 65536, d += String.fromCharCode(55296 | e >> 10, 56320 | e & 1023));\n      }\n    } else {\n      d += String.fromCharCode(e);\n    }\n  }\n  return d;\n}, nb = [], ob = a => {\n  for (var b = 0, c = 0; c < a.length; ++c) {\n    var d = a.charCodeAt(c);\n    127 >= d ? b++ : 2047 >= d ? b += 2 : 55296 <= d && 57343 >= d ? (b += 4, ++c) : b += 3;\n  }\n  return b;\n}, pb = (a, b, c, d) => {\n  if (!(0 < d)) {\n    return 0;\n  }\n  var e = c;\n  d = c + d - 1;\n  for (var f = 0; f < a.length; ++f) {\n    var g = a.charCodeAt(f);\n    if (55296 <= g && 57343 >= g) {\n      var n = a.charCodeAt(++f);\n      g = 65536 + ((g & 1023) << 10) | n & 1023;\n    }\n    if (127 >= g) {\n      if (c >= d) {\n        break;\n      }\n      b[c++] = g;\n    } else {\n      if (2047 >= g) {\n        if (c + 1 >= d) {\n          break;\n        }\n        b[c++] = 192 | g >> 6;\n      } else {\n        if (65535 >= g) {\n          if (c + 2 >= d) {\n            break;\n          }\n          b[c++] = 224 | g >> 12;\n        } else {\n          if (c + 3 >= d) {\n            break;\n          }\n          b[c++] = 240 | g >> 18;\n          b[c++] = 128 | g >> 12 & 63;\n        }\n        b[c++] = 128 | g >> 6 & 63;\n      }\n      b[c++] = 128 | g & 63;\n    }\n  }\n  b[c] = 0;\n  return c - e;\n};\nfunction qb(a, b) {\n  var c = Array(ob(a) + 1);\n  a = pb(a, c, 0, c.length);\n  b && (c.length = a);\n  return c;\n}\nvar rb = [];\nfunction sb(a, b) {\n  rb[a] = {input:[], F:[], V:b};\n  tb(a, ub);\n}\nvar ub = {open:function(a) {\n  var b = rb[a.node.za];\n  if (!b) {\n    throw new O(43);\n  }\n  a.s = b;\n  a.seekable = !1;\n}, close:function(a) {\n  a.s.V.qa(a.s);\n}, qa:function(a) {\n  a.s.V.qa(a.s);\n}, read:function(a, b, c, d) {\n  if (!a.s || !a.s.V.jb) {\n    throw new O(60);\n  }\n  for (var e = 0, f = 0; f < d; f++) {\n    try {\n      var g = a.s.V.jb(a.s);\n    } catch (n) {\n      throw new O(29);\n    }\n    if (void 0 === g && 0 === e) {\n      throw new O(6);\n    }\n    if (null === g || void 0 === g) {\n      break;\n    }\n    e++;\n    b[c + f] = g;\n  }\n  e && (a.node.timestamp = Date.now());\n  return e;\n}, write:function(a, b, c, d) {\n  if (!a.s || !a.s.V.Oa) {\n    throw new O(60);\n  }\n  try {\n    for (var e = 0; e < d; e++) {\n      a.s.V.Oa(a.s, b[c + e]);\n    }\n  } catch (f) {\n    throw new O(29);\n  }\n  d && (a.node.timestamp = Date.now());\n  return e;\n},}, vb = {jb:function() {\n  a: {\n    if (!nb.length) {\n      var a = null;\n      \"undefined\" != typeof window && \"function\" == typeof window.prompt ? (a = window.prompt(\"Input: \"), null !== a && (a += \"\\n\")) : \"function\" == typeof readline && (a = readline(), null !== a && (a += \"\\n\"));\n      if (!a) {\n        a = null;\n        break a;\n      }\n      nb = qb(a, !0);\n    }\n    a = nb.shift();\n  }\n  return a;\n}, Oa:function(a, b) {\n  null === b || 10 === b ? (va(mb(a.F, 0)), a.F = []) : 0 != b && a.F.push(b);\n}, qa:function(a) {\n  a.F && 0 < a.F.length && (va(mb(a.F, 0)), a.F = []);\n}, bc:function() {\n  return {Fc:25856, Hc:5, Ec:191, Gc:35387, Dc:[3, 28, 127, 21, 4, 0, 1, 0, 17, 19, 26, 0, 18, 15, 23, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]};\n}, cc:function() {\n  return 0;\n}, dc:function() {\n  return [24, 80];\n},}, wb = {Oa:function(a, b) {\n  null === b || 10 === b ? (wa(mb(a.F, 0)), a.F = []) : 0 != b && a.F.push(b);\n}, qa:function(a) {\n  a.F && 0 < a.F.length && (wa(mb(a.F, 0)), a.F = []);\n},};\nfunction xb(a, b) {\n  var c = a.j ? a.j.length : 0;\n  c >= b || (b = Math.max(b, c * (1048576 > c ? 2.0 : 1.125) >>> 0), 0 != c && (b = Math.max(b, 256)), c = a.j, a.j = new Uint8Array(b), 0 < a.v && a.j.set(c.subarray(0, a.v), 0));\n}\nvar P = {O:null, U() {\n  return P.createNode(null, \"/\", 16895, 0);\n}, createNode(a, b, c, d) {\n  if (24576 === (c & 61440) || 4096 === (c & 61440)) {\n    throw new O(63);\n  }\n  P.O || (P.O = {dir:{node:{Y:P.l.Y, P:P.l.P, ka:P.l.ka, va:P.l.va, vb:P.l.vb, Bb:P.l.Bb, wb:P.l.wb, tb:P.l.tb, Ea:P.l.Ea}, stream:{ba:P.m.ba}}, file:{node:{Y:P.l.Y, P:P.l.P}, stream:{ba:P.m.ba, read:P.m.read, write:P.m.write, pa:P.m.pa, mb:P.m.mb, ob:P.m.ob}}, link:{node:{Y:P.l.Y, P:P.l.P, ma:P.l.ma}, stream:{}}, ab:{node:{Y:P.l.Y, P:P.l.P}, stream:yb}});\n  c = zb(a, b, c, d);\n  16384 === (c.mode & 61440) ? (c.l = P.O.dir.node, c.m = P.O.dir.stream, c.j = {}) : 32768 === (c.mode & 61440) ? (c.l = P.O.file.node, c.m = P.O.file.stream, c.v = 0, c.j = null) : 40960 === (c.mode & 61440) ? (c.l = P.O.link.node, c.m = P.O.link.stream) : 8192 === (c.mode & 61440) && (c.l = P.O.ab.node, c.m = P.O.ab.stream);\n  c.timestamp = Date.now();\n  a && (a.j[b] = c, a.timestamp = c.timestamp);\n  return c;\n}, Kc(a) {\n  return a.j ? a.j.subarray ? a.j.subarray(0, a.v) : new Uint8Array(a.j) : new Uint8Array(0);\n}, l:{Y(a) {\n  var b = {};\n  b.Jc = 8192 === (a.mode & 61440) ? a.id : 1;\n  b.Mc = a.id;\n  b.mode = a.mode;\n  b.Oc = 1;\n  b.uid = 0;\n  b.Lc = 0;\n  b.za = a.za;\n  16384 === (a.mode & 61440) ? b.size = 4096 : 32768 === (a.mode & 61440) ? b.size = a.v : 40960 === (a.mode & 61440) ? b.size = a.link.length : b.size = 0;\n  b.Bc = new Date(a.timestamp);\n  b.Nc = new Date(a.timestamp);\n  b.Ic = new Date(a.timestamp);\n  b.Jb = 4096;\n  b.Cc = Math.ceil(b.size / b.Jb);\n  return b;\n}, P(a, b) {\n  void 0 !== b.mode && (a.mode = b.mode);\n  void 0 !== b.timestamp && (a.timestamp = b.timestamp);\n  if (void 0 !== b.size && (b = b.size, a.v != b)) {\n    if (0 == b) {\n      a.j = null, a.v = 0;\n    } else {\n      var c = a.j;\n      a.j = new Uint8Array(b);\n      c && a.j.set(c.subarray(0, Math.min(b, a.v)));\n      a.v = b;\n    }\n  }\n}, ka() {\n  throw Ab[44];\n}, va(a, b, c, d) {\n  return P.createNode(a, b, c, d);\n}, vb(a, b, c) {\n  if (16384 === (a.mode & 61440)) {\n    try {\n      var d = Bb(b, c);\n    } catch (f) {\n    }\n    if (d) {\n      for (var e in d.j) {\n        throw new O(55);\n      }\n    }\n  }\n  delete a.parent.j[a.name];\n  a.parent.timestamp = Date.now();\n  a.name = c;\n  b.j[c] = a;\n  b.timestamp = a.parent.timestamp;\n  a.parent = b;\n}, Bb(a, b) {\n  delete a.j[b];\n  a.timestamp = Date.now();\n}, wb(a, b) {\n  var c = Bb(a, b), d;\n  for (d in c.j) {\n    throw new O(55);\n  }\n  delete a.j[b];\n  a.timestamp = Date.now();\n}, tb(a) {\n  var b = [\".\", \"..\"], c;\n  for (c in a.j) {\n    a.j.hasOwnProperty(c) && b.push(c);\n  }\n  return b;\n}, Ea(a, b, c) {\n  a = P.createNode(a, b, 41471, 0);\n  a.link = c;\n  return a;\n}, ma(a) {\n  if (40960 !== (a.mode & 61440)) {\n    throw new O(28);\n  }\n  return a.link;\n},}, m:{read(a, b, c, d, e) {\n  var f = a.node.j;\n  if (e >= a.node.v) {\n    return 0;\n  }\n  a = Math.min(a.node.v - e, d);\n  if (8 < a && f.subarray) {\n    b.set(f.subarray(e, e + a), c);\n  } else {\n    for (d = 0; d < a; d++) {\n      b[c + d] = f[e + d];\n    }\n  }\n  return a;\n}, write(a, b, c, d, e, f) {\n  b.buffer === C.buffer && (f = !1);\n  if (!d) {\n    return 0;\n  }\n  a = a.node;\n  a.timestamp = Date.now();\n  if (b.subarray && (!a.j || a.j.subarray)) {\n    if (f) {\n      return a.j = b.subarray(c, c + d), a.v = d;\n    }\n    if (0 === a.v && 0 === e) {\n      return a.j = b.slice(c, c + d), a.v = d;\n    }\n    if (e + d <= a.v) {\n      return a.j.set(b.subarray(c, c + d), e), d;\n    }\n  }\n  xb(a, e + d);\n  if (a.j.subarray && b.subarray) {\n    a.j.set(b.subarray(c, c + d), e);\n  } else {\n    for (f = 0; f < d; f++) {\n      a.j[e + f] = b[c + f];\n    }\n  }\n  a.v = Math.max(a.v, e + d);\n  return d;\n}, ba(a, b, c) {\n  1 === c ? b += a.position : 2 === c && 32768 === (a.node.mode & 61440) && (b += a.node.v);\n  if (0 > b) {\n    throw new O(28);\n  }\n  return b;\n}, pa(a, b, c) {\n  xb(a.node, b + c);\n  a.node.v = Math.max(a.node.v, b + c);\n}, mb(a, b, c, d, e) {\n  if (32768 !== (a.node.mode & 61440)) {\n    throw new O(43);\n  }\n  a = a.node.j;\n  if (e & 2 || a.buffer !== C.buffer) {\n    if (0 < c || c + b < a.length) {\n      a.subarray ? a = a.subarray(c, c + b) : a = Array.prototype.slice.call(a, c, c + b);\n    }\n    c = !0;\n    ya();\n    b = void 0;\n    if (!b) {\n      throw new O(48);\n    }\n    C.set(a, b);\n  } else {\n    c = !1, b = a.byteOffset;\n  }\n  return {o:b, M:c};\n}, ob(a, b, c, d) {\n  P.m.write(a, b, 0, d, c, !1);\n  return 0;\n},},};\nfunction Cb(a, b) {\n  var c = 0;\n  a && (c |= 365);\n  b && (c |= 146);\n  return c;\n}\nvar Db = null, Eb = {}, Fb = [], Gb = 1, Hb = null, Ib = !0, O = null, Ab = {}, Kb = (a, b = {}) => {\n  a = kb(a);\n  if (!a) {\n    return {path:\"\", node:null};\n  }\n  b = Object.assign({hb:!0, Qa:0}, b);\n  if (8 < b.Qa) {\n    throw new O(32);\n  }\n  a = a.split(\"/\").filter(g => !!g);\n  for (var c = Db, d = \"/\", e = 0; e < a.length; e++) {\n    var f = e === a.length - 1;\n    if (f && b.parent) {\n      break;\n    }\n    c = Bb(c, a[e]);\n    d = fb(d + \"/\" + a[e]);\n    c.wa && (!f || f && b.hb) && (c = c.wa.root);\n    if (!f || b.gb) {\n      for (f = 0; 40960 === (c.mode & 61440);) {\n        if (c = Jb(d), d = kb(gb(d), c), c = Kb(d, {Qa:b.Qa + 1}).node, 40 < f++) {\n          throw new O(32);\n        }\n      }\n    }\n  }\n  return {path:d, node:c};\n}, Lb = a => {\n  for (var b;;) {\n    if (a === a.parent) {\n      return a = a.U.nb, b ? \"/\" !== a[a.length - 1] ? `${a}/${b}` : a + b : a;\n    }\n    b = b ? `${a.name}/${b}` : a.name;\n    a = a.parent;\n  }\n}, Mb = (a, b) => {\n  for (var c = 0, d = 0; d < b.length; d++) {\n    c = (c << 5) - c + b.charCodeAt(d) | 0;\n  }\n  return (a + c >>> 0) % Hb.length;\n}, Bb = (a, b) => {\n  var c;\n  if (c = (c = Nb(a, \"x\")) ? c : a.l.ka ? 0 : 2) {\n    throw new O(c, a);\n  }\n  for (c = Hb[Mb(a.id, b)]; c; c = c.lc) {\n    var d = c.name;\n    if (c.parent.id === a.id && d === b) {\n      return c;\n    }\n  }\n  return a.l.ka(a, b);\n}, zb = (a, b, c, d) => {\n  a = new Ob(a, b, c, d);\n  b = Mb(a.parent.id, a.name);\n  a.lc = Hb[b];\n  return Hb[b] = a;\n}, Pb = a => {\n  var b = [\"r\", \"w\", \"rw\"][a & 3];\n  a & 512 && (b += \"w\");\n  return b;\n}, Nb = (a, b) => {\n  if (Ib) {\n    return 0;\n  }\n  if (!b.includes(\"r\") || a.mode & 292) {\n    if (b.includes(\"w\") && !(a.mode & 146) || b.includes(\"x\") && !(a.mode & 73)) {\n      return 2;\n    }\n  } else {\n    return 2;\n  }\n  return 0;\n}, Qb = (a, b) => {\n  try {\n    return Bb(a, b), 20;\n  } catch (c) {\n  }\n  return Nb(a, \"wx\");\n}, Rb = () => {\n  for (var a = 0; 4096 >= a; a++) {\n    if (!Fb[a]) {\n      return a;\n    }\n  }\n  throw new O(33);\n}, Sb = a => {\n  a = Fb[a];\n  if (!a) {\n    throw new O(8);\n  }\n  return a;\n}, Ub = (a, b = -1) => {\n  Tb || (Tb = function() {\n    this.h = {};\n  }, Tb.prototype = {}, Object.defineProperties(Tb.prototype, {object:{get() {\n    return this.node;\n  }, set(c) {\n    this.node = c;\n  }}, flags:{get() {\n    return this.h.flags;\n  }, set(c) {\n    this.h.flags = c;\n  },}, position:{get() {\n    return this.h.position;\n  }, set(c) {\n    this.h.position = c;\n  },},}));\n  a = Object.assign(new Tb(), a);\n  -1 == b && (b = Rb());\n  a.X = b;\n  return Fb[b] = a;\n}, yb = {open:a => {\n  a.m = Eb[a.node.za].m;\n  a.m.open && a.m.open(a);\n}, ba:() => {\n  throw new O(70);\n},}, tb = (a, b) => {\n  Eb[a] = {m:b};\n}, Vb = (a, b) => {\n  var c = \"/\" === b, d = !b;\n  if (c && Db) {\n    throw new O(10);\n  }\n  if (!c && !d) {\n    var e = Kb(b, {hb:!1});\n    b = e.path;\n    e = e.node;\n    if (e.wa) {\n      throw new O(10);\n    }\n    if (16384 !== (e.mode & 61440)) {\n      throw new O(54);\n    }\n  }\n  b = {type:a, Qc:{}, nb:b, kc:[]};\n  a = a.U(b);\n  a.U = b;\n  b.root = a;\n  c ? Db = a : e && (e.wa = b, e.U && e.U.kc.push(b));\n}, Wb = (a, b, c) => {\n  var d = Kb(a, {parent:!0}).node;\n  a = hb(a);\n  if (!a || \".\" === a || \"..\" === a) {\n    throw new O(28);\n  }\n  var e = Qb(d, a);\n  if (e) {\n    throw new O(e);\n  }\n  if (!d.l.va) {\n    throw new O(63);\n  }\n  return d.l.va(d, a, b, c);\n}, Xb = (a, b, c) => {\n  \"undefined\" == typeof c && (c = b, b = 438);\n  Wb(a, b | 8192, c);\n}, cc = (a, b) => {\n  if (!kb(a)) {\n    throw new O(44);\n  }\n  var c = Kb(b, {parent:!0}).node;\n  if (!c) {\n    throw new O(44);\n  }\n  b = hb(b);\n  var d = Qb(c, b);\n  if (d) {\n    throw new O(d);\n  }\n  if (!c.l.Ea) {\n    throw new O(63);\n  }\n  c.l.Ea(c, b, a);\n}, Jb = a => {\n  a = Kb(a).node;\n  if (!a) {\n    throw new O(44);\n  }\n  if (!a.l.ma) {\n    throw new O(28);\n  }\n  return kb(Lb(a.parent), a.l.ma(a));\n}, ec = (a, b, c) => {\n  if (\"\" === a) {\n    throw new O(44);\n  }\n  if (\"string\" == typeof b) {\n    var d = {r:0, \"r+\":2, w:577, \"w+\":578, a:1089, \"a+\":1090,}[b];\n    if (\"undefined\" == typeof d) {\n      throw Error(`Unknown file open mode: ${b}`);\n    }\n    b = d;\n  }\n  c = b & 64 ? (\"undefined\" == typeof c ? 438 : c) & 4095 | 32768 : 0;\n  if (\"object\" == typeof a) {\n    var e = a;\n  } else {\n    a = fb(a);\n    try {\n      e = Kb(a, {gb:!(b & 131072)}).node;\n    } catch (f) {\n    }\n  }\n  d = !1;\n  if (b & 64) {\n    if (e) {\n      if (b & 128) {\n        throw new O(20);\n      }\n    } else {\n      e = Wb(a, c, 0), d = !0;\n    }\n  }\n  if (!e) {\n    throw new O(44);\n  }\n  8192 === (e.mode & 61440) && (b &= -513);\n  if (b & 65536 && 16384 !== (e.mode & 61440)) {\n    throw new O(54);\n  }\n  if (!d && (c = e ? 40960 === (e.mode & 61440) ? 32 : 16384 === (e.mode & 61440) && (\"r\" !== Pb(b) || b & 512) ? 31 : Nb(e, Pb(b)) : 44)) {\n    throw new O(c);\n  }\n  if (b & 512 && !d) {\n    c = e;\n    c = \"string\" == typeof c ? Kb(c, {gb:!0}).node : c;\n    if (!c.l.P) {\n      throw new O(63);\n    }\n    if (16384 === (c.mode & 61440)) {\n      throw new O(31);\n    }\n    if (32768 !== (c.mode & 61440)) {\n      throw new O(28);\n    }\n    if (d = Nb(c, \"w\")) {\n      throw new O(d);\n    }\n    c.l.P(c, {size:0, timestamp:Date.now()});\n  }\n  b &= -131713;\n  e = Ub({node:e, path:Lb(e), flags:b, seekable:!0, position:0, m:e.m, zc:[], error:!1});\n  e.m.open && e.m.open(e);\n  !m.logReadFiles || b & 1 || (dc || (dc = {}), a in dc || (dc[a] = 1));\n  return e;\n}, fc = (a, b, c) => {\n  if (null === a.X) {\n    throw new O(8);\n  }\n  if (!a.seekable || !a.m.ba) {\n    throw new O(70);\n  }\n  if (0 != c && 1 != c && 2 != c) {\n    throw new O(28);\n  }\n  a.position = a.m.ba(a, b, c);\n  a.zc = [];\n}, gc = () => {\n  O || (O = function(a, b) {\n    this.name = \"ErrnoError\";\n    this.node = b;\n    this.pc = function(c) {\n      this.aa = c;\n    };\n    this.pc(a);\n    this.message = \"FS error\";\n  }, O.prototype = Error(), O.prototype.constructor = O, [44].forEach(a => {\n    Ab[a] = new O(a);\n    Ab[a].stack = \"<generic error, no stack>\";\n  }));\n}, hc, jc = (a, b, c) => {\n  a = fb(\"/dev/\" + a);\n  var d = Cb(!!b, !!c);\n  ic || (ic = 64);\n  var e = ic++ << 8 | 0;\n  tb(e, {open:f => {\n    f.seekable = !1;\n  }, close:() => {\n    c && c.buffer && c.buffer.length && c(10);\n  }, read:(f, g, n, p) => {\n    for (var l = 0, u = 0; u < p; u++) {\n      try {\n        var v = b();\n      } catch (y) {\n        throw new O(29);\n      }\n      if (void 0 === v && 0 === l) {\n        throw new O(6);\n      }\n      if (null === v || void 0 === v) {\n        break;\n      }\n      l++;\n      g[n + u] = v;\n    }\n    l && (f.node.timestamp = Date.now());\n    return l;\n  }, write:(f, g, n, p) => {\n    for (var l = 0; l < p; l++) {\n      try {\n        c(g[n + l]);\n      } catch (u) {\n        throw new O(29);\n      }\n    }\n    p && (f.node.timestamp = Date.now());\n    return l;\n  }});\n  Xb(a, d, e);\n}, ic, kc = {}, Tb, dc, lc = void 0;\nfunction mc() {\n  lc += 4;\n  return L[lc - 4 >> 2];\n}\nfunction nc(a) {\n  if (void 0 === a) {\n    return \"_unknown\";\n  }\n  a = a.replace(/[^a-zA-Z0-9_]/g, \"$\");\n  var b = a.charCodeAt(0);\n  return 48 <= b && 57 >= b ? `_${a}` : a;\n}\nfunction oc(a, b) {\n  a = nc(a);\n  return {[a]:function() {\n    return b.apply(this, arguments);\n  }}[a];\n}\nfunction pc() {\n  this.M = [void 0];\n  this.ib = [];\n}\nvar S = new pc(), qc = void 0;\nfunction U(a) {\n  throw new qc(a);\n}\nvar rc = a => {\n  a || U(\"Cannot use deleted val. handle = \" + a);\n  return S.get(a).value;\n}, sc = a => {\n  switch(a) {\n    case void 0:\n      return 1;\n    case null:\n      return 2;\n    case !0:\n      return 3;\n    case !1:\n      return 4;\n    default:\n      return S.pa({ub:1, value:a});\n  }\n};\nfunction tc(a) {\n  var b = Error, c = oc(a, function(d) {\n    this.name = a;\n    this.message = d;\n    d = Error(d).stack;\n    void 0 !== d && (this.stack = this.toString() + \"\\n\" + d.replace(/^Error(:[^\\n]*)?\\n/, \"\"));\n  });\n  c.prototype = Object.create(b.prototype);\n  c.prototype.constructor = c;\n  c.prototype.toString = function() {\n    return void 0 === this.message ? this.name : `${this.name}: ${this.message}`;\n  };\n  return c;\n}\nvar uc = void 0, vc = void 0;\nfunction V(a) {\n  for (var b = \"\"; E[a];) {\n    b += vc[E[a++]];\n  }\n  return b;\n}\nvar wc = [];\nfunction xc() {\n  for (; wc.length;) {\n    var a = wc.pop();\n    a.g.fa = !1;\n    a[\"delete\"]();\n  }\n}\nvar yc = void 0, zc = {};\nfunction Ac(a, b) {\n  for (void 0 === b && U(\"ptr should not be undefined\"); a.A;) {\n    b = a.na(b), a = a.A;\n  }\n  return b;\n}\nvar Bc = {};\nfunction Cc(a) {\n  a = Dc(a);\n  var b = V(a);\n  Ec(a);\n  return b;\n}\nfunction Fc(a, b) {\n  var c = Bc[a];\n  void 0 === c && U(b + \" has unknown type \" + Cc(a));\n  return c;\n}\nfunction Gc() {\n}\nvar Hc = !1;\nfunction Ic(a) {\n  --a.count.value;\n  0 === a.count.value && (a.G ? a.L.W(a.G) : a.u.i.W(a.o));\n}\nfunction Jc(a, b, c) {\n  if (b === c) {\n    return a;\n  }\n  if (void 0 === c.A) {\n    return null;\n  }\n  a = Jc(a, b, c.A);\n  return null === a ? null : c.Pb(a);\n}\nvar Kc = {};\nfunction Lc(a, b) {\n  b = Ac(a, b);\n  return zc[b];\n}\nvar Mc = void 0;\nfunction Nc(a) {\n  throw new Mc(a);\n}\nfunction Oc(a, b) {\n  b.u && b.o || Nc(\"makeClassHandle requires ptr and ptrType\");\n  !!b.L !== !!b.G && Nc(\"Both smartPtrType and smartPtr must be specified\");\n  b.count = {value:1};\n  return Pc(Object.create(a, {g:{value:b,},}));\n}\nfunction Pc(a) {\n  if (\"undefined\" === typeof FinalizationRegistry) {\n    return Pc = b => b, a;\n  }\n  Hc = new FinalizationRegistry(b => {\n    Ic(b.g);\n  });\n  Pc = b => {\n    var c = b.g;\n    c.G && Hc.register(b, {g:c}, b);\n    return b;\n  };\n  Gc = b => {\n    Hc.unregister(b);\n  };\n  return Pc(a);\n}\nvar Qc = {};\nfunction Rc(a) {\n  for (; a.length;) {\n    var b = a.pop();\n    a.pop()(b);\n  }\n}\nfunction Sc(a) {\n  return this.fromWireType(L[a >> 2]);\n}\nvar Tc = {}, Uc = {};\nfunction W(a, b, c) {\n  function d(n) {\n    n = c(n);\n    n.length !== a.length && Nc(\"Mismatched type converter count\");\n    for (var p = 0; p < a.length; ++p) {\n      Vc(a[p], n[p]);\n    }\n  }\n  a.forEach(function(n) {\n    Uc[n] = b;\n  });\n  var e = Array(b.length), f = [], g = 0;\n  b.forEach((n, p) => {\n    Bc.hasOwnProperty(n) ? e[p] = Bc[n] : (f.push(n), Tc.hasOwnProperty(n) || (Tc[n] = []), Tc[n].push(() => {\n      e[p] = Bc[n];\n      ++g;\n      g === f.length && d(e);\n    }));\n  });\n  0 === f.length && d(e);\n}\nfunction Wc(a) {\n  switch(a) {\n    case 1:\n      return 0;\n    case 2:\n      return 1;\n    case 4:\n      return 2;\n    case 8:\n      return 3;\n    default:\n      throw new TypeError(`Unknown type size: ${a}`);\n  }\n}\nfunction Xc(a, b, c = {}) {\n  var d = b.name;\n  a || U(`type \"${d}\" must have a positive integer typeid pointer`);\n  if (Bc.hasOwnProperty(a)) {\n    if (c.$b) {\n      return;\n    }\n    U(`Cannot register type '${d}' twice`);\n  }\n  Bc[a] = b;\n  delete Uc[a];\n  Tc.hasOwnProperty(a) && (b = Tc[a], delete Tc[a], b.forEach(e => e()));\n}\nfunction Vc(a, b, c = {}) {\n  if (!(\"argPackAdvance\" in b)) {\n    throw new TypeError(\"registerType registeredInstance requires argPackAdvance\");\n  }\n  Xc(a, b, c);\n}\nfunction Yc(a) {\n  U(a.g.u.i.name + \" instance already deleted\");\n}\nfunction Zc() {\n}\nfunction $c(a, b, c) {\n  if (void 0 === a[b].B) {\n    var d = a[b];\n    a[b] = function() {\n      a[b].B.hasOwnProperty(arguments.length) || U(`Function '${c}' called with an invalid number of arguments (${arguments.length}) - expects one of (${a[b].B})!`);\n      return a[b].B[arguments.length].apply(this, arguments);\n    };\n    a[b].B = [];\n    a[b].B[d.ea] = d;\n  }\n}\nfunction ad(a, b, c) {\n  m.hasOwnProperty(a) ? ((void 0 === c || void 0 !== m[a].B && void 0 !== m[a].B[c]) && U(`Cannot register public name '${a}' twice`), $c(m, a, a), m.hasOwnProperty(c) && U(`Cannot register multiple overloads of a function with the same number of arguments (${c})!`), m[a].B[c] = b) : (m[a] = b, void 0 !== c && (m[a].Pc = c));\n}\nfunction bd(a, b, c, d, e, f, g, n) {\n  this.name = a;\n  this.constructor = b;\n  this.N = c;\n  this.W = d;\n  this.A = e;\n  this.Ub = f;\n  this.na = g;\n  this.Pb = n;\n  this.rb = [];\n}\nfunction cd(a, b, c) {\n  for (; b !== c;) {\n    b.na || U(`Expected null or instance of ${c.name}, got an instance of ${b.name}`), a = b.na(a), b = b.A;\n  }\n  return a;\n}\nfunction dd(a, b) {\n  if (null === b) {\n    return this.Na && U(`null is not a valid ${this.name}`), 0;\n  }\n  b.g || U(`Cannot pass \"${ed(b)}\" as a ${this.name}`);\n  b.g.o || U(`Cannot pass deleted object as a pointer of type ${this.name}`);\n  return cd(b.g.o, b.g.u.i, this.i);\n}\nfunction fd(a, b) {\n  if (null === b) {\n    this.Na && U(`null is not a valid ${this.name}`);\n    if (this.ua) {\n      var c = this.Pa();\n      null !== a && a.push(this.W, c);\n      return c;\n    }\n    return 0;\n  }\n  b.g || U(`Cannot pass \"${ed(b)}\" as a ${this.name}`);\n  b.g.o || U(`Cannot pass deleted object as a pointer of type ${this.name}`);\n  !this.ta && b.g.u.ta && U(`Cannot convert argument of type ${b.g.L ? b.g.L.name : b.g.u.name} to parameter type ${this.name}`);\n  c = cd(b.g.o, b.g.u.i, this.i);\n  if (this.ua) {\n    switch(void 0 === b.g.G && U(\"Passing raw pointer to smart pointer is illegal\"), this.tc) {\n      case 0:\n        b.g.L === this ? c = b.g.G : U(`Cannot convert argument of type ${b.g.L ? b.g.L.name : b.g.u.name} to parameter type ${this.name}`);\n        break;\n      case 1:\n        c = b.g.G;\n        break;\n      case 2:\n        if (b.g.L === this) {\n          c = b.g.G;\n        } else {\n          var d = b.clone();\n          c = this.oc(c, sc(function() {\n            d[\"delete\"]();\n          }));\n          null !== a && a.push(this.W, c);\n        }\n        break;\n      default:\n        U(\"Unsupporting sharing policy\");\n    }\n  }\n  return c;\n}\nfunction gd(a, b) {\n  if (null === b) {\n    return this.Na && U(`null is not a valid ${this.name}`), 0;\n  }\n  b.g || U(`Cannot pass \"${ed(b)}\" as a ${this.name}`);\n  b.g.o || U(`Cannot pass deleted object as a pointer of type ${this.name}`);\n  b.g.u.ta && U(`Cannot convert argument of type ${b.g.u.name} to parameter type ${this.name}`);\n  return cd(b.g.o, b.g.u.i, this.i);\n}\nfunction hd(a, b, c, d) {\n  this.name = a;\n  this.i = b;\n  this.Na = c;\n  this.ta = d;\n  this.ua = !1;\n  this.W = this.oc = this.Pa = this.sb = this.tc = this.nc = void 0;\n  void 0 !== b.A ? this.toWireType = fd : (this.toWireType = d ? dd : gd, this.K = null);\n}\nfunction jd(a, b, c) {\n  m.hasOwnProperty(a) || Nc(\"Replacing nonexistant public symbol\");\n  void 0 !== m[a].B && void 0 !== c ? m[a].B[c] = b : (m[a] = b, m[a].ea = c);\n}\nvar kd = [], ld = a => {\n  var b = kd[a];\n  b || (a >= kd.length && (kd.length = a + 1), kd[a] = b = Ja.get(a));\n  return b;\n}, md = (a, b) => {\n  var c = [];\n  return function() {\n    c.length = 0;\n    Object.assign(c, arguments);\n    if (a.includes(\"j\")) {\n      var d = m[\"dynCall_\" + a];\n      d = c && c.length ? d.apply(null, [b].concat(c)) : d.call(null, b);\n    } else {\n      d = ld(b).apply(null, c);\n    }\n    return d;\n  };\n};\nfunction Y(a, b) {\n  a = V(a);\n  var c = a.includes(\"j\") ? md(a, b) : ld(b);\n  \"function\" != typeof c && U(`unknown function pointer with signature ${a}: ${b}`);\n  return c;\n}\nvar nd = void 0;\nfunction od(a, b) {\n  function c(f) {\n    e[f] || Bc[f] || (Uc[f] ? Uc[f].forEach(c) : (d.push(f), e[f] = !0));\n  }\n  var d = [], e = {};\n  b.forEach(c);\n  throw new nd(`${a}: ` + d.map(Cc).join([\", \"]));\n}\nfunction pd(a, b, c, d, e) {\n  var f = b.length;\n  2 > f && U(\"argTypes array size mismatch! Must at least get return value and 'this' types!\");\n  var g = null !== b[1] && null !== c, n = !1;\n  for (c = 1; c < b.length; ++c) {\n    if (null !== b[c] && void 0 === b[c].K) {\n      n = !0;\n      break;\n    }\n  }\n  var p = \"void\" !== b[0].name, l = f - 2, u = Array(l), v = [], y = [];\n  return function() {\n    arguments.length !== l && U(`function ${a} called with ${arguments.length} arguments, expected ${l} args!`);\n    y.length = 0;\n    v.length = g ? 2 : 1;\n    v[0] = e;\n    if (g) {\n      var k = b[1].toWireType(y, this);\n      v[1] = k;\n    }\n    for (var t = 0; t < l; ++t) {\n      u[t] = b[t + 2].toWireType(y, arguments[t]), v.push(u[t]);\n    }\n    t = d.apply(null, v);\n    if (n) {\n      Rc(y);\n    } else {\n      for (var r = g ? 1 : 2; r < b.length; r++) {\n        var A = 1 === r ? k : u[r - 2];\n        null !== b[r].K && b[r].K(A);\n      }\n    }\n    k = p ? b[0].fromWireType(t) : void 0;\n    return k;\n  };\n}\nfunction sd(a, b) {\n  for (var c = [], d = 0; d < a; d++) {\n    c.push(N[b + 4 * d >> 2]);\n  }\n  return c;\n}\nfunction td(a, b, c) {\n  a instanceof Object || U(`${c} with invalid \"this\": ${a}`);\n  a instanceof b.i.constructor || U(`${c} incompatible with \"this\" of type ${a.constructor.name}`);\n  a.g.o || U(`cannot call emscripten binding method ${c} on deleted object`);\n  return cd(a.g.o, a.g.u.i, b.i);\n}\nfunction ud(a) {\n  a >= S.h && 0 === --S.get(a).ub && S.Zb(a);\n}\nfunction vd(a, b, c) {\n  switch(b) {\n    case 0:\n      return function(d) {\n        return this.fromWireType((c ? C : E)[d]);\n      };\n    case 1:\n      return function(d) {\n        return this.fromWireType((c ? Ca : Da)[d >> 1]);\n      };\n    case 2:\n      return function(d) {\n        return this.fromWireType((c ? L : N)[d >> 2]);\n      };\n    default:\n      throw new TypeError(\"Unknown integer type: \" + a);\n  }\n}\nfunction ed(a) {\n  if (null === a) {\n    return \"null\";\n  }\n  var b = typeof a;\n  return \"object\" === b || \"array\" === b || \"function\" === b ? a.toString() : \"\" + a;\n}\nfunction wd(a, b) {\n  switch(b) {\n    case 2:\n      return function(c) {\n        return this.fromWireType(Ea[c >> 2]);\n      };\n    case 3:\n      return function(c) {\n        return this.fromWireType(Fa[c >> 3]);\n      };\n    default:\n      throw new TypeError(\"Unknown float type: \" + a);\n  }\n}\nfunction xd(a, b, c) {\n  switch(b) {\n    case 0:\n      return c ? function(d) {\n        return C[d];\n      } : function(d) {\n        return E[d];\n      };\n    case 1:\n      return c ? function(d) {\n        return Ca[d >> 1];\n      } : function(d) {\n        return Da[d >> 1];\n      };\n    case 2:\n      return c ? function(d) {\n        return L[d >> 2];\n      } : function(d) {\n        return N[d >> 2];\n      };\n    default:\n      throw new TypeError(\"Unknown integer type: \" + a);\n  }\n}\nvar yd = \"undefined\" != typeof TextDecoder ? new TextDecoder(\"utf-16le\") : void 0, zd = (a, b) => {\n  var c = a >> 1;\n  for (var d = c + b / 2; !(c >= d) && Da[c];) {\n    ++c;\n  }\n  c <<= 1;\n  if (32 < c - a && yd) {\n    return yd.decode(E.subarray(a, c));\n  }\n  c = \"\";\n  for (d = 0; !(d >= b / 2); ++d) {\n    var e = Ca[a + 2 * d >> 1];\n    if (0 == e) {\n      break;\n    }\n    c += String.fromCharCode(e);\n  }\n  return c;\n}, Ad = (a, b, c) => {\n  void 0 === c && (c = 2147483647);\n  if (2 > c) {\n    return 0;\n  }\n  c -= 2;\n  var d = b;\n  c = c < 2 * a.length ? c / 2 : a.length;\n  for (var e = 0; e < c; ++e) {\n    Ca[b >> 1] = a.charCodeAt(e), b += 2;\n  }\n  Ca[b >> 1] = 0;\n  return b - d;\n}, Bd = a => 2 * a.length, Cd = (a, b) => {\n  for (var c = 0, d = \"\"; !(c >= b / 4);) {\n    var e = L[a + 4 * c >> 2];\n    if (0 == e) {\n      break;\n    }\n    ++c;\n    65536 <= e ? (e -= 65536, d += String.fromCharCode(55296 | e >> 10, 56320 | e & 1023)) : d += String.fromCharCode(e);\n  }\n  return d;\n}, Dd = (a, b, c) => {\n  void 0 === c && (c = 2147483647);\n  if (4 > c) {\n    return 0;\n  }\n  var d = b;\n  c = d + c - 4;\n  for (var e = 0; e < a.length; ++e) {\n    var f = a.charCodeAt(e);\n    if (55296 <= f && 57343 >= f) {\n      var g = a.charCodeAt(++e);\n      f = 65536 + ((f & 1023) << 10) | g & 1023;\n    }\n    L[b >> 2] = f;\n    b += 4;\n    if (b + 4 > c) {\n      break;\n    }\n  }\n  L[b >> 2] = 0;\n  return b - d;\n}, Ed = a => {\n  for (var b = 0, c = 0; c < a.length; ++c) {\n    var d = a.charCodeAt(c);\n    55296 <= d && 57343 >= d && ++c;\n    b += 4;\n  }\n  return b;\n}, Fd = {};\nfunction Gd(a) {\n  var b = Fd[a];\n  return void 0 === b ? V(a) : b;\n}\nvar Hd = [];\nfunction Id(a) {\n  var b = Hd.length;\n  Hd.push(a);\n  return b;\n}\nfunction Jd(a, b) {\n  for (var c = Array(a), d = 0; d < a; ++d) {\n    c[d] = Fc(N[b + 4 * d >> 2], \"parameter \" + d);\n  }\n  return c;\n}\nvar Kd = [], Ld = [], Md = {}, Od = () => {\n  if (!Nd) {\n    var a = {USER:\"web_user\", LOGNAME:\"web_user\", PATH:\"/\", PWD:\"/\", HOME:\"/home/web_user\", LANG:(\"object\" == typeof navigator && navigator.languages && navigator.languages[0] || \"C\").replace(\"-\", \"_\") + \".UTF-8\", _:ma || \"./this.program\"}, b;\n    for (b in Md) {\n      void 0 === Md[b] ? delete a[b] : a[b] = Md[b];\n    }\n    var c = [];\n    for (b in a) {\n      c.push(`${b}=${a[b]}`);\n    }\n    Nd = c;\n  }\n  return Nd;\n}, Nd, Pd = a => 0 === a % 4 && (0 !== a % 100 || 0 === a % 400), Qd = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], Rd = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], Sd = (a, b, c, d) => {\n  function e(k, t, r) {\n    for (k = \"number\" == typeof k ? k.toString() : k || \"\"; k.length < t;) {\n      k = r[0] + k;\n    }\n    return k;\n  }\n  function f(k, t) {\n    return e(k, t, \"0\");\n  }\n  function g(k, t) {\n    function r(D) {\n      return 0 > D ? -1 : 0 < D ? 1 : 0;\n    }\n    var A;\n    0 === (A = r(k.getFullYear() - t.getFullYear())) && 0 === (A = r(k.getMonth() - t.getMonth())) && (A = r(k.getDate() - t.getDate()));\n    return A;\n  }\n  function n(k) {\n    switch(k.getDay()) {\n      case 0:\n        return new Date(k.getFullYear() - 1, 11, 29);\n      case 1:\n        return k;\n      case 2:\n        return new Date(k.getFullYear(), 0, 3);\n      case 3:\n        return new Date(k.getFullYear(), 0, 2);\n      case 4:\n        return new Date(k.getFullYear(), 0, 1);\n      case 5:\n        return new Date(k.getFullYear() - 1, 11, 31);\n      case 6:\n        return new Date(k.getFullYear() - 1, 11, 30);\n    }\n  }\n  function p(k) {\n    var t = k.ca;\n    for (k = new Date((new Date(k.da + 1900, 0, 1)).getTime()); 0 < t;) {\n      var r = k.getMonth(), A = (Pd(k.getFullYear()) ? Qd : Rd)[r];\n      if (t > A - k.getDate()) {\n        t -= A - k.getDate() + 1, k.setDate(1), 11 > r ? k.setMonth(r + 1) : (k.setMonth(0), k.setFullYear(k.getFullYear() + 1));\n      } else {\n        k.setDate(k.getDate() + t);\n        break;\n      }\n    }\n    r = new Date(k.getFullYear() + 1, 0, 4);\n    t = n(new Date(k.getFullYear(), 0, 4));\n    r = n(r);\n    return 0 >= g(t, k) ? 0 >= g(r, k) ? k.getFullYear() + 1 : k.getFullYear() : k.getFullYear() - 1;\n  }\n  var l = L[d + 40 >> 2];\n  d = {wc:L[d >> 2], vc:L[d + 4 >> 2], Fa:L[d + 8 >> 2], Sa:L[d + 12 >> 2], Ga:L[d + 16 >> 2], da:L[d + 20 >> 2], R:L[d + 24 >> 2], ca:L[d + 28 >> 2], Rc:L[d + 32 >> 2], uc:L[d + 36 >> 2], xc:l ? l ? mb(E, l) : \"\" : \"\"};\n  c = c ? mb(E, c) : \"\";\n  l = {\"%c\":\"%a %b %d %H:%M:%S %Y\", \"%D\":\"%m/%d/%y\", \"%F\":\"%Y-%m-%d\", \"%h\":\"%b\", \"%r\":\"%I:%M:%S %p\", \"%R\":\"%H:%M\", \"%T\":\"%H:%M:%S\", \"%x\":\"%m/%d/%y\", \"%X\":\"%H:%M:%S\", \"%Ec\":\"%c\", \"%EC\":\"%C\", \"%Ex\":\"%m/%d/%y\", \"%EX\":\"%H:%M:%S\", \"%Ey\":\"%y\", \"%EY\":\"%Y\", \"%Od\":\"%d\", \"%Oe\":\"%e\", \"%OH\":\"%H\", \"%OI\":\"%I\", \"%Om\":\"%m\", \"%OM\":\"%M\", \"%OS\":\"%S\", \"%Ou\":\"%u\", \"%OU\":\"%U\", \"%OV\":\"%V\", \"%Ow\":\"%w\", \"%OW\":\"%W\", \"%Oy\":\"%y\",};\n  for (var u in l) {\n    c = c.replace(new RegExp(u, \"g\"), l[u]);\n  }\n  var v = \"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"), y = \"January February March April May June July August September October November December\".split(\" \");\n  l = {\"%a\":k => v[k.R].substring(0, 3), \"%A\":k => v[k.R], \"%b\":k => y[k.Ga].substring(0, 3), \"%B\":k => y[k.Ga], \"%C\":k => f((k.da + 1900) / 100 | 0, 2), \"%d\":k => f(k.Sa, 2), \"%e\":k => e(k.Sa, 2, \" \"), \"%g\":k => p(k).toString().substring(2), \"%G\":k => p(k), \"%H\":k => f(k.Fa, 2), \"%I\":k => {\n    k = k.Fa;\n    0 == k ? k = 12 : 12 < k && (k -= 12);\n    return f(k, 2);\n  }, \"%j\":k => {\n    for (var t = 0, r = 0; r <= k.Ga - 1; t += (Pd(k.da + 1900) ? Qd : Rd)[r++]) {\n    }\n    return f(k.Sa + t, 3);\n  }, \"%m\":k => f(k.Ga + 1, 2), \"%M\":k => f(k.vc, 2), \"%n\":() => \"\\n\", \"%p\":k => 0 <= k.Fa && 12 > k.Fa ? \"AM\" : \"PM\", \"%S\":k => f(k.wc, 2), \"%t\":() => \"\\t\", \"%u\":k => k.R || 7, \"%U\":k => f(Math.floor((k.ca + 7 - k.R) / 7), 2), \"%V\":k => {\n    var t = Math.floor((k.ca + 7 - (k.R + 6) % 7) / 7);\n    2 >= (k.R + 371 - k.ca - 2) % 7 && t++;\n    if (t) {\n      53 == t && (r = (k.R + 371 - k.ca) % 7, 4 == r || 3 == r && Pd(k.da) || (t = 1));\n    } else {\n      t = 52;\n      var r = (k.R + 7 - k.ca - 1) % 7;\n      (4 == r || 5 == r && Pd(k.da % 400 - 1)) && t++;\n    }\n    return f(t, 2);\n  }, \"%w\":k => k.R, \"%W\":k => f(Math.floor((k.ca + 7 - (k.R + 6) % 7) / 7), 2), \"%y\":k => (k.da + 1900).toString().substring(2), \"%Y\":k => k.da + 1900, \"%z\":k => {\n    k = k.uc;\n    var t = 0 <= k;\n    k = Math.abs(k) / 60;\n    return (t ? \"+\" : \"-\") + String(\"0000\" + (k / 60 * 100 + k % 60)).slice(-4);\n  }, \"%Z\":k => k.xc, \"%%\":() => \"%\"};\n  c = c.replace(/%%/g, \"\\x00\\x00\");\n  for (u in l) {\n    c.includes(u) && (c = c.replace(new RegExp(u, \"g\"), l[u](d)));\n  }\n  c = c.replace(/\\0\\0/g, \"%\");\n  u = qb(c, !1);\n  if (u.length > b) {\n    return 0;\n  }\n  C.set(u, a);\n  return u.length - 1;\n};\nfunction Ob(a, b, c, d) {\n  a || (a = this);\n  this.parent = a;\n  this.U = a.U;\n  this.wa = null;\n  this.id = Gb++;\n  this.name = b;\n  this.mode = c;\n  this.l = {};\n  this.m = {};\n  this.za = d;\n}\nObject.defineProperties(Ob.prototype, {read:{get:function() {\n  return 365 === (this.mode & 365);\n}, set:function(a) {\n  a ? this.mode |= 365 : this.mode &= -366;\n}}, write:{get:function() {\n  return 146 === (this.mode & 146);\n}, set:function(a) {\n  a ? this.mode |= 146 : this.mode &= -147;\n}}});\ngc();\nHb = Array(4096);\nVb(P, \"/\");\nWb(\"/tmp\", 16895, 0);\nWb(\"/home\", 16895, 0);\nWb(\"/home/web_user\", 16895, 0);\n(() => {\n  Wb(\"/dev\", 16895, 0);\n  tb(259, {read:() => 0, write:(d, e, f, g) => g,});\n  Xb(\"/dev/null\", 259);\n  sb(1280, vb);\n  sb(1536, wb);\n  Xb(\"/dev/tty\", 1280);\n  Xb(\"/dev/tty1\", 1536);\n  var a = new Uint8Array(1024), b = 0, c = () => {\n    0 === b && (b = jb(a).byteLength);\n    return a[--b];\n  };\n  jc(\"random\", c);\n  jc(\"urandom\", c);\n  Wb(\"/dev/shm\", 16895, 0);\n  Wb(\"/dev/shm/tmp\", 16895, 0);\n})();\n(() => {\n  Wb(\"/proc\", 16895, 0);\n  var a = Wb(\"/proc/self\", 16895, 0);\n  Wb(\"/proc/self/fd\", 16895, 0);\n  Vb({U:() => {\n    var b = zb(a, \"fd\", 16895, 73);\n    b.l = {ka:(c, d) => {\n      var e = Sb(+d);\n      c = {parent:null, U:{nb:\"fake\"}, l:{ma:() => e.path},};\n      return c.parent = c;\n    }};\n    return b;\n  }}, \"/proc/self/fd\");\n})();\nObject.assign(pc.prototype, {get(a) {\n  return this.M[a];\n}, has(a) {\n  return void 0 !== this.M[a];\n}, pa(a) {\n  var b = this.ib.pop() || this.M.length;\n  this.M[b] = a;\n  return b;\n}, Zb(a) {\n  this.M[a] = void 0;\n  this.ib.push(a);\n}});\nqc = m.BindingError = class extends Error {\n  constructor(a) {\n    super(a);\n    this.name = \"BindingError\";\n  }\n};\nS.M.push({value:void 0}, {value:null}, {value:!0}, {value:!1},);\nS.h = S.M.length;\nm.count_emval_handles = function() {\n  for (var a = 0, b = S.h; b < S.M.length; ++b) {\n    void 0 !== S.M[b] && ++a;\n  }\n  return a;\n};\nuc = m.PureVirtualError = tc(\"PureVirtualError\");\nfor (var Td = Array(256), Ud = 0; 256 > Ud; ++Ud) {\n  Td[Ud] = String.fromCharCode(Ud);\n}\nvc = Td;\nm.getInheritedInstanceCount = function() {\n  return Object.keys(zc).length;\n};\nm.getLiveInheritedInstances = function() {\n  var a = [], b;\n  for (b in zc) {\n    zc.hasOwnProperty(b) && a.push(zc[b]);\n  }\n  return a;\n};\nm.flushPendingDeletes = xc;\nm.setDelayFunction = function(a) {\n  yc = a;\n  wc.length && yc && yc(xc);\n};\nMc = m.InternalError = class extends Error {\n  constructor(a) {\n    super(a);\n    this.name = \"InternalError\";\n  }\n};\nZc.prototype.isAliasOf = function(a) {\n  if (!(this instanceof Zc && a instanceof Zc)) {\n    return !1;\n  }\n  var b = this.g.u.i, c = this.g.o, d = a.g.u.i;\n  for (a = a.g.o; b.A;) {\n    c = b.na(c), b = b.A;\n  }\n  for (; d.A;) {\n    a = d.na(a), d = d.A;\n  }\n  return b === d && c === a;\n};\nZc.prototype.clone = function() {\n  this.g.o || Yc(this);\n  if (this.g.ia) {\n    return this.g.count.value += 1, this;\n  }\n  var a = Pc, b = Object, c = b.create, d = Object.getPrototypeOf(this), e = this.g;\n  a = a(c.call(b, d, {g:{value:{count:e.count, fa:e.fa, ia:e.ia, o:e.o, u:e.u, G:e.G, L:e.L,},}}));\n  a.g.count.value += 1;\n  a.g.fa = !1;\n  return a;\n};\nZc.prototype[\"delete\"] = function() {\n  this.g.o || Yc(this);\n  this.g.fa && !this.g.ia && U(\"Object already scheduled for deletion\");\n  Gc(this);\n  Ic(this.g);\n  this.g.ia || (this.g.G = void 0, this.g.o = void 0);\n};\nZc.prototype.isDeleted = function() {\n  return !this.g.o;\n};\nZc.prototype.deleteLater = function() {\n  this.g.o || Yc(this);\n  this.g.fa && !this.g.ia && U(\"Object already scheduled for deletion\");\n  wc.push(this);\n  1 === wc.length && yc && yc(xc);\n  this.g.fa = !0;\n  return this;\n};\nhd.prototype.Vb = function(a) {\n  this.sb && (a = this.sb(a));\n  return a;\n};\nhd.prototype.bb = function(a) {\n  this.W && this.W(a);\n};\nhd.prototype.argPackAdvance = 8;\nhd.prototype.readValueFromPointer = Sc;\nhd.prototype.deleteObject = function(a) {\n  if (null !== a) {\n    a[\"delete\"]();\n  }\n};\nhd.prototype.fromWireType = function(a) {\n  function b() {\n    return this.ua ? Oc(this.i.N, {u:this.nc, o:c, L:this, G:a,}) : Oc(this.i.N, {u:this, o:a,});\n  }\n  var c = this.Vb(a);\n  if (!c) {\n    return this.bb(a), null;\n  }\n  var d = Lc(this.i, c);\n  if (void 0 !== d) {\n    if (0 === d.g.count.value) {\n      return d.g.o = c, d.g.G = a, d.clone();\n    }\n    d = d.clone();\n    this.bb(a);\n    return d;\n  }\n  d = this.i.Ub(c);\n  d = Kc[d];\n  if (!d) {\n    return b.call(this);\n  }\n  d = this.ta ? d.Kb : d.pointerType;\n  var e = Jc(c, this.i, d.i);\n  return null === e ? b.call(this) : this.ua ? Oc(d.i.N, {u:d, o:e, L:this, G:a,}) : Oc(d.i.N, {u:d, o:e,});\n};\nnd = m.UnboundTypeError = tc(\"UnboundTypeError\");\nvar Xd = {__syscall_fcntl64:function(a, b, c) {\n  lc = c;\n  try {\n    var d = Sb(a);\n    switch(b) {\n      case 0:\n        var e = mc();\n        return 0 > e ? -28 : Ub(d, e).X;\n      case 1:\n      case 2:\n        return 0;\n      case 3:\n        return d.flags;\n      case 4:\n        return e = mc(), d.flags |= e, 0;\n      case 5:\n        return e = mc(), Ca[e + 0 >> 1] = 2, 0;\n      case 6:\n      case 7:\n        return 0;\n      case 16:\n      case 8:\n        return -28;\n      case 9:\n        return L[Vd() >> 2] = 28, -1;\n      default:\n        return -28;\n    }\n  } catch (f) {\n    if (\"undefined\" == typeof kc || \"ErrnoError\" !== f.name) {\n      throw f;\n    }\n    return -f.aa;\n  }\n}, __syscall_ioctl:function(a, b, c) {\n  lc = c;\n  try {\n    var d = Sb(a);\n    switch(b) {\n      case 21509:\n        return d.s ? 0 : -59;\n      case 21505:\n        if (!d.s) {\n          return -59;\n        }\n        if (d.s.V.bc) {\n          b = [3, 28, 127, 21, 4, 0, 1, 0, 17, 19, 26, 0, 18, 15, 23, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,];\n          var e = mc();\n          L[e >> 2] = 25856;\n          L[e + 4 >> 2] = 5;\n          L[e + 8 >> 2] = 191;\n          L[e + 12 >> 2] = 35387;\n          for (var f = 0; 32 > f; f++) {\n            C[e + f + 17 >> 0] = b[f] || 0;\n          }\n        }\n        return 0;\n      case 21510:\n      case 21511:\n      case 21512:\n        return d.s ? 0 : -59;\n      case 21506:\n      case 21507:\n      case 21508:\n        if (!d.s) {\n          return -59;\n        }\n        if (d.s.V.cc) {\n          for (e = mc(), b = [], f = 0; 32 > f; f++) {\n            b.push(C[e + f + 17 >> 0]);\n          }\n        }\n        return 0;\n      case 21519:\n        if (!d.s) {\n          return -59;\n        }\n        e = mc();\n        return L[e >> 2] = 0;\n      case 21520:\n        return d.s ? -28 : -59;\n      case 21531:\n        e = mc();\n        if (!d.m.ac) {\n          throw new O(59);\n        }\n        return d.m.ac(d, b, e);\n      case 21523:\n        if (!d.s) {\n          return -59;\n        }\n        d.s.V.dc && (f = [24, 80], e = mc(), Ca[e >> 1] = f[0], Ca[e + 2 >> 1] = f[1]);\n        return 0;\n      case 21524:\n        return d.s ? 0 : -59;\n      case 21515:\n        return d.s ? 0 : -59;\n      default:\n        return -28;\n    }\n  } catch (g) {\n    if (\"undefined\" == typeof kc || \"ErrnoError\" !== g.name) {\n      throw g;\n    }\n    return -g.aa;\n  }\n}, __syscall_openat:function(a, b, c, d) {\n  lc = d;\n  try {\n    b = b ? mb(E, b) : \"\";\n    var e = b;\n    if (\"/\" === e.charAt(0)) {\n      b = e;\n    } else {\n      var f = -100 === a ? \"/\" : Sb(a).path;\n      if (0 == e.length) {\n        throw new O(44);\n      }\n      b = fb(f + \"/\" + e);\n    }\n    var g = d ? mc() : 0;\n    return ec(b, c, g).X;\n  } catch (n) {\n    if (\"undefined\" == typeof kc || \"ErrnoError\" !== n.name) {\n      throw n;\n    }\n    return -n.aa;\n  }\n}, _embind_create_inheriting_constructor:function(a, b, c) {\n  a = V(a);\n  b = Fc(b, \"wrapper\");\n  c = rc(c);\n  var d = [].slice, e = b.i, f = e.N, g = e.A.N, n = e.A.constructor;\n  a = oc(a, function() {\n    e.A.rb.forEach(function(l) {\n      if (this[l] === g[l]) {\n        throw new uc(`Pure virtual function ${l} must be implemented in JavaScript`);\n      }\n    }.bind(this));\n    Object.defineProperty(this, \"__parent\", {value:f});\n    this.__construct.apply(this, d.call(arguments));\n  });\n  f.__construct = function() {\n    this === f && U(\"Pass correct 'this' to __construct\");\n    var l = n.implement.apply(void 0, [this].concat(d.call(arguments)));\n    Gc(l);\n    var u = l.g;\n    l.notifyOnDestruction();\n    u.ia = !0;\n    Object.defineProperties(this, {g:{value:u}});\n    Pc(this);\n    l = u.o;\n    l = Ac(e, l);\n    zc.hasOwnProperty(l) ? U(`Tried to register registered instance: ${l}`) : zc[l] = this;\n  };\n  f.__destruct = function() {\n    this === f && U(\"Pass correct 'this' to __destruct\");\n    Gc(this);\n    var l = this.g.o;\n    l = Ac(e, l);\n    zc.hasOwnProperty(l) ? delete zc[l] : U(`Tried to unregister unregistered instance: ${l}`);\n  };\n  a.prototype = Object.create(f);\n  for (var p in c) {\n    a.prototype[p] = c[p];\n  }\n  return sc(a);\n}, _embind_finalize_value_object:function(a) {\n  var b = Qc[a];\n  delete Qc[a];\n  var c = b.Pa, d = b.W, e = b.fb, f = e.map(g => g.Yb).concat(e.map(g => g.rc));\n  W([a], f, g => {\n    var n = {};\n    e.forEach((p, l) => {\n      var u = g[l], v = p.Wb, y = p.Xb, k = g[l + e.length], t = p.qc, r = p.sc;\n      n[p.Sb] = {read:A => u.fromWireType(v(y, A)), write:(A, D) => {\n        var w = [];\n        t(r, A, k.toWireType(w, D));\n        Rc(w);\n      }};\n    });\n    return [{name:b.name, fromWireType:function(p) {\n      var l = {}, u;\n      for (u in n) {\n        l[u] = n[u].read(p);\n      }\n      d(p);\n      return l;\n    }, toWireType:function(p, l) {\n      for (var u in n) {\n        if (!(u in l)) {\n          throw new TypeError(`Missing field: \"${u}\"`);\n        }\n      }\n      var v = c();\n      for (u in n) {\n        n[u].write(v, l[u]);\n      }\n      null !== p && p.push(d, v);\n      return v;\n    }, argPackAdvance:8, readValueFromPointer:Sc, K:d,}];\n  });\n}, _embind_register_bigint:function() {\n}, _embind_register_bool:function(a, b, c, d, e) {\n  var f = Wc(c);\n  b = V(b);\n  Vc(a, {name:b, fromWireType:function(g) {\n    return !!g;\n  }, toWireType:function(g, n) {\n    return n ? d : e;\n  }, argPackAdvance:8, readValueFromPointer:function(g) {\n    if (1 === c) {\n      var n = C;\n    } else if (2 === c) {\n      n = Ca;\n    } else if (4 === c) {\n      n = L;\n    } else {\n      throw new TypeError(\"Unknown boolean type size: \" + b);\n    }\n    return this.fromWireType(n[g >> f]);\n  }, K:null,});\n}, _embind_register_class:function(a, b, c, d, e, f, g, n, p, l, u, v, y) {\n  u = V(u);\n  f = Y(e, f);\n  n && (n = Y(g, n));\n  l && (l = Y(p, l));\n  y = Y(v, y);\n  var k = nc(u);\n  ad(k, function() {\n    od(`Cannot construct ${u} due to unbound types`, [d]);\n  });\n  W([a, b, c], d ? [d] : [], function(t) {\n    t = t[0];\n    if (d) {\n      var r = t.i;\n      var A = r.N;\n    } else {\n      A = Zc.prototype;\n    }\n    t = oc(k, function() {\n      if (Object.getPrototypeOf(this) !== D) {\n        throw new qc(\"Use 'new' to construct \" + u);\n      }\n      if (void 0 === w.$) {\n        throw new qc(u + \" has no accessible constructor\");\n      }\n      var T = w.$[arguments.length];\n      if (void 0 === T) {\n        throw new qc(`Tried to invoke ctor of ${u} with invalid number of parameters (${arguments.length}) - expected (${Object.keys(w.$).toString()}) parameters instead!`);\n      }\n      return T.apply(this, arguments);\n    });\n    var D = Object.create(A, {constructor:{value:t},});\n    t.prototype = D;\n    var w = new bd(u, t, D, y, r, f, n, l);\n    w.A && (void 0 === w.A.oa && (w.A.oa = []), w.A.oa.push(w));\n    r = new hd(u, w, !0, !1);\n    A = new hd(u + \"*\", w, !1, !1);\n    var M = new hd(u + \" const*\", w, !1, !0);\n    Kc[a] = {pointerType:A, Kb:M};\n    jd(k, t);\n    return [r, A, M];\n  });\n}, _embind_register_class_class_function:function(a, b, c, d, e, f, g) {\n  var n = sd(c, d);\n  b = V(b);\n  f = Y(e, f);\n  W([], [a], function(p) {\n    function l() {\n      od(`Cannot call ${u} due to unbound types`, n);\n    }\n    p = p[0];\n    var u = `${p.name}.${b}`;\n    b.startsWith(\"@@\") && (b = Symbol[b.substring(2)]);\n    var v = p.i.constructor;\n    void 0 === v[b] ? (l.ea = c - 1, v[b] = l) : ($c(v, b, u), v[b].B[c - 1] = l);\n    W([], n, function(y) {\n      y = pd(u, [y[0], null].concat(y.slice(1)), null, f, g);\n      void 0 === v[b].B ? (y.ea = c - 1, v[b] = y) : v[b].B[c - 1] = y;\n      if (p.i.oa) {\n        for (const k of p.i.oa) {\n          k.constructor.hasOwnProperty(b) || (k.constructor[b] = y);\n        }\n      }\n      return [];\n    });\n    return [];\n  });\n}, _embind_register_class_class_property:function(a, b, c, d, e, f, g, n) {\n  b = V(b);\n  f = Y(e, f);\n  W([], [a], function(p) {\n    p = p[0];\n    var l = `${p.name}.${b}`, u = {get() {\n      od(`Cannot access ${l} due to unbound types`, [c]);\n    }, enumerable:!0, configurable:!0};\n    u.set = n ? () => {\n      od(`Cannot access ${l} due to unbound types`, [c]);\n    } : () => {\n      U(`${l} is a read-only property`);\n    };\n    Object.defineProperty(p.i.constructor, b, u);\n    W([], [c], function(v) {\n      v = v[0];\n      var y = {get() {\n        return v.fromWireType(f(d));\n      }, enumerable:!0};\n      n && (n = Y(g, n), y.set = k => {\n        var t = [];\n        n(d, v.toWireType(t, k));\n        Rc(t);\n      });\n      Object.defineProperty(p.i.constructor, b, y);\n      return [];\n    });\n    return [];\n  });\n}, _embind_register_class_constructor:function(a, b, c, d, e, f) {\n  var g = sd(b, c);\n  e = Y(d, e);\n  W([], [a], function(n) {\n    n = n[0];\n    var p = `constructor ${n.name}`;\n    void 0 === n.i.$ && (n.i.$ = []);\n    if (void 0 !== n.i.$[b - 1]) {\n      throw new qc(`Cannot register multiple constructors with identical number of parameters (${b - 1}) for class '${n.name}'! Overload resolution is currently only performed using the parameter count, not actual type info!`);\n    }\n    n.i.$[b - 1] = () => {\n      od(`Cannot construct ${n.name} due to unbound types`, g);\n    };\n    W([], g, function(l) {\n      l.splice(1, 0, null);\n      n.i.$[b - 1] = pd(p, l, null, e, f);\n      return [];\n    });\n    return [];\n  });\n}, _embind_register_class_function:function(a, b, c, d, e, f, g, n) {\n  var p = sd(c, d);\n  b = V(b);\n  f = Y(e, f);\n  W([], [a], function(l) {\n    function u() {\n      od(`Cannot call ${v} due to unbound types`, p);\n    }\n    l = l[0];\n    var v = `${l.name}.${b}`;\n    b.startsWith(\"@@\") && (b = Symbol[b.substring(2)]);\n    n && l.i.rb.push(b);\n    var y = l.i.N, k = y[b];\n    void 0 === k || void 0 === k.B && k.className !== l.name && k.ea === c - 2 ? (u.ea = c - 2, u.className = l.name, y[b] = u) : ($c(y, b, v), y[b].B[c - 2] = u);\n    W([], p, function(t) {\n      t = pd(v, t, l, f, g);\n      void 0 === y[b].B ? (t.ea = c - 2, y[b] = t) : y[b].B[c - 2] = t;\n      return [];\n    });\n    return [];\n  });\n}, _embind_register_class_property:function(a, b, c, d, e, f, g, n, p, l) {\n  b = V(b);\n  e = Y(d, e);\n  W([], [a], function(u) {\n    u = u[0];\n    var v = `${u.name}.${b}`, y = {get() {\n      od(`Cannot access ${v} due to unbound types`, [c, g]);\n    }, enumerable:!0, configurable:!0};\n    y.set = p ? () => {\n      od(`Cannot access ${v} due to unbound types`, [c, g]);\n    } : () => {\n      U(v + \" is a read-only property\");\n    };\n    Object.defineProperty(u.i.N, b, y);\n    W([], p ? [c, g] : [c], function(k) {\n      var t = k[0], r = {get() {\n        var D = td(this, u, v + \" getter\");\n        return t.fromWireType(e(f, D));\n      }, enumerable:!0};\n      if (p) {\n        p = Y(n, p);\n        var A = k[1];\n        r.set = function(D) {\n          var w = td(this, u, v + \" setter\"), M = [];\n          p(l, w, A.toWireType(M, D));\n          Rc(M);\n        };\n      }\n      Object.defineProperty(u.i.N, b, r);\n      return [];\n    });\n    return [];\n  });\n}, _embind_register_emval:function(a, b) {\n  b = V(b);\n  Vc(a, {name:b, fromWireType:function(c) {\n    var d = rc(c);\n    ud(c);\n    return d;\n  }, toWireType:function(c, d) {\n    return sc(d);\n  }, argPackAdvance:8, readValueFromPointer:Sc, K:null,});\n}, _embind_register_enum:function(a, b, c, d) {\n  function e() {\n  }\n  c = Wc(c);\n  b = V(b);\n  e.values = {};\n  Vc(a, {name:b, constructor:e, fromWireType:function(f) {\n    return this.constructor.values[f];\n  }, toWireType:function(f, g) {\n    return g.value;\n  }, argPackAdvance:8, readValueFromPointer:vd(b, c, d), K:null,});\n  ad(b, e);\n}, _embind_register_enum_value:function(a, b, c) {\n  var d = Fc(a, \"enum\");\n  b = V(b);\n  a = d.constructor;\n  d = Object.create(d.constructor.prototype, {value:{value:c}, constructor:{value:oc(`${d.name}_${b}`, function() {\n  })},});\n  a.values[c] = d;\n  a[b] = d;\n}, _embind_register_float:function(a, b, c) {\n  c = Wc(c);\n  b = V(b);\n  Vc(a, {name:b, fromWireType:function(d) {\n    return d;\n  }, toWireType:function(d, e) {\n    return e;\n  }, argPackAdvance:8, readValueFromPointer:wd(b, c), K:null,});\n}, _embind_register_function:function(a, b, c, d, e, f) {\n  var g = sd(b, c);\n  a = V(a);\n  e = Y(d, e);\n  ad(a, function() {\n    od(`Cannot call ${a} due to unbound types`, g);\n  }, b - 1);\n  W([], g, function(n) {\n    jd(a, pd(a, [n[0], null].concat(n.slice(1)), null, e, f), b - 1);\n    return [];\n  });\n}, _embind_register_integer:function(a, b, c, d, e) {\n  b = V(b);\n  -1 === e && (e = 4294967295);\n  e = Wc(c);\n  var f = n => n;\n  if (0 === d) {\n    var g = 32 - 8 * c;\n    f = n => n << g >>> g;\n  }\n  c = b.includes(\"unsigned\") ? function(n, p) {\n    return p >>> 0;\n  } : function(n, p) {\n    return p;\n  };\n  Vc(a, {name:b, fromWireType:f, toWireType:c, argPackAdvance:8, readValueFromPointer:xd(b, e, 0 !== d), K:null,});\n}, _embind_register_memory_view:function(a, b, c) {\n  function d(f) {\n    f >>= 2;\n    var g = N;\n    return new e(g.buffer, g[f + 1], g[f]);\n  }\n  var e = [Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array,][b];\n  c = V(c);\n  Vc(a, {name:c, fromWireType:d, argPackAdvance:8, readValueFromPointer:d,}, {$b:!0,});\n}, _embind_register_std_string:function(a, b) {\n  b = V(b);\n  var c = \"std::string\" === b;\n  Vc(a, {name:b, fromWireType:function(d) {\n    var e = N[d >> 2], f = d + 4;\n    if (c) {\n      for (var g = f, n = 0; n <= e; ++n) {\n        var p = f + n;\n        if (n == e || 0 == E[p]) {\n          g = g ? mb(E, g, p - g) : \"\";\n          if (void 0 === l) {\n            var l = g;\n          } else {\n            l += String.fromCharCode(0), l += g;\n          }\n          g = p + 1;\n        }\n      }\n    } else {\n      l = Array(e);\n      for (n = 0; n < e; ++n) {\n        l[n] = String.fromCharCode(E[f + n]);\n      }\n      l = l.join(\"\");\n    }\n    Ec(d);\n    return l;\n  }, toWireType:function(d, e) {\n    e instanceof ArrayBuffer && (e = new Uint8Array(e));\n    var f = \"string\" == typeof e;\n    f || e instanceof Uint8Array || e instanceof Uint8ClampedArray || e instanceof Int8Array || U(\"Cannot pass non-string to std::string\");\n    var g = c && f ? ob(e) : e.length;\n    var n = Wd(4 + g + 1), p = n + 4;\n    N[n >> 2] = g;\n    if (c && f) {\n      pb(e, E, p, g + 1);\n    } else {\n      if (f) {\n        for (f = 0; f < g; ++f) {\n          var l = e.charCodeAt(f);\n          255 < l && (Ec(p), U(\"String has UTF-16 code units that do not fit in 8 bits\"));\n          E[p + f] = l;\n        }\n      } else {\n        for (f = 0; f < g; ++f) {\n          E[p + f] = e[f];\n        }\n      }\n    }\n    null !== d && d.push(Ec, n);\n    return n;\n  }, argPackAdvance:8, readValueFromPointer:Sc, K:function(d) {\n    Ec(d);\n  },});\n}, _embind_register_std_wstring:function(a, b, c) {\n  c = V(c);\n  if (2 === b) {\n    var d = zd;\n    var e = Ad;\n    var f = Bd;\n    var g = () => Da;\n    var n = 1;\n  } else {\n    4 === b && (d = Cd, e = Dd, f = Ed, g = () => N, n = 2);\n  }\n  Vc(a, {name:c, fromWireType:function(p) {\n    for (var l = N[p >> 2], u = g(), v, y = p + 4, k = 0; k <= l; ++k) {\n      var t = p + 4 + k * b;\n      if (k == l || 0 == u[t >> n]) {\n        y = d(y, t - y), void 0 === v ? v = y : (v += String.fromCharCode(0), v += y), y = t + b;\n      }\n    }\n    Ec(p);\n    return v;\n  }, toWireType:function(p, l) {\n    \"string\" != typeof l && U(`Cannot pass non-string to C++ string type ${c}`);\n    var u = f(l), v = Wd(4 + u + b);\n    N[v >> 2] = u >> n;\n    e(l, v + 4, u + b);\n    null !== p && p.push(Ec, v);\n    return v;\n  }, argPackAdvance:8, readValueFromPointer:Sc, K:function(p) {\n    Ec(p);\n  },});\n}, _embind_register_value_object:function(a, b, c, d, e, f) {\n  Qc[a] = {name:V(b), Pa:Y(c, d), W:Y(e, f), fb:[],};\n}, _embind_register_value_object_field:function(a, b, c, d, e, f, g, n, p, l) {\n  Qc[a].fb.push({Sb:V(b), Yb:c, Wb:Y(d, e), Xb:f, rc:g, qc:Y(n, p), sc:l,});\n}, _embind_register_void:function(a, b) {\n  b = V(b);\n  Vc(a, {fc:!0, name:b, argPackAdvance:0, fromWireType:function() {\n  }, toWireType:function() {\n  },});\n}, _emscripten_get_now_is_monotonic:() => !0, _emval_as:function(a, b, c) {\n  a = rc(a);\n  b = Fc(b, \"emval::as\");\n  var d = [], e = sc(d);\n  N[c >> 2] = e;\n  return b.toWireType(d, a);\n}, _emval_call_method:function(a, b, c, d, e) {\n  a = Hd[a];\n  b = rc(b);\n  c = Gd(c);\n  var f = [];\n  N[d >> 2] = sc(f);\n  return a(b, c, f, e);\n}, _emval_call_void_method:function(a, b, c, d) {\n  a = Hd[a];\n  b = rc(b);\n  c = Gd(c);\n  a(b, c, null, d);\n}, _emval_decref:ud, _emval_get_method_caller:function(a, b) {\n  var c = Jd(a, b), d = c[0];\n  b = d.name + \"_$\" + c.slice(1).map(function(g) {\n    return g.name;\n  }).join(\"_\") + \"$\";\n  var e = Kd[b];\n  if (void 0 !== e) {\n    return e;\n  }\n  var f = Array(a - 1);\n  e = Id((g, n, p, l) => {\n    for (var u = 0, v = 0; v < a - 1; ++v) {\n      f[v] = c[v + 1].readValueFromPointer(l + u), u += c[v + 1].argPackAdvance;\n    }\n    g = g[n].apply(g, f);\n    for (v = 0; v < a - 1; ++v) {\n      c[v + 1].Nb && c[v + 1].Nb(f[v]);\n    }\n    if (!d.fc) {\n      return d.toWireType(p, g);\n    }\n  });\n  return Kd[b] = e;\n}, _emval_get_module_property:function(a) {\n  a = Gd(a);\n  return sc(m[a]);\n}, _emval_get_property:function(a, b) {\n  a = rc(a);\n  b = rc(b);\n  return sc(a[b]);\n}, _emval_incref:function(a) {\n  4 < a && (S.get(a).ub += 1);\n}, _emval_new_array:function() {\n  return sc([]);\n}, _emval_new_cstring:function(a) {\n  return sc(Gd(a));\n}, _emval_new_object:function() {\n  return sc({});\n}, _emval_run_destructors:function(a) {\n  var b = rc(a);\n  Rc(b);\n  ud(a);\n}, _emval_set_property:function(a, b, c) {\n  a = rc(a);\n  b = rc(b);\n  c = rc(c);\n  a[b] = c;\n}, _emval_take_value:function(a, b) {\n  a = Fc(a, \"_emval_take_value\");\n  a = a.readValueFromPointer(b);\n  return sc(a);\n}, abort:() => {\n  ya(\"\");\n}, emscripten_asm_const_int:(a, b, c) => {\n  Ld.length = 0;\n  var d;\n  for (c >>= 2; d = E[b++];) {\n    c += 105 != d & c, Ld.push(105 == d ? L[c] : Fa[c++ >> 1]), ++c;\n  }\n  return cb[a].apply(null, Ld);\n}, emscripten_date_now:function() {\n  return Date.now();\n}, emscripten_get_now:() => performance.now(), emscripten_memcpy_big:(a, b, c) => E.copyWithin(a, b, b + c), emscripten_resize_heap:a => {\n  var b = E.length;\n  a >>>= 0;\n  if (2147483648 < a) {\n    return !1;\n  }\n  for (var c = 1; 4 >= c; c *= 2) {\n    var d = b * (1 + 0.2 / c);\n    d = Math.min(d, a + 100663296);\n    var e = Math;\n    d = Math.max(a, d);\n    a: {\n      e = e.min.call(e, 2147483648, d + (65536 - d % 65536) % 65536) - Aa.buffer.byteLength + 65535 >>> 16;\n      try {\n        Aa.grow(e);\n        Ia();\n        var f = 1;\n        break a;\n      } catch (g) {\n      }\n      f = void 0;\n    }\n    if (f) {\n      return !0;\n    }\n  }\n  return !1;\n}, environ_get:(a, b) => {\n  var c = 0;\n  Od().forEach(function(d, e) {\n    var f = b + c;\n    e = N[a + 4 * e >> 2] = f;\n    for (f = 0; f < d.length; ++f) {\n      C[e++ >> 0] = d.charCodeAt(f);\n    }\n    C[e >> 0] = 0;\n    c += d.length + 1;\n  });\n  return 0;\n}, environ_sizes_get:(a, b) => {\n  var c = Od();\n  N[a >> 2] = c.length;\n  var d = 0;\n  c.forEach(function(e) {\n    d += e.length + 1;\n  });\n  N[b >> 2] = d;\n  return 0;\n}, fd_close:function(a) {\n  try {\n    var b = Sb(a);\n    if (null === b.X) {\n      throw new O(8);\n    }\n    b.Ma && (b.Ma = null);\n    try {\n      b.m.close && b.m.close(b);\n    } catch (c) {\n      throw c;\n    } finally {\n      Fb[b.X] = null;\n    }\n    b.X = null;\n    return 0;\n  } catch (c) {\n    if (\"undefined\" == typeof kc || \"ErrnoError\" !== c.name) {\n      throw c;\n    }\n    return c.aa;\n  }\n}, fd_read:function(a, b, c, d) {\n  try {\n    a: {\n      var e = Sb(a);\n      a = b;\n      for (var f, g = b = 0; g < c; g++) {\n        var n = N[a >> 2], p = N[a + 4 >> 2];\n        a += 8;\n        var l = e, u = n, v = p, y = f, k = C;\n        if (0 > v || 0 > y) {\n          throw new O(28);\n        }\n        if (null === l.X) {\n          throw new O(8);\n        }\n        if (1 === (l.flags & 2097155)) {\n          throw new O(8);\n        }\n        if (16384 === (l.node.mode & 61440)) {\n          throw new O(31);\n        }\n        if (!l.m.read) {\n          throw new O(28);\n        }\n        var t = \"undefined\" != typeof y;\n        if (!t) {\n          y = l.position;\n        } else if (!l.seekable) {\n          throw new O(70);\n        }\n        var r = l.m.read(l, k, u, v, y);\n        t || (l.position += r);\n        var A = r;\n        if (0 > A) {\n          var D = -1;\n          break a;\n        }\n        b += A;\n        if (A < p) {\n          break;\n        }\n        \"undefined\" !== typeof f && (f += A);\n      }\n      D = b;\n    }\n    N[d >> 2] = D;\n    return 0;\n  } catch (w) {\n    if (\"undefined\" == typeof kc || \"ErrnoError\" !== w.name) {\n      throw w;\n    }\n    return w.aa;\n  }\n}, fd_seek:function(a, b, c, d, e) {\n  b = c + 2097152 >>> 0 < 4194305 - !!b ? (b >>> 0) + 4294967296 * c : NaN;\n  try {\n    if (isNaN(b)) {\n      return 61;\n    }\n    var f = Sb(a);\n    fc(f, b, d);\n    Za = [f.position >>> 0, (Ya = f.position, 1.0 <= +Math.abs(Ya) ? 0.0 < Ya ? +Math.floor(Ya / 4294967296.0) >>> 0 : ~~+Math.ceil((Ya - +(~~Ya >>> 0)) / 4294967296.0) >>> 0 : 0)];\n    L[e >> 2] = Za[0];\n    L[e + 4 >> 2] = Za[1];\n    f.Ma && 0 === b && 0 === d && (f.Ma = null);\n    return 0;\n  } catch (g) {\n    if (\"undefined\" == typeof kc || \"ErrnoError\" !== g.name) {\n      throw g;\n    }\n    return g.aa;\n  }\n}, fd_write:function(a, b, c, d) {\n  try {\n    a: {\n      var e = Sb(a);\n      a = b;\n      for (var f, g = b = 0; g < c; g++) {\n        var n = N[a >> 2], p = N[a + 4 >> 2];\n        a += 8;\n        var l = e, u = n, v = p, y = f, k = C;\n        if (0 > v || 0 > y) {\n          throw new O(28);\n        }\n        if (null === l.X) {\n          throw new O(8);\n        }\n        if (0 === (l.flags & 2097155)) {\n          throw new O(8);\n        }\n        if (16384 === (l.node.mode & 61440)) {\n          throw new O(31);\n        }\n        if (!l.m.write) {\n          throw new O(28);\n        }\n        l.seekable && l.flags & 1024 && fc(l, 0, 2);\n        var t = \"undefined\" != typeof y;\n        if (!t) {\n          y = l.position;\n        } else if (!l.seekable) {\n          throw new O(70);\n        }\n        var r = l.m.write(l, k, u, v, y, void 0);\n        t || (l.position += r);\n        var A = r;\n        if (0 > A) {\n          var D = -1;\n          break a;\n        }\n        b += A;\n        \"undefined\" !== typeof f && (f += A);\n      }\n      D = b;\n    }\n    N[d >> 2] = D;\n    return 0;\n  } catch (w) {\n    if (\"undefined\" == typeof kc || \"ErrnoError\" !== w.name) {\n      throw w;\n    }\n    return w.aa;\n  }\n}, strftime_l:(a, b, c, d) => Sd(a, b, c, d)};\n(function() {\n  function a(c) {\n    z = c = c.exports;\n    Aa = z.memory;\n    Ia();\n    Ja = z.__indirect_function_table;\n    La.unshift(z.__wasm_call_ctors);\n    Oa--;\n    m.monitorRunDependencies && m.monitorRunDependencies(Oa);\n    if (0 == Oa && (null !== Pa && (clearInterval(Pa), Pa = null), Qa)) {\n      var d = Qa;\n      Qa = null;\n      d();\n    }\n    return c;\n  }\n  var b = {env:Xd, wasi_snapshot_preview1:Xd,};\n  Oa++;\n  m.monitorRunDependencies && m.monitorRunDependencies(Oa);\n  if (m.instantiateWasm) {\n    try {\n      return m.instantiateWasm(b, a);\n    } catch (c) {\n      wa(\"Module.instantiateWasm callback failed with error: \" + c), ba(c);\n    }\n  }\n  Xa(b, function(c) {\n    a(c.instance);\n  }).catch(ba);\n  return {};\n})();\nvar Ec = a => (Ec = z.free)(a), Wd = a => (Wd = z.malloc)(a), Vd = () => (Vd = z.__errno_location)(), $a = m._ma_device__on_notification_unlocked = a => ($a = m._ma_device__on_notification_unlocked = z.ma_device__on_notification_unlocked)(a);\nm._ma_malloc_emscripten = (a, b) => (m._ma_malloc_emscripten = z.ma_malloc_emscripten)(a, b);\nm._ma_free_emscripten = (a, b) => (m._ma_free_emscripten = z.ma_free_emscripten)(a, b);\nvar ab = m._ma_device_process_pcm_frames_capture__webaudio = (a, b, c) => (ab = m._ma_device_process_pcm_frames_capture__webaudio = z.ma_device_process_pcm_frames_capture__webaudio)(a, b, c), bb = m._ma_device_process_pcm_frames_playback__webaudio = (a, b, c) => (bb = m._ma_device_process_pcm_frames_playback__webaudio = z.ma_device_process_pcm_frames_playback__webaudio)(a, b, c), Dc = a => (Dc = z.__getTypeName)(a);\nm.__embind_initialize_bindings = () => (m.__embind_initialize_bindings = z._embind_initialize_bindings)();\nm.dynCall_iiji = (a, b, c, d, e) => (m.dynCall_iiji = z.dynCall_iiji)(a, b, c, d, e);\nm.dynCall_jiji = (a, b, c, d, e) => (m.dynCall_jiji = z.dynCall_jiji)(a, b, c, d, e);\nm.dynCall_iiiji = (a, b, c, d, e, f) => (m.dynCall_iiiji = z.dynCall_iiiji)(a, b, c, d, e, f);\nm.dynCall_iij = (a, b, c, d) => (m.dynCall_iij = z.dynCall_iij)(a, b, c, d);\nm.dynCall_jii = (a, b, c) => (m.dynCall_jii = z.dynCall_jii)(a, b, c);\nm.dynCall_viijii = (a, b, c, d, e, f, g) => (m.dynCall_viijii = z.dynCall_viijii)(a, b, c, d, e, f, g);\nm.dynCall_iiiiij = (a, b, c, d, e, f, g) => (m.dynCall_iiiiij = z.dynCall_iiiiij)(a, b, c, d, e, f, g);\nm.dynCall_iiiiijj = (a, b, c, d, e, f, g, n, p) => (m.dynCall_iiiiijj = z.dynCall_iiiiijj)(a, b, c, d, e, f, g, n, p);\nm.dynCall_iiiiiijj = (a, b, c, d, e, f, g, n, p, l) => (m.dynCall_iiiiiijj = z.dynCall_iiiiiijj)(a, b, c, d, e, f, g, n, p, l);\nvar Yd;\nQa = function Zd() {\n  Yd || $d();\n  Yd || (Qa = Zd);\n};\nfunction $d() {\n  function a() {\n    if (!Yd && (Yd = !0, m.calledRun = !0, !Ba)) {\n      m.noFSInit || hc || (hc = !0, gc(), m.stdin = m.stdin, m.stdout = m.stdout, m.stderr = m.stderr, m.stdin ? jc(\"stdin\", m.stdin) : cc(\"/dev/tty\", \"/dev/stdin\"), m.stdout ? jc(\"stdout\", null, m.stdout) : cc(\"/dev/tty\", \"/dev/stdout\"), m.stderr ? jc(\"stderr\", null, m.stderr) : cc(\"/dev/tty1\", \"/dev/stderr\"), ec(\"/dev/stdin\", 0), ec(\"/dev/stdout\", 1), ec(\"/dev/stderr\", 1));\n      Ib = !1;\n      db(La);\n      aa(m);\n      if (m.onRuntimeInitialized) {\n        m.onRuntimeInitialized();\n      }\n      if (m.postRun) {\n        for (\"function\" == typeof m.postRun && (m.postRun = [m.postRun]); m.postRun.length;) {\n          var b = m.postRun.shift();\n          Ma.unshift(b);\n        }\n      }\n      db(Ma);\n    }\n  }\n  if (!(0 < Oa)) {\n    if (m.preRun) {\n      for (\"function\" == typeof m.preRun && (m.preRun = [m.preRun]); m.preRun.length;) {\n        Na();\n      }\n    }\n    db(Ka);\n    0 < Oa || (m.setStatus ? (m.setStatus(\"Running...\"), setTimeout(function() {\n      setTimeout(function() {\n        m.setStatus(\"\");\n      }, 1);\n      a();\n    }, 1)) : a());\n  }\n}\nif (m.preInit) {\n  for (\"function\" == typeof m.preInit && (m.preInit = [m.preInit]); 0 < m.preInit.length;) {\n    m.preInit.pop()();\n  }\n}\n$d();\n\n\n\n  return moduleArg.ready\n}\n\n);\n})();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Rive);\n\n/***/ }),\n/* 2 */\n/***/ ((module) => {\n\nmodule.exports = /*#__PURE__*/JSON.parse('{\"name\":\"@rive-app/canvas\",\"version\":\"2.31.0\",\"description\":\"Rive\\'s canvas based web api.\",\"main\":\"rive.js\",\"homepage\":\"https://rive.app\",\"repository\":{\"type\":\"git\",\"url\":\"https://github.com/rive-app/rive-wasm/tree/master/js\"},\"keywords\":[\"rive\",\"animation\"],\"author\":\"Rive\",\"contributors\":[\"Luigi Rosso <luigi@rive.app> (https://rive.app)\",\"Maxwell Talbot <max@rive.app> (https://rive.app)\",\"Arthur Vivian <arthur@rive.app> (https://rive.app)\",\"Umberto Sonnino <umberto@rive.app> (https://rive.app)\",\"Matthew Sullivan <matt.j.sullivan@gmail.com> (mailto:matt.j.sullivan@gmail.com)\"],\"license\":\"MIT\",\"files\":[\"rive.js\",\"rive.js.map\",\"rive.wasm\",\"rive_fallback.wasm\",\"rive.d.ts\",\"rive_advanced.mjs.d.ts\"],\"typings\":\"rive.d.ts\",\"dependencies\":{},\"browser\":{\"fs\":false,\"path\":false}}');\n\n/***/ }),\n/* 3 */\n/***/ ((__unused_webpack_module, __nested_webpack_exports__, __nested_webpack_require_96338__) => {\n\n__nested_webpack_require_96338__.r(__nested_webpack_exports__);\n/* harmony export */ __nested_webpack_require_96338__.d(__nested_webpack_exports__, {\n/* harmony export */   Animation: () => (/* reexport safe */ _Animation__WEBPACK_IMPORTED_MODULE_0__.Animation)\n/* harmony export */ });\n/* harmony import */ var _Animation__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_96338__(4);\n\n\n\n/***/ }),\n/* 4 */\n/***/ ((__unused_webpack_module, __nested_webpack_exports__, __nested_webpack_require_96778__) => {\n\n__nested_webpack_require_96778__.r(__nested_webpack_exports__);\n/* harmony export */ __nested_webpack_require_96778__.d(__nested_webpack_exports__, {\n/* harmony export */   Animation: () => (/* binding */ Animation)\n/* harmony export */ });\n/**\n * Represents an animation that can be played on an Artboard.\n * Wraps animations and instances from the runtime and keeps track of playback state.\n *\n * The `Animation` class manages the state and behavior of a single animation instance,\n * including its current time, loop count, and ability to scrub to a specific time.\n *\n * The class provides methods to advance the animation, apply its interpolated keyframe\n * values to the Artboard, and clean up the underlying animation instance when the\n * animation is no longer needed.\n */\nvar Animation = /** @class */ (function () {\n    /**\n     * Constructs a new animation\n     * @constructor\n     * @param {any} animation: runtime animation object\n     * @param {any} instance: runtime animation instance object\n     */\n    function Animation(animation, artboard, runtime, playing) {\n        this.animation = animation;\n        this.artboard = artboard;\n        this.playing = playing;\n        this.loopCount = 0;\n        /**\n         * The time to which the animation should move to on the next render.\n         * If not null, the animation will scrub to this time instead of advancing by the given time.\n         */\n        this.scrubTo = null;\n        this.instance = new runtime.LinearAnimationInstance(animation, artboard);\n    }\n    Object.defineProperty(Animation.prototype, \"name\", {\n        /**\n         * Returns the animation's name\n         */\n        get: function () {\n            return this.animation.name;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Animation.prototype, \"time\", {\n        /**\n         * Returns the animation's name\n         */\n        get: function () {\n            return this.instance.time;\n        },\n        /**\n         * Sets the animation's current time\n         */\n        set: function (value) {\n            this.instance.time = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Animation.prototype, \"loopValue\", {\n        /**\n         * Returns the animation's loop type\n         */\n        get: function () {\n            return this.animation.loopValue;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Animation.prototype, \"needsScrub\", {\n        /**\n         * Indicates whether the animation needs to be scrubbed.\n         * @returns `true` if the animation needs to be scrubbed, `false` otherwise.\n         */\n        get: function () {\n            return this.scrubTo !== null;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Advances the animation by the give time. If the animation needs scrubbing,\n     * time is ignored and the stored scrub value is used.\n     * @param time the time to advance the animation by if no scrubbing required\n     */\n    Animation.prototype.advance = function (time) {\n        if (this.scrubTo === null) {\n            this.instance.advance(time);\n        }\n        else {\n            this.instance.time = 0;\n            this.instance.advance(this.scrubTo);\n            this.scrubTo = null;\n        }\n    };\n    /**\n     * Apply interpolated keyframe values to the artboard. This should be called after calling\n     * .advance() on an animation instance so that new values are applied to properties.\n     *\n     * Note: This does not advance the artboard, which updates all objects on the artboard\n     * @param mix - Mix value for the animation from 0 to 1\n     */\n    Animation.prototype.apply = function (mix) {\n        this.instance.apply(mix);\n    };\n    /**\n     * Deletes the backing Wasm animation instance; once this is called, this\n     * animation is no more.\n     */\n    Animation.prototype.cleanup = function () {\n        this.instance.delete();\n    };\n    return Animation;\n}());\n\n\n\n/***/ }),\n/* 5 */\n/***/ ((__unused_webpack_module, __nested_webpack_exports__, __nested_webpack_require_100912__) => {\n\n__nested_webpack_require_100912__.r(__nested_webpack_exports__);\n/* harmony export */ __nested_webpack_require_100912__.d(__nested_webpack_exports__, {\n/* harmony export */   AudioAssetWrapper: () => (/* reexport safe */ _finalizationRegistry__WEBPACK_IMPORTED_MODULE_2__.AudioAssetWrapper),\n/* harmony export */   AudioWrapper: () => (/* reexport safe */ _finalizationRegistry__WEBPACK_IMPORTED_MODULE_2__.AudioWrapper),\n/* harmony export */   BLANK_URL: () => (/* reexport safe */ _sanitizeUrl__WEBPACK_IMPORTED_MODULE_1__.BLANK_URL),\n/* harmony export */   CustomFileAssetLoaderWrapper: () => (/* reexport safe */ _finalizationRegistry__WEBPACK_IMPORTED_MODULE_2__.CustomFileAssetLoaderWrapper),\n/* harmony export */   FileAssetWrapper: () => (/* reexport safe */ _finalizationRegistry__WEBPACK_IMPORTED_MODULE_2__.FileAssetWrapper),\n/* harmony export */   Finalizable: () => (/* reexport safe */ _finalizationRegistry__WEBPACK_IMPORTED_MODULE_2__.Finalizable),\n/* harmony export */   FontAssetWrapper: () => (/* reexport safe */ _finalizationRegistry__WEBPACK_IMPORTED_MODULE_2__.FontAssetWrapper),\n/* harmony export */   FontWrapper: () => (/* reexport safe */ _finalizationRegistry__WEBPACK_IMPORTED_MODULE_2__.FontWrapper),\n/* harmony export */   ImageAssetWrapper: () => (/* reexport safe */ _finalizationRegistry__WEBPACK_IMPORTED_MODULE_2__.ImageAssetWrapper),\n/* harmony export */   ImageWrapper: () => (/* reexport safe */ _finalizationRegistry__WEBPACK_IMPORTED_MODULE_2__.ImageWrapper),\n/* harmony export */   finalizationRegistry: () => (/* reexport safe */ _finalizationRegistry__WEBPACK_IMPORTED_MODULE_2__.finalizationRegistry),\n/* harmony export */   registerTouchInteractions: () => (/* reexport safe */ _registerTouchInteractions__WEBPACK_IMPORTED_MODULE_0__.registerTouchInteractions),\n/* harmony export */   sanitizeUrl: () => (/* reexport safe */ _sanitizeUrl__WEBPACK_IMPORTED_MODULE_1__.sanitizeUrl)\n/* harmony export */ });\n/* harmony import */ var _registerTouchInteractions__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_100912__(6);\n/* harmony import */ var _sanitizeUrl__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_100912__(7);\n/* harmony import */ var _finalizationRegistry__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_100912__(8);\n\n\n\n\n\n/***/ }),\n/* 6 */\n/***/ ((__unused_webpack_module, __nested_webpack_exports__, __nested_webpack_require_103227__) => {\n\n__nested_webpack_require_103227__.r(__nested_webpack_exports__);\n/* harmony export */ __nested_webpack_require_103227__.d(__nested_webpack_exports__, {\n/* harmony export */   registerTouchInteractions: () => (/* binding */ registerTouchInteractions)\n/* harmony export */ });\nvar _this = undefined;\n/**\n * Returns the clientX and clientY properties from touch or mouse events. Also\n * calls preventDefault() on the event if it is a touchstart or touchmove to prevent\n * scrolling the page on mobile devices\n * @param event - Either a TouchEvent or a MouseEvent\n * @returns - Coordinates of the clientX and clientY properties from the touch/mouse event\n */\nvar getClientCoordinates = function (event, isTouchScrollEnabled) {\n    var _a, _b;\n    if ([\"touchstart\", \"touchmove\"].indexOf(event.type) > -1 &&\n        ((_a = event.touches) === null || _a === void 0 ? void 0 : _a.length)) {\n        // This flag, if false, prevents touch events on the canvas default behavior\n        // which may prevent scrolling if a drag motion on the canvas is performed\n        if (!isTouchScrollEnabled) {\n            event.preventDefault();\n        }\n        return {\n            clientX: event.touches[0].clientX,\n            clientY: event.touches[0].clientY,\n        };\n    }\n    else if (event.type === \"touchend\" &&\n        ((_b = event.changedTouches) === null || _b === void 0 ? void 0 : _b.length)) {\n        return {\n            clientX: event.changedTouches[0].clientX,\n            clientY: event.changedTouches[0].clientY,\n        };\n    }\n    else {\n        return {\n            clientX: event.clientX,\n            clientY: event.clientY,\n        };\n    }\n};\n/**\n * Registers mouse move/up/down callback handlers on the canvas to send meaningful coordinates to\n * the state machine pointer move/up/down functions based on cursor interaction\n */\nvar registerTouchInteractions = function (_a) {\n    var canvas = _a.canvas, artboard = _a.artboard, _b = _a.stateMachines, stateMachines = _b === void 0 ? [] : _b, renderer = _a.renderer, rive = _a.rive, fit = _a.fit, alignment = _a.alignment, _c = _a.isTouchScrollEnabled, isTouchScrollEnabled = _c === void 0 ? false : _c, _d = _a.layoutScaleFactor, layoutScaleFactor = _d === void 0 ? 1.0 : _d;\n    if (!canvas ||\n        !stateMachines.length ||\n        !renderer ||\n        !rive ||\n        !artboard ||\n        typeof window === \"undefined\") {\n        return null;\n    }\n    /**\n     * After a touchend event, some browsers may fire synthetic mouse events\n     * (mouseover, mousedown, mousemove, mouseup) if the touch interaction did not cause\n     * any default action (such as scrolling).\n     *\n     * This is done to simulate the behavior of a mouse for applications that do not support\n     * touch events.\n     *\n     * We're keeping track of the previous event to not send the synthetic mouse events if the\n     * touch event was a click (touchstart -> touchend).\n     *\n     * This is only needed when `isTouchScrollEnabled` is false\n     * When true, `preventDefault()` is called which prevents this behaviour.\n     **/\n    var _prevEventType = null;\n    var _syntheticEventsActive = false;\n    var processEventCallback = function (event) {\n        // Exit early out of all synthetic mouse events\n        // https://stackoverflow.com/questions/9656990/how-to-prevent-simulated-mouse-events-in-mobile-browsers\n        // https://stackoverflow.com/questions/25572070/javascript-touchend-versus-click-dilemma\n        if (_syntheticEventsActive && event instanceof MouseEvent) {\n            // Synthetic event finished\n            if (event.type == \"mouseup\") {\n                _syntheticEventsActive = false;\n            }\n            return;\n        }\n        // Test if it's a \"touch click\". This could cause the browser to send\n        // synthetic mouse events.\n        _syntheticEventsActive =\n            isTouchScrollEnabled &&\n                event.type === \"touchend\" &&\n                _prevEventType === \"touchstart\";\n        _prevEventType = event.type;\n        var boundingRect = event.currentTarget.getBoundingClientRect();\n        var _a = getClientCoordinates(event, isTouchScrollEnabled), clientX = _a.clientX, clientY = _a.clientY;\n        if (!clientX && !clientY) {\n            return;\n        }\n        var canvasX = clientX - boundingRect.left;\n        var canvasY = clientY - boundingRect.top;\n        var forwardMatrix = rive.computeAlignment(fit, alignment, {\n            minX: 0,\n            minY: 0,\n            maxX: boundingRect.width,\n            maxY: boundingRect.height,\n        }, artboard.bounds, layoutScaleFactor);\n        var invertedMatrix = new rive.Mat2D();\n        forwardMatrix.invert(invertedMatrix);\n        var canvasCoordinatesVector = new rive.Vec2D(canvasX, canvasY);\n        var transformedVector = rive.mapXY(invertedMatrix, canvasCoordinatesVector);\n        var transformedX = transformedVector.x();\n        var transformedY = transformedVector.y();\n        transformedVector.delete();\n        invertedMatrix.delete();\n        canvasCoordinatesVector.delete();\n        forwardMatrix.delete();\n        switch (event.type) {\n            /**\n             * There's a 2px buffer for a hitRadius when translating the pointer coordinates\n             * down to the state machine. In cases where the hitbox is about that much away\n             * from the Artboard border, we don't have exact precision on determining pointer\n             * exit. We're therefore adding to the translated coordinates on mouseout of a canvas\n             * to ensure that we report the mouse has truly exited the hitarea.\n             * https://github.com/rive-app/rive-cpp/blob/master/src/animation/state_machine_instance.cpp#L336\n             *\n             * We add/subtract 10000 to account for when the graphic goes beyond the canvas bound\n             * due to for example, a fit: 'cover'. Not perfect, but helps reliably (for now) ensure\n             * we report going out of bounds when the mouse is out of the canvas\n             */\n            case \"mouseout\":\n                for (var _i = 0, stateMachines_1 = stateMachines; _i < stateMachines_1.length; _i++) {\n                    var stateMachine = stateMachines_1[_i];\n                    stateMachine.pointerMove(transformedX, transformedY);\n                }\n                break;\n            // Pointer moving/hovering on the canvas\n            case \"touchmove\":\n            case \"mouseover\":\n            case \"mousemove\": {\n                for (var _b = 0, stateMachines_2 = stateMachines; _b < stateMachines_2.length; _b++) {\n                    var stateMachine = stateMachines_2[_b];\n                    stateMachine.pointerMove(transformedX, transformedY);\n                }\n                break;\n            }\n            // Pointer click initiated but not released yet on the canvas\n            case \"touchstart\":\n            case \"mousedown\": {\n                for (var _c = 0, stateMachines_3 = stateMachines; _c < stateMachines_3.length; _c++) {\n                    var stateMachine = stateMachines_3[_c];\n                    stateMachine.pointerDown(transformedX, transformedY);\n                }\n                break;\n            }\n            // Pointer click released on the canvas\n            case \"touchend\":\n            case \"mouseup\": {\n                for (var _d = 0, stateMachines_4 = stateMachines; _d < stateMachines_4.length; _d++) {\n                    var stateMachine = stateMachines_4[_d];\n                    stateMachine.pointerUp(transformedX, transformedY);\n                }\n                break;\n            }\n            default:\n        }\n    };\n    var callback = processEventCallback.bind(_this);\n    canvas.addEventListener(\"mouseover\", callback);\n    canvas.addEventListener(\"mouseout\", callback);\n    canvas.addEventListener(\"mousemove\", callback);\n    canvas.addEventListener(\"mousedown\", callback);\n    canvas.addEventListener(\"mouseup\", callback);\n    canvas.addEventListener(\"touchmove\", callback, {\n        passive: isTouchScrollEnabled,\n    });\n    canvas.addEventListener(\"touchstart\", callback, {\n        passive: isTouchScrollEnabled,\n    });\n    canvas.addEventListener(\"touchend\", callback);\n    return function () {\n        canvas.removeEventListener(\"mouseover\", callback);\n        canvas.removeEventListener(\"mouseout\", callback);\n        canvas.removeEventListener(\"mousemove\", callback);\n        canvas.removeEventListener(\"mousedown\", callback);\n        canvas.removeEventListener(\"mouseup\", callback);\n        canvas.removeEventListener(\"touchmove\", callback);\n        canvas.removeEventListener(\"touchstart\", callback);\n        canvas.removeEventListener(\"touchend\", callback);\n    };\n};\n\n\n/***/ }),\n/* 7 */\n/***/ ((__unused_webpack_module, __nested_webpack_exports__, __nested_webpack_require_111986__) => {\n\n__nested_webpack_require_111986__.r(__nested_webpack_exports__);\n/* harmony export */ __nested_webpack_require_111986__.d(__nested_webpack_exports__, {\n/* harmony export */   BLANK_URL: () => (/* binding */ BLANK_URL),\n/* harmony export */   sanitizeUrl: () => (/* binding */ sanitizeUrl)\n/* harmony export */ });\n// Reference: https://github.com/braintree/sanitize-url/tree/main\nvar invalidProtocolRegex = /^([^\\w]*)(javascript|data|vbscript)/im;\nvar htmlEntitiesRegex = /&#(\\w+)(^\\w|;)?/g;\nvar htmlCtrlEntityRegex = /&(newline|tab);/gi;\nvar ctrlCharactersRegex = /[\\u0000-\\u001F\\u007F-\\u009F\\u2000-\\u200D\\uFEFF]/gim;\nvar urlSchemeRegex = /^.+(:|&colon;)/gim;\nvar relativeFirstCharacters = [\".\", \"/\"];\nvar BLANK_URL = \"about:blank\";\nfunction isRelativeUrlWithoutProtocol(url) {\n    return relativeFirstCharacters.indexOf(url[0]) > -1;\n}\n// adapted from https://stackoverflow.com/a/29824550/2601552\nfunction decodeHtmlCharacters(str) {\n    var removedNullByte = str.replace(ctrlCharactersRegex, \"\");\n    return removedNullByte.replace(htmlEntitiesRegex, function (match, dec) {\n        return String.fromCharCode(dec);\n    });\n}\nfunction sanitizeUrl(url) {\n    if (!url) {\n        return BLANK_URL;\n    }\n    var sanitizedUrl = decodeHtmlCharacters(url)\n        .replace(htmlCtrlEntityRegex, \"\")\n        .replace(ctrlCharactersRegex, \"\")\n        .trim();\n    if (!sanitizedUrl) {\n        return BLANK_URL;\n    }\n    if (isRelativeUrlWithoutProtocol(sanitizedUrl)) {\n        return sanitizedUrl;\n    }\n    var urlSchemeParseResults = sanitizedUrl.match(urlSchemeRegex);\n    if (!urlSchemeParseResults) {\n        return sanitizedUrl;\n    }\n    var urlScheme = urlSchemeParseResults[0];\n    if (invalidProtocolRegex.test(urlScheme)) {\n        return BLANK_URL;\n    }\n    return sanitizedUrl;\n}\n\n\n/***/ }),\n/* 8 */\n/***/ ((__unused_webpack_module, __nested_webpack_exports__, __nested_webpack_require_113836__) => {\n\n__nested_webpack_require_113836__.r(__nested_webpack_exports__);\n/* harmony export */ __nested_webpack_require_113836__.d(__nested_webpack_exports__, {\n/* harmony export */   AudioAssetWrapper: () => (/* binding */ AudioAssetWrapper),\n/* harmony export */   AudioWrapper: () => (/* binding */ AudioWrapper),\n/* harmony export */   CustomFileAssetLoaderWrapper: () => (/* binding */ CustomFileAssetLoaderWrapper),\n/* harmony export */   FileAssetWrapper: () => (/* binding */ FileAssetWrapper),\n/* harmony export */   Finalizable: () => (/* binding */ Finalizable),\n/* harmony export */   FontAssetWrapper: () => (/* binding */ FontAssetWrapper),\n/* harmony export */   FontWrapper: () => (/* binding */ FontWrapper),\n/* harmony export */   ImageAssetWrapper: () => (/* binding */ ImageAssetWrapper),\n/* harmony export */   ImageWrapper: () => (/* binding */ ImageWrapper),\n/* harmony export */   finalizationRegistry: () => (/* binding */ finalizationRegistry)\n/* harmony export */ });\nvar __extends = ( false) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar Finalizable = /** @class */ (function () {\n    function Finalizable() {\n        this.selfUnref = false;\n    }\n    return Finalizable;\n}());\nvar ImageWrapper = /** @class */ (function (_super) {\n    __extends(ImageWrapper, _super);\n    function ImageWrapper(image) {\n        var _this = _super.call(this) || this;\n        _this._nativeImage = image;\n        return _this;\n    }\n    Object.defineProperty(ImageWrapper.prototype, \"nativeImage\", {\n        get: function () {\n            return this._nativeImage;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    ImageWrapper.prototype.unref = function () {\n        if (this.selfUnref) {\n            this._nativeImage.unref();\n        }\n    };\n    return ImageWrapper;\n}(Finalizable));\nvar AudioWrapper = /** @class */ (function (_super) {\n    __extends(AudioWrapper, _super);\n    function AudioWrapper(audio) {\n        var _this = _super.call(this) || this;\n        _this._nativeAudio = audio;\n        return _this;\n    }\n    Object.defineProperty(AudioWrapper.prototype, \"nativeAudio\", {\n        get: function () {\n            return this._nativeAudio;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    AudioWrapper.prototype.unref = function () {\n        if (this.selfUnref) {\n            this._nativeAudio.unref();\n        }\n    };\n    return AudioWrapper;\n}(Finalizable));\nvar FontWrapper = /** @class */ (function (_super) {\n    __extends(FontWrapper, _super);\n    function FontWrapper(font) {\n        var _this = _super.call(this) || this;\n        _this._nativeFont = font;\n        return _this;\n    }\n    Object.defineProperty(FontWrapper.prototype, \"nativeFont\", {\n        get: function () {\n            return this._nativeFont;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    FontWrapper.prototype.unref = function () {\n        if (this.selfUnref) {\n            this._nativeFont.unref();\n        }\n    };\n    return FontWrapper;\n}(Finalizable));\nvar CustomFileAssetLoaderWrapper = /** @class */ (function () {\n    function CustomFileAssetLoaderWrapper(runtime, loaderCallback) {\n        this._assetLoaderCallback = loaderCallback;\n        this.assetLoader = new runtime.CustomFileAssetLoader({\n            loadContents: this.loadContents.bind(this),\n        });\n    }\n    CustomFileAssetLoaderWrapper.prototype.loadContents = function (asset, bytes) {\n        var assetWrapper;\n        if (asset.isImage) {\n            assetWrapper = new ImageAssetWrapper(asset);\n        }\n        else if (asset.isAudio) {\n            assetWrapper = new AudioAssetWrapper(asset);\n        }\n        else if (asset.isFont) {\n            assetWrapper = new FontAssetWrapper(asset);\n        }\n        return this._assetLoaderCallback(assetWrapper, bytes);\n    };\n    return CustomFileAssetLoaderWrapper;\n}());\n/**\n * Rive class representing a FileAsset with relevant metadata fields to describe\n * an asset associated wtih the Rive File\n */\nvar FileAssetWrapper = /** @class */ (function () {\n    function FileAssetWrapper(nativeAsset) {\n        this._nativeFileAsset = nativeAsset;\n    }\n    FileAssetWrapper.prototype.decode = function (bytes) {\n        this._nativeFileAsset.decode(bytes);\n    };\n    Object.defineProperty(FileAssetWrapper.prototype, \"name\", {\n        get: function () {\n            return this._nativeFileAsset.name;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(FileAssetWrapper.prototype, \"fileExtension\", {\n        get: function () {\n            return this._nativeFileAsset.fileExtension;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(FileAssetWrapper.prototype, \"uniqueFilename\", {\n        get: function () {\n            return this._nativeFileAsset.uniqueFilename;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(FileAssetWrapper.prototype, \"isAudio\", {\n        get: function () {\n            return this._nativeFileAsset.isAudio;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(FileAssetWrapper.prototype, \"isImage\", {\n        get: function () {\n            return this._nativeFileAsset.isImage;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(FileAssetWrapper.prototype, \"isFont\", {\n        get: function () {\n            return this._nativeFileAsset.isFont;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(FileAssetWrapper.prototype, \"cdnUuid\", {\n        get: function () {\n            return this._nativeFileAsset.cdnUuid;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(FileAssetWrapper.prototype, \"nativeFileAsset\", {\n        get: function () {\n            return this._nativeFileAsset;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return FileAssetWrapper;\n}());\n/**\n * Rive class extending the FileAsset that exposes a `setRenderImage()` API with a\n * decoded Image (via the `decodeImage()` API) to set a new Image on the Rive FileAsset\n */\nvar ImageAssetWrapper = /** @class */ (function (_super) {\n    __extends(ImageAssetWrapper, _super);\n    function ImageAssetWrapper() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    ImageAssetWrapper.prototype.setRenderImage = function (image) {\n        this._nativeFileAsset.setRenderImage(image.nativeImage);\n    };\n    return ImageAssetWrapper;\n}(FileAssetWrapper));\n/**\n * Rive class extending the FileAsset that exposes a `setAudioSource()` API with a\n * decoded Audio (via the `decodeAudio()` API) to set a new Audio on the Rive FileAsset\n */\nvar AudioAssetWrapper = /** @class */ (function (_super) {\n    __extends(AudioAssetWrapper, _super);\n    function AudioAssetWrapper() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    AudioAssetWrapper.prototype.setAudioSource = function (audio) {\n        this._nativeFileAsset.setAudioSource(audio.nativeAudio);\n    };\n    return AudioAssetWrapper;\n}(FileAssetWrapper));\n/**\n * Rive class extending the FileAsset that exposes a `setFont()` API with a\n * decoded Font (via the `decodeFont()` API) to set a new Font on the Rive FileAsset\n */\nvar FontAssetWrapper = /** @class */ (function (_super) {\n    __extends(FontAssetWrapper, _super);\n    function FontAssetWrapper() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    FontAssetWrapper.prototype.setFont = function (font) {\n        this._nativeFileAsset.setFont(font.nativeFont);\n    };\n    return FontAssetWrapper;\n}(FileAssetWrapper));\nvar FakeFinalizationRegistry = /** @class */ (function () {\n    function FakeFinalizationRegistry(_) {\n    }\n    FakeFinalizationRegistry.prototype.register = function (object) {\n        object.selfUnref = true;\n    };\n    FakeFinalizationRegistry.prototype.unregister = function (_) { };\n    return FakeFinalizationRegistry;\n}());\nvar MyFinalizationRegistry = typeof FinalizationRegistry !== \"undefined\"\n    ? FinalizationRegistry\n    : FakeFinalizationRegistry;\nvar finalizationRegistry = new MyFinalizationRegistry(function (ob) {\n    ob.unref();\n});\n\n\n\n/***/ })\n/******/ \t]);\n/************************************************************************/\n/******/ \t// The module cache\n/******/ \tvar __webpack_module_cache__ = {};\n/******/ \t\n/******/ \t// The require function\n/******/ \tfunction __nested_webpack_require_123104__(moduleId) {\n/******/ \t\t// Check if module is in cache\n/******/ \t\tvar cachedModule = __webpack_module_cache__[moduleId];\n/******/ \t\tif (cachedModule !== undefined) {\n/******/ \t\t\treturn cachedModule.exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = __webpack_module_cache__[moduleId] = {\n/******/ \t\t\t// no module.id needed\n/******/ \t\t\t// no module.loaded needed\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/ \t\n/******/ \t\t// Execute the module function\n/******/ \t\t__webpack_modules__[moduleId](module, module.exports, __nested_webpack_require_123104__);\n/******/ \t\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/ \t\n/************************************************************************/\n/******/ \t/* webpack/runtime/define property getters */\n/******/ \t(() => {\n/******/ \t\t// define getter functions for harmony exports\n/******/ \t\t__nested_webpack_require_123104__.d = (exports, definition) => {\n/******/ \t\t\tfor(var key in definition) {\n/******/ \t\t\t\tif(__nested_webpack_require_123104__.o(definition, key) && !__nested_webpack_require_123104__.o(exports, key)) {\n/******/ \t\t\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/hasOwnProperty shorthand */\n/******/ \t(() => {\n/******/ \t\t__nested_webpack_require_123104__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/make namespace object */\n/******/ \t(() => {\n/******/ \t\t// define __esModule on exports\n/******/ \t\t__nested_webpack_require_123104__.r = (exports) => {\n/******/ \t\t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t\t}\n/******/ \t\t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/************************************************************************/\nvar __nested_webpack_exports__ = {};\n// This entry needs to be wrapped in an IIFE because it needs to be isolated against other modules in the chunk.\n(() => {\n__nested_webpack_require_123104__.r(__nested_webpack_exports__);\n/* harmony export */ __nested_webpack_require_123104__.d(__nested_webpack_exports__, {\n/* harmony export */   Alignment: () => (/* binding */ Alignment),\n/* harmony export */   DataEnum: () => (/* binding */ DataEnum),\n/* harmony export */   EventType: () => (/* binding */ EventType),\n/* harmony export */   Fit: () => (/* binding */ Fit),\n/* harmony export */   Layout: () => (/* binding */ Layout),\n/* harmony export */   LoopType: () => (/* binding */ LoopType),\n/* harmony export */   Rive: () => (/* binding */ Rive),\n/* harmony export */   RiveEventType: () => (/* binding */ RiveEventType),\n/* harmony export */   RiveFile: () => (/* binding */ RiveFile),\n/* harmony export */   RuntimeLoader: () => (/* binding */ RuntimeLoader),\n/* harmony export */   StateMachineInput: () => (/* binding */ StateMachineInput),\n/* harmony export */   StateMachineInputType: () => (/* binding */ StateMachineInputType),\n/* harmony export */   Testing: () => (/* binding */ Testing),\n/* harmony export */   ViewModel: () => (/* binding */ ViewModel),\n/* harmony export */   ViewModelInstance: () => (/* binding */ ViewModelInstance),\n/* harmony export */   ViewModelInstanceArtboard: () => (/* binding */ ViewModelInstanceArtboard),\n/* harmony export */   ViewModelInstanceAssetImage: () => (/* binding */ ViewModelInstanceAssetImage),\n/* harmony export */   ViewModelInstanceBoolean: () => (/* binding */ ViewModelInstanceBoolean),\n/* harmony export */   ViewModelInstanceColor: () => (/* binding */ ViewModelInstanceColor),\n/* harmony export */   ViewModelInstanceEnum: () => (/* binding */ ViewModelInstanceEnum),\n/* harmony export */   ViewModelInstanceList: () => (/* binding */ ViewModelInstanceList),\n/* harmony export */   ViewModelInstanceNumber: () => (/* binding */ ViewModelInstanceNumber),\n/* harmony export */   ViewModelInstanceString: () => (/* binding */ ViewModelInstanceString),\n/* harmony export */   ViewModelInstanceTrigger: () => (/* binding */ ViewModelInstanceTrigger),\n/* harmony export */   ViewModelInstanceValue: () => (/* binding */ ViewModelInstanceValue),\n/* harmony export */   decodeAudio: () => (/* binding */ decodeAudio),\n/* harmony export */   decodeFont: () => (/* binding */ decodeFont),\n/* harmony export */   decodeImage: () => (/* binding */ decodeImage)\n/* harmony export */ });\n/* harmony import */ var _rive_advanced_mjs__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_123104__(1);\n/* harmony import */ var package_json__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_123104__(2);\n/* harmony import */ var _animation__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_123104__(3);\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_123104__(5);\nvar __extends = ( false) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = ( false) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = ( false) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = ( false) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\n    return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __spreadArray = ( false) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\n\n\n\n\nvar RiveError = /** @class */ (function (_super) {\n    __extends(RiveError, _super);\n    function RiveError() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.isHandledError = true;\n        return _this;\n    }\n    return RiveError;\n}(Error));\n// #regions helpers\nvar resolveErrorMessage = function (error) {\n    return error && error.isHandledError\n        ? error.message\n        : \"Problem loading file; may be corrupt!\";\n};\n// #region layout\n// Fit options for the canvas\nvar Fit;\n(function (Fit) {\n    Fit[\"Cover\"] = \"cover\";\n    Fit[\"Contain\"] = \"contain\";\n    Fit[\"Fill\"] = \"fill\";\n    Fit[\"FitWidth\"] = \"fitWidth\";\n    Fit[\"FitHeight\"] = \"fitHeight\";\n    Fit[\"None\"] = \"none\";\n    Fit[\"ScaleDown\"] = \"scaleDown\";\n    Fit[\"Layout\"] = \"layout\";\n})(Fit || (Fit = {}));\n// Alignment options for the canvas\nvar Alignment;\n(function (Alignment) {\n    Alignment[\"Center\"] = \"center\";\n    Alignment[\"TopLeft\"] = \"topLeft\";\n    Alignment[\"TopCenter\"] = \"topCenter\";\n    Alignment[\"TopRight\"] = \"topRight\";\n    Alignment[\"CenterLeft\"] = \"centerLeft\";\n    Alignment[\"CenterRight\"] = \"centerRight\";\n    Alignment[\"BottomLeft\"] = \"bottomLeft\";\n    Alignment[\"BottomCenter\"] = \"bottomCenter\";\n    Alignment[\"BottomRight\"] = \"bottomRight\";\n})(Alignment || (Alignment = {}));\n// Alignment options for Rive animations in a HTML canvas\nvar Layout = /** @class */ (function () {\n    function Layout(params) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        this.fit = (_a = params === null || params === void 0 ? void 0 : params.fit) !== null && _a !== void 0 ? _a : Fit.Contain;\n        this.alignment = (_b = params === null || params === void 0 ? void 0 : params.alignment) !== null && _b !== void 0 ? _b : Alignment.Center;\n        this.layoutScaleFactor = (_c = params === null || params === void 0 ? void 0 : params.layoutScaleFactor) !== null && _c !== void 0 ? _c : 1;\n        this.minX = (_d = params === null || params === void 0 ? void 0 : params.minX) !== null && _d !== void 0 ? _d : 0;\n        this.minY = (_e = params === null || params === void 0 ? void 0 : params.minY) !== null && _e !== void 0 ? _e : 0;\n        this.maxX = (_f = params === null || params === void 0 ? void 0 : params.maxX) !== null && _f !== void 0 ? _f : 0;\n        this.maxY = (_g = params === null || params === void 0 ? void 0 : params.maxY) !== null && _g !== void 0 ? _g : 0;\n    }\n    // Alternative constructor to build a Layout from an interface/object\n    Layout.new = function (_a) {\n        var fit = _a.fit, alignment = _a.alignment, minX = _a.minX, minY = _a.minY, maxX = _a.maxX, maxY = _a.maxY;\n        console.warn(\"This function is deprecated: please use `new Layout({})` instead\");\n        return new Layout({ fit: fit, alignment: alignment, minX: minX, minY: minY, maxX: maxX, maxY: maxY });\n    };\n    /**\n     * Makes a copy of the layout, replacing any specified parameters\n     */\n    Layout.prototype.copyWith = function (_a) {\n        var fit = _a.fit, alignment = _a.alignment, layoutScaleFactor = _a.layoutScaleFactor, minX = _a.minX, minY = _a.minY, maxX = _a.maxX, maxY = _a.maxY;\n        return new Layout({\n            fit: fit !== null && fit !== void 0 ? fit : this.fit,\n            alignment: alignment !== null && alignment !== void 0 ? alignment : this.alignment,\n            layoutScaleFactor: layoutScaleFactor !== null && layoutScaleFactor !== void 0 ? layoutScaleFactor : this.layoutScaleFactor,\n            minX: minX !== null && minX !== void 0 ? minX : this.minX,\n            minY: minY !== null && minY !== void 0 ? minY : this.minY,\n            maxX: maxX !== null && maxX !== void 0 ? maxX : this.maxX,\n            maxY: maxY !== null && maxY !== void 0 ? maxY : this.maxY,\n        });\n    };\n    // Returns fit for the Wasm runtime format\n    Layout.prototype.runtimeFit = function (rive) {\n        if (this.cachedRuntimeFit)\n            return this.cachedRuntimeFit;\n        var fit;\n        if (this.fit === Fit.Cover)\n            fit = rive.Fit.cover;\n        else if (this.fit === Fit.Contain)\n            fit = rive.Fit.contain;\n        else if (this.fit === Fit.Fill)\n            fit = rive.Fit.fill;\n        else if (this.fit === Fit.FitWidth)\n            fit = rive.Fit.fitWidth;\n        else if (this.fit === Fit.FitHeight)\n            fit = rive.Fit.fitHeight;\n        else if (this.fit === Fit.ScaleDown)\n            fit = rive.Fit.scaleDown;\n        else if (this.fit === Fit.Layout)\n            fit = rive.Fit.layout;\n        else\n            fit = rive.Fit.none;\n        this.cachedRuntimeFit = fit;\n        return fit;\n    };\n    // Returns alignment for the Wasm runtime format\n    Layout.prototype.runtimeAlignment = function (rive) {\n        if (this.cachedRuntimeAlignment)\n            return this.cachedRuntimeAlignment;\n        var alignment;\n        if (this.alignment === Alignment.TopLeft)\n            alignment = rive.Alignment.topLeft;\n        else if (this.alignment === Alignment.TopCenter)\n            alignment = rive.Alignment.topCenter;\n        else if (this.alignment === Alignment.TopRight)\n            alignment = rive.Alignment.topRight;\n        else if (this.alignment === Alignment.CenterLeft)\n            alignment = rive.Alignment.centerLeft;\n        else if (this.alignment === Alignment.CenterRight)\n            alignment = rive.Alignment.centerRight;\n        else if (this.alignment === Alignment.BottomLeft)\n            alignment = rive.Alignment.bottomLeft;\n        else if (this.alignment === Alignment.BottomCenter)\n            alignment = rive.Alignment.bottomCenter;\n        else if (this.alignment === Alignment.BottomRight)\n            alignment = rive.Alignment.bottomRight;\n        else\n            alignment = rive.Alignment.center;\n        this.cachedRuntimeAlignment = alignment;\n        return alignment;\n    };\n    return Layout;\n}());\n\n// Runtime singleton; use getInstance to provide a callback that returns the\n// Rive runtime\nvar RuntimeLoader = /** @class */ (function () {\n    // Class is never instantiated\n    function RuntimeLoader() {\n    }\n    // Loads the runtime\n    RuntimeLoader.loadRuntime = function () {\n        _rive_advanced_mjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"]({\n            // Loads Wasm bundle\n            locateFile: function () { return RuntimeLoader.wasmURL; },\n        })\n            .then(function (rive) {\n            var _a;\n            RuntimeLoader.runtime = rive;\n            // Fire all the callbacks\n            while (RuntimeLoader.callBackQueue.length > 0) {\n                (_a = RuntimeLoader.callBackQueue.shift()) === null || _a === void 0 ? void 0 : _a(RuntimeLoader.runtime);\n            }\n        })\n            .catch(function (error) {\n            // Capture specific error details\n            var errorDetails = {\n                message: (error === null || error === void 0 ? void 0 : error.message) || \"Unknown error\",\n                type: (error === null || error === void 0 ? void 0 : error.name) || \"Error\",\n                // Some browsers may provide additional WebAssembly-specific details\n                wasmError: error instanceof WebAssembly.CompileError ||\n                    error instanceof WebAssembly.RuntimeError,\n                originalError: error,\n            };\n            // Log detailed error for debugging\n            console.debug(\"Rive WASM load error details:\", errorDetails);\n            // In case unpkg fails, or the wasm was not supported, we try to load the fallback module from jsdelivr.\n            // This `rive_fallback.wasm` is compiled to support older architecture.\n            // TODO: (Gordon): preemptively test browser support and load the correct wasm file. Then use jsdelvr only if unpkg fails.\n            var backupJsdelivrUrl = \"https://cdn.jsdelivr.net/npm/\".concat(package_json__WEBPACK_IMPORTED_MODULE_1__.name, \"@\").concat(package_json__WEBPACK_IMPORTED_MODULE_1__.version, \"/rive_fallback.wasm\");\n            if (RuntimeLoader.wasmURL.toLowerCase() !== backupJsdelivrUrl) {\n                console.warn(\"Failed to load WASM from \".concat(RuntimeLoader.wasmURL, \" (\").concat(errorDetails.message, \"), trying jsdelivr as a backup\"));\n                RuntimeLoader.setWasmUrl(backupJsdelivrUrl);\n                RuntimeLoader.loadRuntime();\n            }\n            else {\n                var errorMessage = [\n                    \"Could not load Rive WASM file from \".concat(RuntimeLoader.wasmURL, \" or \").concat(backupJsdelivrUrl, \".\"),\n                    \"Possible reasons:\",\n                    \"- Network connection is down\",\n                    \"- WebAssembly is not supported in this environment\",\n                    \"- The WASM file is corrupted or incompatible\",\n                    \"\\nError details:\",\n                    \"- Type: \".concat(errorDetails.type),\n                    \"- Message: \".concat(errorDetails.message),\n                    \"- WebAssembly-specific error: \".concat(errorDetails.wasmError),\n                    \"\\nTo resolve, you may need to:\",\n                    \"1. Check your network connection\",\n                    \"2. Set a new WASM source via RuntimeLoader.setWasmUrl()\",\n                    \"3. Call RuntimeLoader.loadRuntime() again\",\n                ].join(\"\\n\");\n                console.error(errorMessage);\n            }\n        });\n    };\n    // Provides a runtime instance via a callback\n    RuntimeLoader.getInstance = function (callback) {\n        // If it's not loading, start loading runtime\n        if (!RuntimeLoader.isLoading) {\n            RuntimeLoader.isLoading = true;\n            RuntimeLoader.loadRuntime();\n        }\n        if (!RuntimeLoader.runtime) {\n            RuntimeLoader.callBackQueue.push(callback);\n        }\n        else {\n            callback(RuntimeLoader.runtime);\n        }\n    };\n    // Provides a runtime instance via a promise\n    RuntimeLoader.awaitInstance = function () {\n        return new Promise(function (resolve) {\n            return RuntimeLoader.getInstance(function (rive) { return resolve(rive); });\n        });\n    };\n    // Manually sets the wasm url\n    RuntimeLoader.setWasmUrl = function (url) {\n        RuntimeLoader.wasmURL = url;\n    };\n    // Gets the current wasm url\n    RuntimeLoader.getWasmUrl = function () {\n        return RuntimeLoader.wasmURL;\n    };\n    // Flag to indicate that loading has started/completed\n    RuntimeLoader.isLoading = false;\n    // List of callbacks for the runtime that come in while loading\n    RuntimeLoader.callBackQueue = [];\n    // Path to the Wasm file; default path works for testing only;\n    // if embedded wasm is used then this is never used.\n    RuntimeLoader.wasmURL = \"https://unpkg.com/\".concat(package_json__WEBPACK_IMPORTED_MODULE_1__.name, \"@\").concat(package_json__WEBPACK_IMPORTED_MODULE_1__.version, \"/rive.wasm\");\n    return RuntimeLoader;\n}());\n\n// #endregion\n// #region state machines\nvar StateMachineInputType;\n(function (StateMachineInputType) {\n    StateMachineInputType[StateMachineInputType[\"Number\"] = 56] = \"Number\";\n    StateMachineInputType[StateMachineInputType[\"Trigger\"] = 58] = \"Trigger\";\n    StateMachineInputType[StateMachineInputType[\"Boolean\"] = 59] = \"Boolean\";\n})(StateMachineInputType || (StateMachineInputType = {}));\n/**\n * An input for a state machine\n */\nvar StateMachineInput = /** @class */ (function () {\n    function StateMachineInput(type, runtimeInput) {\n        this.type = type;\n        this.runtimeInput = runtimeInput;\n    }\n    Object.defineProperty(StateMachineInput.prototype, \"name\", {\n        /**\n         * Returns the name of the input\n         */\n        get: function () {\n            return this.runtimeInput.name;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StateMachineInput.prototype, \"value\", {\n        /**\n         * Returns the current value of the input\n         */\n        get: function () {\n            return this.runtimeInput.value;\n        },\n        /**\n         * Sets the value of the input\n         */\n        set: function (value) {\n            this.runtimeInput.value = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Fires a trigger; does nothing on Number or Boolean input types\n     */\n    StateMachineInput.prototype.fire = function () {\n        if (this.type === StateMachineInputType.Trigger) {\n            this.runtimeInput.fire();\n        }\n    };\n    /**\n     * Deletes the input\n     */\n    StateMachineInput.prototype.delete = function () {\n        this.runtimeInput = null;\n    };\n    return StateMachineInput;\n}());\n\nvar RiveEventType;\n(function (RiveEventType) {\n    RiveEventType[RiveEventType[\"General\"] = 128] = \"General\";\n    RiveEventType[RiveEventType[\"OpenUrl\"] = 131] = \"OpenUrl\";\n})(RiveEventType || (RiveEventType = {}));\nvar Artboard = /** @class */ (function () {\n    function Artboard(artboard) {\n        this.nativeArtboard = artboard;\n    }\n    return Artboard;\n}());\nvar StateMachine = /** @class */ (function () {\n    /**\n     * @constructor\n     * @param stateMachine runtime state machine object\n     * @param instance runtime state machine instance object\n     */\n    function StateMachine(stateMachine, runtime, playing, artboard) {\n        this.stateMachine = stateMachine;\n        this.playing = playing;\n        this.artboard = artboard;\n        /**\n         * Caches the inputs from the runtime\n         */\n        this.inputs = [];\n        this.instance = new runtime.StateMachineInstance(stateMachine, artboard);\n        this.initInputs(runtime);\n    }\n    Object.defineProperty(StateMachine.prototype, \"name\", {\n        get: function () {\n            return this.stateMachine.name;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StateMachine.prototype, \"statesChanged\", {\n        /**\n         * Returns a list of state names that have changed on this frame\n         */\n        get: function () {\n            var names = [];\n            for (var i = 0; i < this.instance.stateChangedCount(); i++) {\n                names.push(this.instance.stateChangedNameByIndex(i));\n            }\n            return names;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Advances the state machine instance by a given time.\n     * @param time - the time to advance the animation by in seconds\n     */\n    StateMachine.prototype.advance = function (time) {\n        this.instance.advance(time);\n    };\n    /**\n     * Advances the state machine instance by a given time and apply changes to artboard.\n     * @param time - the time to advance the animation by in seconds\n     */\n    StateMachine.prototype.advanceAndApply = function (time) {\n        this.instance.advanceAndApply(time);\n    };\n    /**\n     * Returns the number of events reported from the last advance call\n     * @returns Number of events reported\n     */\n    StateMachine.prototype.reportedEventCount = function () {\n        return this.instance.reportedEventCount();\n    };\n    /**\n     * Returns a RiveEvent object emitted from the last advance call at the given index\n     * of a list of potentially multiple events. If an event at the index is not found,\n     * undefined is returned.\n     * @param i index of the event reported in a list of potentially multiple events\n     * @returns RiveEvent or extended RiveEvent object returned, or undefined\n     */\n    StateMachine.prototype.reportedEventAt = function (i) {\n        return this.instance.reportedEventAt(i);\n    };\n    /**\n     * Fetches references to the state machine's inputs and caches them\n     * @param runtime an instance of the runtime; needed for the SMIInput types\n     */\n    StateMachine.prototype.initInputs = function (runtime) {\n        // Fetch the inputs from the runtime if we don't have them\n        for (var i = 0; i < this.instance.inputCount(); i++) {\n            var input = this.instance.input(i);\n            this.inputs.push(this.mapRuntimeInput(input, runtime));\n        }\n    };\n    /**\n     * Maps a runtime input to it's appropriate type\n     * @param input\n     */\n    StateMachine.prototype.mapRuntimeInput = function (input, runtime) {\n        if (input.type === runtime.SMIInput.bool) {\n            return new StateMachineInput(StateMachineInputType.Boolean, input.asBool());\n        }\n        else if (input.type === runtime.SMIInput.number) {\n            return new StateMachineInput(StateMachineInputType.Number, input.asNumber());\n        }\n        else if (input.type === runtime.SMIInput.trigger) {\n            return new StateMachineInput(StateMachineInputType.Trigger, input.asTrigger());\n        }\n    };\n    /**\n     * Deletes the backing Wasm state machine instance; once this is called, this\n     * state machine is no more.\n     */\n    StateMachine.prototype.cleanup = function () {\n        this.inputs.forEach(function (input) {\n            input.delete();\n        });\n        this.inputs.length = 0;\n        this.instance.delete();\n    };\n    StateMachine.prototype.bindViewModelInstance = function (viewModelInstance) {\n        if (viewModelInstance.runtimeInstance != null) {\n            this.instance.bindViewModelInstance(viewModelInstance.runtimeInstance);\n        }\n    };\n    return StateMachine;\n}());\n// #endregion\n// #region animator\n/**\n * Manages animation\n */\nvar Animator = /** @class */ (function () {\n    /**\n     * Constructs a new animator\n     * @constructor\n     * @param runtime Rive runtime; needed to instance animations & state machines\n     * @param artboard the artboard that holds all animations and state machines\n     * @param animations optional list of animations\n     * @param stateMachines optional list of state machines\n     */\n    function Animator(runtime, artboard, eventManager, animations, stateMachines) {\n        if (animations === void 0) { animations = []; }\n        if (stateMachines === void 0) { stateMachines = []; }\n        this.runtime = runtime;\n        this.artboard = artboard;\n        this.eventManager = eventManager;\n        this.animations = animations;\n        this.stateMachines = stateMachines;\n    }\n    /**\n     * Adds animations and state machines by their names. If names are shared\n     * between animations & state machines, then the first one found will be\n     * created. Best not to use the same names for these in your Rive file.\n     * @param animatable the name(s) of animations and state machines to add\n     * @returns a list of names of the playing animations and state machines\n     */\n    Animator.prototype.add = function (animatables, playing, fireEvent) {\n        if (fireEvent === void 0) { fireEvent = true; }\n        animatables = mapToStringArray(animatables);\n        // If animatables is empty, play or pause everything\n        if (animatables.length === 0) {\n            this.animations.forEach(function (a) { return (a.playing = playing); });\n            this.stateMachines.forEach(function (m) { return (m.playing = playing); });\n        }\n        else {\n            // Play/pause already instanced items, or create new instances\n            var instancedAnimationNames = this.animations.map(function (a) { return a.name; });\n            var instancedMachineNames = this.stateMachines.map(function (m) { return m.name; });\n            for (var i = 0; i < animatables.length; i++) {\n                var aIndex = instancedAnimationNames.indexOf(animatables[i]);\n                var mIndex = instancedMachineNames.indexOf(animatables[i]);\n                if (aIndex >= 0 || mIndex >= 0) {\n                    if (aIndex >= 0) {\n                        // Animation is instanced, play/pause it\n                        this.animations[aIndex].playing = playing;\n                    }\n                    else {\n                        // State machine is instanced, play/pause it\n                        this.stateMachines[mIndex].playing = playing;\n                    }\n                }\n                else {\n                    // Try to create a new animation instance\n                    var anim = this.artboard.animationByName(animatables[i]);\n                    if (anim) {\n                        var newAnimation = new _animation__WEBPACK_IMPORTED_MODULE_2__.Animation(anim, this.artboard, this.runtime, playing);\n                        // Display the first frame of the specified animation\n                        newAnimation.advance(0);\n                        newAnimation.apply(1.0);\n                        this.animations.push(newAnimation);\n                    }\n                    else {\n                        // Try to create a new state machine instance\n                        var sm = this.artboard.stateMachineByName(animatables[i]);\n                        if (sm) {\n                            var newStateMachine = new StateMachine(sm, this.runtime, playing, this.artboard);\n                            this.stateMachines.push(newStateMachine);\n                        }\n                    }\n                }\n            }\n        }\n        // Fire play/paused events for animations\n        if (fireEvent) {\n            if (playing) {\n                this.eventManager.fire({\n                    type: EventType.Play,\n                    data: this.playing,\n                });\n            }\n            else {\n                this.eventManager.fire({\n                    type: EventType.Pause,\n                    data: this.paused,\n                });\n            }\n        }\n        return playing ? this.playing : this.paused;\n    };\n    /**\n     * Adds linear animations by their names.\n     * @param animatables the name(s) of animations to add\n     * @param playing whether animations should play on instantiation\n     */\n    Animator.prototype.initLinearAnimations = function (animatables, playing) {\n        // Play/pause already instanced items, or create new instances\n        // This validation is kept to maintain compatibility with current behavior.\n        // But given that it this is called during artboard initialization\n        // it should probably be safe to remove.\n        var instancedAnimationNames = this.animations.map(function (a) { return a.name; });\n        for (var i = 0; i < animatables.length; i++) {\n            var aIndex = instancedAnimationNames.indexOf(animatables[i]);\n            if (aIndex >= 0) {\n                this.animations[aIndex].playing = playing;\n            }\n            else {\n                // Try to create a new animation instance\n                var anim = this.artboard.animationByName(animatables[i]);\n                if (anim) {\n                    var newAnimation = new _animation__WEBPACK_IMPORTED_MODULE_2__.Animation(anim, this.artboard, this.runtime, playing);\n                    // Display the first frame of the specified animation\n                    newAnimation.advance(0);\n                    newAnimation.apply(1.0);\n                    this.animations.push(newAnimation);\n                }\n                else {\n                    console.error(\"Animation with name \".concat(animatables[i], \" not found.\"));\n                }\n            }\n        }\n    };\n    /**\n     * Adds state machines by their names.\n     * @param animatables the name(s) of state machines to add\n     * @param playing whether state machines should play on instantiation\n     */\n    Animator.prototype.initStateMachines = function (animatables, playing) {\n        // Play/pause already instanced items, or create new instances\n        // This validation is kept to maintain compatibility with current behavior.\n        // But given that it this is called during artboard initialization\n        // it should probably be safe to remove.\n        var instancedStateMachineNames = this.stateMachines.map(function (a) { return a.name; });\n        for (var i = 0; i < animatables.length; i++) {\n            var aIndex = instancedStateMachineNames.indexOf(animatables[i]);\n            if (aIndex >= 0) {\n                this.stateMachines[aIndex].playing = playing;\n            }\n            else {\n                // Try to create a new state machine instance\n                var sm = this.artboard.stateMachineByName(animatables[i]);\n                if (sm) {\n                    var newStateMachine = new StateMachine(sm, this.runtime, playing, this.artboard);\n                    this.stateMachines.push(newStateMachine);\n                    if (!playing) {\n                        newStateMachine.advanceAndApply(0);\n                    }\n                }\n                else {\n                    console.warn(\"State Machine with name \".concat(animatables[i], \" not found.\"));\n                    // In order to maintain compatibility with current behavior, if a state machine is not found\n                    // we look for an animation with the same name\n                    this.initLinearAnimations([animatables[i]], playing);\n                }\n            }\n        }\n    };\n    /**\n     * Play the named animations/state machines\n     * @param animatables the names of the animations/machines to play; plays all if empty\n     * @returns a list of the playing items\n     */\n    Animator.prototype.play = function (animatables) {\n        return this.add(animatables, true);\n    };\n    /**\n     * Pauses named animations and state machines, or everything if nothing is\n     * specified\n     * @param animatables names of the animations and state machines to pause\n     * @returns a list of names of the animations and state machines paused\n     */\n    Animator.prototype.pause = function (animatables) {\n        return this.add(animatables, false);\n    };\n    /**\n     * Set time of named animations\n     * @param animations names of the animations to scrub\n     * @param value time scrub value, a floating point number to which the playhead is jumped\n     * @returns a list of names of the animations that were scrubbed\n     */\n    Animator.prototype.scrub = function (animatables, value) {\n        var forScrubbing = this.animations.filter(function (a) {\n            return animatables.includes(a.name);\n        });\n        forScrubbing.forEach(function (a) { return (a.scrubTo = value); });\n        return forScrubbing.map(function (a) { return a.name; });\n    };\n    Object.defineProperty(Animator.prototype, \"playing\", {\n        /**\n         * Returns a list of names of all animations and state machines currently\n         * playing\n         */\n        get: function () {\n            return this.animations\n                .filter(function (a) { return a.playing; })\n                .map(function (a) { return a.name; })\n                .concat(this.stateMachines.filter(function (m) { return m.playing; }).map(function (m) { return m.name; }));\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Animator.prototype, \"paused\", {\n        /**\n         * Returns a list of names of all animations and state machines currently\n         * paused\n         */\n        get: function () {\n            return this.animations\n                .filter(function (a) { return !a.playing; })\n                .map(function (a) { return a.name; })\n                .concat(this.stateMachines.filter(function (m) { return !m.playing; }).map(function (m) { return m.name; }));\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Stops and removes all named animations and state machines\n     * @param animatables animations and state machines to remove\n     * @returns a list of names of removed items\n     */\n    Animator.prototype.stop = function (animatables) {\n        var _this = this;\n        animatables = mapToStringArray(animatables);\n        // If nothing's specified, wipe them out, all of them\n        var removedNames = [];\n        // Stop everything\n        if (animatables.length === 0) {\n            removedNames = this.animations\n                .map(function (a) { return a.name; })\n                .concat(this.stateMachines.map(function (m) { return m.name; }));\n            // Clean up before emptying the arrays\n            this.animations.forEach(function (a) { return a.cleanup(); });\n            this.stateMachines.forEach(function (m) { return m.cleanup(); });\n            // Empty out the arrays\n            this.animations.splice(0, this.animations.length);\n            this.stateMachines.splice(0, this.stateMachines.length);\n        }\n        else {\n            // Remove only the named animations/state machines\n            var animationsToRemove = this.animations.filter(function (a) {\n                return animatables.includes(a.name);\n            });\n            animationsToRemove.forEach(function (a) {\n                a.cleanup();\n                _this.animations.splice(_this.animations.indexOf(a), 1);\n            });\n            var machinesToRemove = this.stateMachines.filter(function (m) {\n                return animatables.includes(m.name);\n            });\n            machinesToRemove.forEach(function (m) {\n                m.cleanup();\n                _this.stateMachines.splice(_this.stateMachines.indexOf(m), 1);\n            });\n            removedNames = animationsToRemove\n                .map(function (a) { return a.name; })\n                .concat(machinesToRemove.map(function (m) { return m.name; }));\n        }\n        this.eventManager.fire({\n            type: EventType.Stop,\n            data: removedNames,\n        });\n        // Return the list of animations removed\n        return removedNames;\n    };\n    Object.defineProperty(Animator.prototype, \"isPlaying\", {\n        /**\n         * Returns true if at least one animation is active\n         */\n        get: function () {\n            return (this.animations.reduce(function (acc, curr) { return acc || curr.playing; }, false) ||\n                this.stateMachines.reduce(function (acc, curr) { return acc || curr.playing; }, false));\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Animator.prototype, \"isPaused\", {\n        /**\n         * Returns true if all animations are paused and there's at least one animation\n         */\n        get: function () {\n            return (!this.isPlaying &&\n                (this.animations.length > 0 || this.stateMachines.length > 0));\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Animator.prototype, \"isStopped\", {\n        /**\n         * Returns true if there are no playing or paused animations/state machines\n         */\n        get: function () {\n            return this.animations.length === 0 && this.stateMachines.length === 0;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * If there are no animations or state machines, add the first one found\n     * @returns the name of the animation or state machine instanced\n     */\n    Animator.prototype.atLeastOne = function (playing, fireEvent) {\n        if (fireEvent === void 0) { fireEvent = true; }\n        var instancedName;\n        if (this.animations.length === 0 && this.stateMachines.length === 0) {\n            if (this.artboard.animationCount() > 0) {\n                // Add the first animation\n                this.add([(instancedName = this.artboard.animationByIndex(0).name)], playing, fireEvent);\n            }\n            else if (this.artboard.stateMachineCount() > 0) {\n                // Add the first state machine\n                this.add([(instancedName = this.artboard.stateMachineByIndex(0).name)], playing, fireEvent);\n            }\n        }\n        return instancedName;\n    };\n    /**\n     * Checks if any animations have looped and if so, fire the appropriate event\n     */\n    Animator.prototype.handleLooping = function () {\n        for (var _i = 0, _a = this.animations.filter(function (a) { return a.playing; }); _i < _a.length; _i++) {\n            var animation = _a[_i];\n            // Emit if the animation looped\n            if (animation.loopValue === 0 && animation.loopCount) {\n                animation.loopCount = 0;\n                // This is a one-shot; if it has ended, delete the instance\n                this.stop(animation.name);\n            }\n            else if (animation.loopValue === 1 && animation.loopCount) {\n                this.eventManager.fire({\n                    type: EventType.Loop,\n                    data: { animation: animation.name, type: LoopType.Loop },\n                });\n                animation.loopCount = 0;\n            }\n            // Wasm indicates a loop at each time the animation\n            // changes direction, so a full loop/lap occurs every\n            // two loop counts\n            else if (animation.loopValue === 2 && animation.loopCount > 1) {\n                this.eventManager.fire({\n                    type: EventType.Loop,\n                    data: { animation: animation.name, type: LoopType.PingPong },\n                });\n                animation.loopCount = 0;\n            }\n        }\n    };\n    /**\n     * Checks if states have changed in state machines and fires a statechange\n     * event\n     */\n    Animator.prototype.handleStateChanges = function () {\n        var statesChanged = [];\n        for (var _i = 0, _a = this.stateMachines.filter(function (sm) { return sm.playing; }); _i < _a.length; _i++) {\n            var stateMachine = _a[_i];\n            statesChanged.push.apply(statesChanged, stateMachine.statesChanged);\n        }\n        if (statesChanged.length > 0) {\n            this.eventManager.fire({\n                type: EventType.StateChange,\n                data: statesChanged,\n            });\n        }\n    };\n    Animator.prototype.handleAdvancing = function (time) {\n        this.eventManager.fire({\n            type: EventType.Advance,\n            data: time,\n        });\n    };\n    return Animator;\n}());\n// #endregion\n// #region events\n/**\n * Supported event types triggered in Rive\n */\nvar EventType;\n(function (EventType) {\n    EventType[\"Load\"] = \"load\";\n    EventType[\"LoadError\"] = \"loaderror\";\n    EventType[\"Play\"] = \"play\";\n    EventType[\"Pause\"] = \"pause\";\n    EventType[\"Stop\"] = \"stop\";\n    EventType[\"Loop\"] = \"loop\";\n    EventType[\"Draw\"] = \"draw\";\n    EventType[\"Advance\"] = \"advance\";\n    EventType[\"StateChange\"] = \"statechange\";\n    EventType[\"RiveEvent\"] = \"riveevent\";\n    EventType[\"AudioStatusChange\"] = \"audiostatuschange\";\n})(EventType || (EventType = {}));\n/**\n * Looping types: one-shot, loop, and ping-pong\n */\nvar LoopType;\n(function (LoopType) {\n    LoopType[\"OneShot\"] = \"oneshot\";\n    LoopType[\"Loop\"] = \"loop\";\n    LoopType[\"PingPong\"] = \"pingpong\";\n})(LoopType || (LoopType = {}));\n// Manages Rive events and listeners\nvar EventManager = /** @class */ (function () {\n    function EventManager(listeners) {\n        if (listeners === void 0) { listeners = []; }\n        this.listeners = listeners;\n    }\n    // Gets listeners of specified type\n    EventManager.prototype.getListeners = function (type) {\n        return this.listeners.filter(function (e) { return e.type === type; });\n    };\n    // Adds a listener\n    EventManager.prototype.add = function (listener) {\n        if (!this.listeners.includes(listener)) {\n            this.listeners.push(listener);\n        }\n    };\n    /**\n     * Removes a listener\n     * @param listener the listener with the callback to be removed\n     */\n    EventManager.prototype.remove = function (listener) {\n        // We can't simply look for the listener as it'll be a different instance to\n        // one originally subscribed. Find all the listeners of the right type and\n        // then check their callbacks which should match.\n        for (var i = 0; i < this.listeners.length; i++) {\n            var currentListener = this.listeners[i];\n            if (currentListener.type === listener.type) {\n                if (currentListener.callback === listener.callback) {\n                    this.listeners.splice(i, 1);\n                    break;\n                }\n            }\n        }\n    };\n    /**\n     * Clears all listeners of specified type, or every listener if no type is\n     * specified\n     * @param type the type of listeners to clear, or all listeners if not\n     * specified\n     */\n    EventManager.prototype.removeAll = function (type) {\n        var _this = this;\n        if (!type) {\n            this.listeners.splice(0, this.listeners.length);\n        }\n        else {\n            this.listeners\n                .filter(function (l) { return l.type === type; })\n                .forEach(function (l) { return _this.remove(l); });\n        }\n    };\n    // Fires an event\n    EventManager.prototype.fire = function (event) {\n        var eventListeners = this.getListeners(event.type);\n        eventListeners.forEach(function (listener) { return listener.callback(event); });\n    };\n    return EventManager;\n}());\n// Manages a queue of tasks\nvar TaskQueueManager = /** @class */ (function () {\n    function TaskQueueManager(eventManager) {\n        this.eventManager = eventManager;\n        this.queue = [];\n    }\n    // Adds a task top the queue\n    TaskQueueManager.prototype.add = function (task) {\n        this.queue.push(task);\n    };\n    // Processes all tasks in the queue\n    TaskQueueManager.prototype.process = function () {\n        while (this.queue.length > 0) {\n            var task = this.queue.shift();\n            if (task === null || task === void 0 ? void 0 : task.action) {\n                task.action();\n            }\n            if (task === null || task === void 0 ? void 0 : task.event) {\n                this.eventManager.fire(task.event);\n            }\n        }\n    };\n    return TaskQueueManager;\n}());\n// #endregion\n// #region Audio\nvar SystemAudioStatus;\n(function (SystemAudioStatus) {\n    SystemAudioStatus[SystemAudioStatus[\"AVAILABLE\"] = 0] = \"AVAILABLE\";\n    SystemAudioStatus[SystemAudioStatus[\"UNAVAILABLE\"] = 1] = \"UNAVAILABLE\";\n})(SystemAudioStatus || (SystemAudioStatus = {}));\n// Class to handle audio context availability and status changes\nvar AudioManager = /** @class */ (function (_super) {\n    __extends(AudioManager, _super);\n    function AudioManager() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this._started = false;\n        _this._enabled = false;\n        _this._status = SystemAudioStatus.UNAVAILABLE;\n        return _this;\n    }\n    AudioManager.prototype.delay = function (time) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, new Promise(function (resolve) { return setTimeout(resolve, time); })];\n            });\n        });\n    };\n    AudioManager.prototype.timeout = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, new Promise(function (_, reject) { return setTimeout(reject, 50); })];\n            });\n        });\n    };\n    // Alerts animations on status changes and removes the listeners to avoid alerting twice.\n    AudioManager.prototype.reportToListeners = function () {\n        this.fire({ type: EventType.AudioStatusChange });\n        this.removeAll();\n    };\n    /**\n     * The audio context has been resolved.\n     * Alert any listeners that we can now play audio.\n     * Rive will now play audio at the configured volume.\n     */\n    AudioManager.prototype.enableAudio = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                if (!this._enabled) {\n                    this._enabled = true;\n                    this._status = SystemAudioStatus.AVAILABLE;\n                    this.reportToListeners();\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    /**\n     * Check if we are able to play audio.\n     *\n     * We currently check the audio context, when resume() returns before a timeout we know that the\n     * audio context is running and we can enable audio.\n     */\n    AudioManager.prototype.testAudio = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(this._status === SystemAudioStatus.UNAVAILABLE &&\n                            this._audioContext !== null)) return [3 /*break*/, 4];\n                        _b.label = 1;\n                    case 1:\n                        _b.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, Promise.race([this._audioContext.resume(), this.timeout()])];\n                    case 2:\n                        _b.sent();\n                        this.enableAudio();\n                        return [3 /*break*/, 4];\n                    case 3:\n                        _a = _b.sent();\n                        return [3 /*break*/, 4];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Establish audio for use with rive.\n     * We both test if we can use audio intermittently and listen for user interaction.\n     * The aim is to enable audio playback as soon as the browser allows this.\n     */\n    AudioManager.prototype._establishAudio = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!!this._started) return [3 /*break*/, 5];\n                        this._started = true;\n                        if (!(typeof window == \"undefined\")) return [3 /*break*/, 1];\n                        this.enableAudio();\n                        return [3 /*break*/, 5];\n                    case 1:\n                        this._audioContext = new AudioContext();\n                        this.listenForUserAction();\n                        _a.label = 2;\n                    case 2:\n                        if (!(this._status === SystemAudioStatus.UNAVAILABLE)) return [3 /*break*/, 5];\n                        return [4 /*yield*/, this.testAudio()];\n                    case 3:\n                        _a.sent();\n                        return [4 /*yield*/, this.delay(1000)];\n                    case 4:\n                        _a.sent();\n                        return [3 /*break*/, 2];\n                    case 5: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AudioManager.prototype.listenForUserAction = function () {\n        var _this = this;\n        // NOTE: AudioContexts are ready immediately if requested in a ui callback\n        // we *could* re request one in this listener.\n        var _clickListener = function () { return __awaiter(_this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                // note this has \"better\" results than calling `await this.testAudio()`\n                // as we force audio to be enabled in the current thread, rather than chancing\n                // the thread to be passed over for some other async context\n                this.enableAudio();\n                return [2 /*return*/];\n            });\n        }); };\n        // NOTE: we should test this on mobile/pads\n        document.addEventListener(\"pointerdown\", _clickListener, {\n            once: true,\n        });\n    };\n    /**\n     * Establish the audio context for rive, this lets rive know that we can play audio.\n     */\n    AudioManager.prototype.establishAudio = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                this._establishAudio();\n                return [2 /*return*/];\n            });\n        });\n    };\n    Object.defineProperty(AudioManager.prototype, \"systemVolume\", {\n        get: function () {\n            if (this._status === SystemAudioStatus.UNAVAILABLE) {\n                // We do an immediate test to avoid depending on the delay of the running test\n                this.testAudio();\n                return 0;\n            }\n            return 1;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(AudioManager.prototype, \"status\", {\n        get: function () {\n            return this._status;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return AudioManager;\n}(EventManager));\nvar audioManager = new AudioManager();\nvar FakeResizeObserver = /** @class */ (function () {\n    function FakeResizeObserver() {\n    }\n    FakeResizeObserver.prototype.observe = function () { };\n    FakeResizeObserver.prototype.unobserve = function () { };\n    FakeResizeObserver.prototype.disconnect = function () { };\n    return FakeResizeObserver;\n}());\nvar MyResizeObserver = globalThis.ResizeObserver || FakeResizeObserver;\n/**\n * This class takes care of any observers that will be attached to an animation.\n * It should be treated as a singleton because observers are much more performant\n * when used for observing multiple elements by a single instance.\n */\nvar ObjectObservers = /** @class */ (function () {\n    function ObjectObservers() {\n        var _this = this;\n        this._elementsMap = new Map();\n        /**\n         * Resize observers trigger both when the element changes its size and also when the\n         * element is added or removed from the document.\n         */\n        this._onObservedEntry = function (entry) {\n            var observed = _this._elementsMap.get(entry.target);\n            if (observed !== null) {\n                observed.onResize(entry.target.clientWidth == 0 || entry.target.clientHeight == 0);\n            }\n            else {\n                _this._resizeObserver.unobserve(entry.target);\n            }\n        };\n        this._onObserved = function (entries) {\n            entries.forEach(_this._onObservedEntry);\n        };\n        this._resizeObserver = new MyResizeObserver(this._onObserved);\n    }\n    // Adds an observable element\n    ObjectObservers.prototype.add = function (element, onResize) {\n        var observed = {\n            onResize: onResize,\n            element: element,\n        };\n        this._elementsMap.set(element, observed);\n        this._resizeObserver.observe(element);\n        return observed;\n    };\n    // Removes an observable element\n    ObjectObservers.prototype.remove = function (observed) {\n        this._resizeObserver.unobserve(observed.element);\n        this._elementsMap.delete(observed.element);\n    };\n    return ObjectObservers;\n}());\nvar observers = new ObjectObservers();\nvar RiveFile = /** @class */ (function () {\n    function RiveFile(params) {\n        // Allow the runtime to automatically load assets hosted in Rive's runtime.\n        this.enableRiveAssetCDN = true;\n        this.referenceCount = 0;\n        this.destroyed = false;\n        this.src = params.src;\n        this.buffer = params.buffer;\n        if (params.assetLoader)\n            this.assetLoader = params.assetLoader;\n        this.enableRiveAssetCDN =\n            typeof params.enableRiveAssetCDN == \"boolean\"\n                ? params.enableRiveAssetCDN\n                : true;\n        // New event management system\n        this.eventManager = new EventManager();\n        if (params.onLoad)\n            this.on(EventType.Load, params.onLoad);\n        if (params.onLoadError)\n            this.on(EventType.LoadError, params.onLoadError);\n    }\n    RiveFile.prototype.initData = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, loader, loaderWrapper, _b;\n            var _c;\n            return __generator(this, function (_d) {\n                switch (_d.label) {\n                    case 0:\n                        if (!this.src) return [3 /*break*/, 2];\n                        _a = this;\n                        return [4 /*yield*/, loadRiveFile(this.src)];\n                    case 1:\n                        _a.buffer = _d.sent();\n                        _d.label = 2;\n                    case 2:\n                        if (this.destroyed) {\n                            return [2 /*return*/];\n                        }\n                        if (this.assetLoader) {\n                            loaderWrapper = new _utils__WEBPACK_IMPORTED_MODULE_3__.CustomFileAssetLoaderWrapper(this.runtime, this.assetLoader);\n                            loader = loaderWrapper.assetLoader;\n                        }\n                        // Load the Rive file\n                        _b = this;\n                        return [4 /*yield*/, this.runtime.load(new Uint8Array(this.buffer), loader, this.enableRiveAssetCDN)];\n                    case 3:\n                        // Load the Rive file\n                        _b.file = _d.sent();\n                        if (this.destroyed) {\n                            (_c = this.file) === null || _c === void 0 ? void 0 : _c.delete();\n                            this.file = null;\n                            return [2 /*return*/];\n                        }\n                        if (this.file !== null) {\n                            this.eventManager.fire({\n                                type: EventType.Load,\n                                data: this,\n                            });\n                        }\n                        else {\n                            this.fireLoadError(RiveFile.fileLoadErrorMessage);\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    RiveFile.prototype.init = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, error_1;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        // If no source file url specified, it's a bust\n                        if (!this.src && !this.buffer) {\n                            this.fireLoadError(RiveFile.missingErrorMessage);\n                            return [2 /*return*/];\n                        }\n                        _b.label = 1;\n                    case 1:\n                        _b.trys.push([1, 4, , 5]);\n                        _a = this;\n                        return [4 /*yield*/, RuntimeLoader.awaitInstance()];\n                    case 2:\n                        _a.runtime = _b.sent();\n                        if (this.destroyed) {\n                            return [2 /*return*/];\n                        }\n                        return [4 /*yield*/, this.initData()];\n                    case 3:\n                        _b.sent();\n                        return [3 /*break*/, 5];\n                    case 4:\n                        error_1 = _b.sent();\n                        this.fireLoadError(error_1 instanceof Error ? error_1.message : RiveFile.fileLoadErrorMessage);\n                        return [3 /*break*/, 5];\n                    case 5: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    RiveFile.prototype.fireLoadError = function (message) {\n        this.eventManager.fire({\n            type: EventType.LoadError,\n            data: message,\n        });\n        throw new Error(message);\n    };\n    /**\n     * Subscribe to Rive-generated events\n     * @param type the type of event to subscribe to\n     * @param callback callback to fire when the event occurs\n     */\n    RiveFile.prototype.on = function (type, callback) {\n        this.eventManager.add({\n            type: type,\n            callback: callback,\n        });\n    };\n    /**\n     * Unsubscribes from a Rive-generated event\n     * @param type the type of event to unsubscribe from\n     * @param callback the callback to unsubscribe\n     */\n    RiveFile.prototype.off = function (type, callback) {\n        this.eventManager.remove({\n            type: type,\n            callback: callback,\n        });\n    };\n    RiveFile.prototype.cleanup = function () {\n        var _a;\n        this.referenceCount -= 1;\n        if (this.referenceCount <= 0) {\n            this.removeAllRiveEventListeners();\n            (_a = this.file) === null || _a === void 0 ? void 0 : _a.delete();\n            this.file = null;\n            this.destroyed = true;\n        }\n    };\n    /**\n     * Unsubscribes all Rive listeners from an event type, or everything if no type is\n     * given\n     * @param type the type of event to unsubscribe from, or all types if\n     * undefined\n     */\n    RiveFile.prototype.removeAllRiveEventListeners = function (type) {\n        this.eventManager.removeAll(type);\n    };\n    RiveFile.prototype.getInstance = function () {\n        if (this.file !== null) {\n            this.referenceCount += 1;\n            return this.file;\n        }\n    };\n    RiveFile.prototype.destroyIfUnused = function () {\n        if (this.referenceCount <= 0) {\n            this.cleanup();\n        }\n    };\n    RiveFile.prototype.getArtboard = function (name) {\n        var nativeArtboard = this.file.artboardByName(name);\n        if (nativeArtboard != null) {\n            return new Artboard(nativeArtboard);\n        }\n        return null;\n    };\n    // Error message for missing source or buffer\n    RiveFile.missingErrorMessage = \"Rive source file or data buffer required\";\n    // Error message for file load error\n    RiveFile.fileLoadErrorMessage = \"The file failed to load\";\n    return RiveFile;\n}());\n\nvar Rive = /** @class */ (function () {\n    function Rive(params) {\n        var _this = this;\n        var _a;\n        // Tracks if a Rive file is loaded\n        this.loaded = false;\n        // Tracks if a Rive file is destroyed\n        this.destroyed = false;\n        // Reference of an object that handles any observers for the animation\n        this._observed = null;\n        /**\n         * Tracks if a Rive file is loaded; we need this in addition to loaded as some\n         * commands (e.g. contents) can be called as soon as the file is loaded.\n         * However, playback commands need to be queued and run in order once initial\n         * animations and autoplay has been sorted out. This applies to play, pause,\n         * and start.\n         */\n        this.readyForPlaying = false;\n        // Runtime artboard\n        this.artboard = null;\n        // place to clear up event listeners\n        this.eventCleanup = null;\n        this.shouldDisableRiveListeners = false;\n        this.automaticallyHandleEvents = false;\n        // Allow the runtime to automatically load assets hosted in Rive's runtime.\n        this.enableRiveAssetCDN = true;\n        // Keep a local value of the set volume to update it asynchronously\n        this._volume = 1;\n        // Keep a local value of the set width to update it asynchronously\n        this._artboardWidth = undefined;\n        // Keep a local value of the set height to update it asynchronously\n        this._artboardHeight = undefined;\n        // Keep a local value of the device pixel ratio used in rendering and canvas/artboard resizing\n        this._devicePixelRatioUsed = 1;\n        // Whether the canvas element's size is 0\n        this._hasZeroSize = false;\n        // Audio event listener\n        this._audioEventListener = null;\n        // draw method bound to the class\n        this._boundDraw = null;\n        this._viewModelInstance = null;\n        this._dataEnums = null;\n        // Durations to generate a frame for the last second. Used for performance profiling.\n        this.durations = [];\n        this.frameTimes = [];\n        this.frameCount = 0;\n        this.isTouchScrollEnabled = false;\n        this.onCanvasResize = function (hasZeroSize) {\n            var toggledDisplay = _this._hasZeroSize !== hasZeroSize;\n            _this._hasZeroSize = hasZeroSize;\n            if (!hasZeroSize) {\n                if (toggledDisplay) {\n                    _this.resizeDrawingSurfaceToCanvas();\n                }\n            }\n            else if (!_this._layout.maxX || !_this._layout.maxY) {\n                _this.resizeToCanvas();\n            }\n        };\n        /**\n         * Used be draw to track when a second of active rendering time has passed.\n         * Used for debugging purposes\n         */\n        this.renderSecondTimer = 0;\n        this._boundDraw = this.draw.bind(this);\n        this.canvas = params.canvas;\n        if (params.canvas.constructor === HTMLCanvasElement) {\n            this._observed = observers.add(this.canvas, this.onCanvasResize);\n        }\n        this.src = params.src;\n        this.buffer = params.buffer;\n        this.riveFile = params.riveFile;\n        this.layout = (_a = params.layout) !== null && _a !== void 0 ? _a : new Layout();\n        this.shouldDisableRiveListeners = !!params.shouldDisableRiveListeners;\n        this.isTouchScrollEnabled = !!params.isTouchScrollEnabled;\n        this.automaticallyHandleEvents = !!params.automaticallyHandleEvents;\n        this.enableRiveAssetCDN =\n            params.enableRiveAssetCDN === undefined\n                ? true\n                : params.enableRiveAssetCDN;\n        // New event management system\n        this.eventManager = new EventManager();\n        if (params.onLoad)\n            this.on(EventType.Load, params.onLoad);\n        if (params.onLoadError)\n            this.on(EventType.LoadError, params.onLoadError);\n        if (params.onPlay)\n            this.on(EventType.Play, params.onPlay);\n        if (params.onPause)\n            this.on(EventType.Pause, params.onPause);\n        if (params.onStop)\n            this.on(EventType.Stop, params.onStop);\n        if (params.onLoop)\n            this.on(EventType.Loop, params.onLoop);\n        if (params.onStateChange)\n            this.on(EventType.StateChange, params.onStateChange);\n        if (params.onAdvance)\n            this.on(EventType.Advance, params.onAdvance);\n        /**\n         * @deprecated Use camelCase'd versions instead.\n         */\n        if (params.onload && !params.onLoad)\n            this.on(EventType.Load, params.onload);\n        if (params.onloaderror && !params.onLoadError)\n            this.on(EventType.LoadError, params.onloaderror);\n        if (params.onplay && !params.onPlay)\n            this.on(EventType.Play, params.onplay);\n        if (params.onpause && !params.onPause)\n            this.on(EventType.Pause, params.onpause);\n        if (params.onstop && !params.onStop)\n            this.on(EventType.Stop, params.onstop);\n        if (params.onloop && !params.onLoop)\n            this.on(EventType.Loop, params.onloop);\n        if (params.onstatechange && !params.onStateChange)\n            this.on(EventType.StateChange, params.onstatechange);\n        /**\n         * Asset loading\n         */\n        if (params.assetLoader)\n            this.assetLoader = params.assetLoader;\n        // Hook up the task queue\n        this.taskQueue = new TaskQueueManager(this.eventManager);\n        this.init({\n            src: this.src,\n            buffer: this.buffer,\n            riveFile: this.riveFile,\n            autoplay: params.autoplay,\n            autoBind: params.autoBind,\n            animations: params.animations,\n            stateMachines: params.stateMachines,\n            artboard: params.artboard,\n            useOffscreenRenderer: params.useOffscreenRenderer,\n        });\n    }\n    Object.defineProperty(Rive.prototype, \"viewModelCount\", {\n        get: function () {\n            return this.file.viewModelCount();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    // Alternative constructor to build a Rive instance from an interface/object\n    Rive.new = function (params) {\n        console.warn(\"This function is deprecated: please use `new Rive({})` instead\");\n        return new Rive(params);\n    };\n    // Event handler for when audio context becomes available\n    Rive.prototype.onSystemAudioChanged = function () {\n        this.volume = this._volume;\n    };\n    // Initializes the Rive object either from constructor or load()\n    Rive.prototype.init = function (_a) {\n        var _this = this;\n        var src = _a.src, buffer = _a.buffer, riveFile = _a.riveFile, animations = _a.animations, stateMachines = _a.stateMachines, artboard = _a.artboard, _b = _a.autoplay, autoplay = _b === void 0 ? false : _b, _c = _a.useOffscreenRenderer, useOffscreenRenderer = _c === void 0 ? false : _c, _d = _a.autoBind, autoBind = _d === void 0 ? false : _d;\n        if (this.destroyed) {\n            return;\n        }\n        this.src = src;\n        this.buffer = buffer;\n        this.riveFile = riveFile;\n        // If no source file url specified, it's a bust\n        if (!this.src && !this.buffer && !this.riveFile) {\n            throw new RiveError(Rive.missingErrorMessage);\n        }\n        // List of animations that should be initialized.\n        var startingAnimationNames = mapToStringArray(animations);\n        // List of state machines that should be initialized\n        var startingStateMachineNames = mapToStringArray(stateMachines);\n        // Ensure loaded is marked as false if loading new file\n        this.loaded = false;\n        this.readyForPlaying = false;\n        // Ensure the runtime is loaded\n        RuntimeLoader.awaitInstance()\n            .then(function (runtime) {\n            if (_this.destroyed) {\n                return;\n            }\n            _this.runtime = runtime;\n            _this.removeRiveListeners();\n            _this.deleteRiveRenderer();\n            // Get the canvas where you want to render the animation and create a renderer\n            _this.renderer = _this.runtime.makeRenderer(_this.canvas, useOffscreenRenderer);\n            // Initial size adjustment based on devicePixelRatio if no width/height are\n            // specified explicitly\n            if (!(_this.canvas.width || _this.canvas.height)) {\n                _this.resizeDrawingSurfaceToCanvas();\n            }\n            // Load Rive data from a source uri or a data buffer\n            _this.initData(artboard, startingAnimationNames, startingStateMachineNames, autoplay, autoBind)\n                .then(function (hasInitialized) {\n                if (hasInitialized) {\n                    return _this.setupRiveListeners();\n                }\n            })\n                .catch(function (e) {\n                console.error(e);\n            });\n        })\n            .catch(function (e) {\n            console.error(e);\n        });\n    };\n    /**\n     * Setup Rive Listeners on the canvas\n     * @param riveListenerOptions - Enables TouchEvent events on the canvas. Set to true to allow\n     * touch scrolling on the canvas element on touch-enabled devices\n     * i.e. { isTouchScrollEnabled: true }\n     */\n    Rive.prototype.setupRiveListeners = function (riveListenerOptions) {\n        var _this = this;\n        if (this.eventCleanup) {\n            this.eventCleanup();\n        }\n        if (!this.shouldDisableRiveListeners) {\n            var activeStateMachines = (this.animator.stateMachines || [])\n                .filter(function (sm) { return sm.playing && _this.runtime.hasListeners(sm.instance); })\n                .map(function (sm) { return sm.instance; });\n            var touchScrollEnabledOption = this.isTouchScrollEnabled;\n            if (riveListenerOptions &&\n                \"isTouchScrollEnabled\" in riveListenerOptions) {\n                touchScrollEnabledOption = riveListenerOptions.isTouchScrollEnabled;\n            }\n            this.eventCleanup = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.registerTouchInteractions)({\n                canvas: this.canvas,\n                artboard: this.artboard,\n                stateMachines: activeStateMachines,\n                renderer: this.renderer,\n                rive: this.runtime,\n                fit: this._layout.runtimeFit(this.runtime),\n                alignment: this._layout.runtimeAlignment(this.runtime),\n                isTouchScrollEnabled: touchScrollEnabledOption,\n                layoutScaleFactor: this._layout.layoutScaleFactor,\n            });\n        }\n    };\n    /**\n     * Remove Rive Listeners setup on the canvas\n     */\n    Rive.prototype.removeRiveListeners = function () {\n        if (this.eventCleanup) {\n            this.eventCleanup();\n            this.eventCleanup = null;\n        }\n    };\n    /**\n     * If the instance has audio and the system audio is not ready\n     * we hook the instance to the audio manager\n     */\n    Rive.prototype.initializeAudio = function () {\n        var _this = this;\n        var _a;\n        // Initialize audio if needed\n        if (audioManager.status == SystemAudioStatus.UNAVAILABLE) {\n            if (((_a = this.artboard) === null || _a === void 0 ? void 0 : _a.hasAudio) && this._audioEventListener === null) {\n                this._audioEventListener = {\n                    type: EventType.AudioStatusChange,\n                    callback: function () { return _this.onSystemAudioChanged(); },\n                };\n                audioManager.add(this._audioEventListener);\n                audioManager.establishAudio();\n            }\n        }\n    };\n    Rive.prototype.initArtboardSize = function () {\n        if (!this.artboard)\n            return;\n        // Use preset values if they are not undefined\n        this._artboardWidth = this.artboard.width =\n            this._artboardWidth || this.artboard.width;\n        this._artboardHeight = this.artboard.height =\n            this._artboardHeight || this.artboard.height;\n    };\n    // Initializes runtime with Rive data and preps for playing.\n    // Returns true for successful initialization.\n    Rive.prototype.initData = function (artboardName, animationNames, stateMachineNames, autoplay, autoBind) {\n        return __awaiter(this, void 0, void 0, function () {\n            var riveFile, error_2, msg;\n            var _a;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        _b.trys.push([0, 3, , 4]);\n                        if (!(this.riveFile == null)) return [3 /*break*/, 2];\n                        riveFile = new RiveFile({\n                            src: this.src,\n                            buffer: this.buffer,\n                            enableRiveAssetCDN: this.enableRiveAssetCDN,\n                            assetLoader: this.assetLoader,\n                        });\n                        this.riveFile = riveFile;\n                        return [4 /*yield*/, riveFile.init()];\n                    case 1:\n                        _b.sent();\n                        if (this.destroyed) {\n                            // In the very unlikely scenario where the rive file created by this Rive is shared by\n                            // another rive file, we only want to destroy it if this file is the only owner.\n                            riveFile.destroyIfUnused();\n                            return [2 /*return*/, false];\n                        }\n                        _b.label = 2;\n                    case 2:\n                        this.file = this.riveFile.getInstance();\n                        // Initialize and draw frame\n                        this.initArtboard(artboardName, animationNames, stateMachineNames, autoplay, autoBind);\n                        // Initialize the artboard size\n                        this.initArtboardSize();\n                        // Check for audio\n                        this.initializeAudio();\n                        // Everything's set up, emit a load event\n                        this.loaded = true;\n                        this.eventManager.fire({\n                            type: EventType.Load,\n                            data: (_a = this.src) !== null && _a !== void 0 ? _a : \"buffer\",\n                        });\n                        // Flag ready for playback commands and clear the task queue; this order\n                        // is important or it may infinitely recurse\n                        this.readyForPlaying = true;\n                        this.taskQueue.process();\n                        this.drawFrame();\n                        return [2 /*return*/, true];\n                    case 3:\n                        error_2 = _b.sent();\n                        msg = resolveErrorMessage(error_2);\n                        console.warn(msg);\n                        this.eventManager.fire({ type: EventType.LoadError, data: msg });\n                        return [2 /*return*/, Promise.reject(msg)];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    // Initialize for playback\n    Rive.prototype.initArtboard = function (artboardName, animationNames, stateMachineNames, autoplay, autoBind) {\n        if (!this.file) {\n            return;\n        }\n        // Fetch the artboard\n        var rootArtboard = artboardName\n            ? this.file.artboardByName(artboardName)\n            : this.file.defaultArtboard();\n        // Check we have a working artboard\n        if (!rootArtboard) {\n            var msg = \"Invalid artboard name or no default artboard\";\n            console.warn(msg);\n            this.eventManager.fire({ type: EventType.LoadError, data: msg });\n            return;\n        }\n        this.artboard = rootArtboard;\n        rootArtboard.volume = this._volume * audioManager.systemVolume;\n        // Check that the artboard has at least 1 animation\n        if (this.artboard.animationCount() < 1) {\n            var msg = \"Artboard has no animations\";\n            this.eventManager.fire({ type: EventType.LoadError, data: msg });\n            throw msg;\n        }\n        // Initialize the animator\n        this.animator = new Animator(this.runtime, this.artboard, this.eventManager);\n        // Initialize the animations; as loaded hasn't happened yet, we need to\n        // suppress firing the play/pause events until the load event has fired. To\n        // do this we tell the animator to suppress firing events, and add event\n        // firing to the task queue.\n        var instanceNames;\n        if (animationNames.length > 0 || stateMachineNames.length > 0) {\n            instanceNames = animationNames.concat(stateMachineNames);\n            this.animator.initLinearAnimations(animationNames, autoplay);\n            this.animator.initStateMachines(stateMachineNames, autoplay);\n        }\n        else {\n            instanceNames = [this.animator.atLeastOne(autoplay, false)];\n        }\n        // Queue up firing the playback events\n        this.taskQueue.add({\n            event: {\n                type: autoplay ? EventType.Play : EventType.Pause,\n                data: instanceNames,\n            },\n        });\n        if (autoBind) {\n            var viewModel = this.file.defaultArtboardViewModel(rootArtboard);\n            if (viewModel !== null) {\n                var runtimeInstance = viewModel.defaultInstance();\n                if (runtimeInstance !== null) {\n                    var viewModelInstance = new ViewModelInstance(runtimeInstance, null);\n                    this.bindViewModelInstance(viewModelInstance);\n                }\n            }\n        }\n    };\n    // Draws the current artboard frame\n    Rive.prototype.drawFrame = function () {\n        var _a, _b;\n        if ((_a = document === null || document === void 0 ? void 0 : document.timeline) === null || _a === void 0 ? void 0 : _a.currentTime) {\n            if (this.loaded && this.artboard && !this.frameRequestId) {\n                this._boundDraw(document.timeline.currentTime);\n                (_b = this.runtime) === null || _b === void 0 ? void 0 : _b.resolveAnimationFrame();\n            }\n        }\n        else {\n            this.startRendering();\n        }\n    };\n    /**\n     * Draw rendering loop; renders animation frames at the correct time interval.\n     * @param time the time at which to render a frame\n     */\n    Rive.prototype.draw = function (time, onSecond) {\n        var _a;\n        // Clear the frameRequestId, as we're now rendering a fresh frame\n        this.frameRequestId = null;\n        var before = performance.now();\n        // On the first pass, make sure lastTime has a valid value\n        if (!this.lastRenderTime) {\n            this.lastRenderTime = time;\n        }\n        // Handle the onSecond callback\n        this.renderSecondTimer += time - this.lastRenderTime;\n        if (this.renderSecondTimer > 5000) {\n            this.renderSecondTimer = 0;\n            onSecond === null || onSecond === void 0 ? void 0 : onSecond();\n        }\n        // Calculate the elapsed time between frames in seconds\n        var elapsedTime = (time - this.lastRenderTime) / 1000;\n        this.lastRenderTime = time;\n        // - Advance non-paused animations by the elapsed number of seconds\n        // - Advance any animations that require scrubbing\n        // - Advance to the first frame even when autoplay is false\n        var activeAnimations = this.animator.animations\n            .filter(function (a) { return a.playing || a.needsScrub; })\n            // The scrubbed animations must be applied first to prevent weird artifacts\n            // if the playing animations conflict with the scrubbed animating attribuates.\n            .sort(function (first) { return (first.needsScrub ? -1 : 1); });\n        for (var _i = 0, activeAnimations_1 = activeAnimations; _i < activeAnimations_1.length; _i++) {\n            var animation = activeAnimations_1[_i];\n            animation.advance(elapsedTime);\n            if (animation.instance.didLoop) {\n                animation.loopCount += 1;\n            }\n            animation.apply(1.0);\n        }\n        // - Advance non-paused state machines by the elapsed number of seconds\n        // - Advance to the first frame even when autoplay is false\n        var activeStateMachines = this.animator.stateMachines.filter(function (a) { return a.playing; });\n        for (var _b = 0, activeStateMachines_1 = activeStateMachines; _b < activeStateMachines_1.length; _b++) {\n            var stateMachine = activeStateMachines_1[_b];\n            // Check for events before the current frame's state machine advance\n            var numEventsReported = stateMachine.reportedEventCount();\n            if (numEventsReported) {\n                for (var i = 0; i < numEventsReported; i++) {\n                    var event_1 = stateMachine.reportedEventAt(i);\n                    if (event_1) {\n                        if (event_1.type === RiveEventType.OpenUrl) {\n                            this.eventManager.fire({\n                                type: EventType.RiveEvent,\n                                data: event_1,\n                            });\n                            // Handle the event side effect if explicitly enabled\n                            if (this.automaticallyHandleEvents) {\n                                var newAnchorTag = document.createElement(\"a\");\n                                var _c = event_1, url = _c.url, target = _c.target;\n                                var sanitizedUrl = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.sanitizeUrl)(url);\n                                url && newAnchorTag.setAttribute(\"href\", sanitizedUrl);\n                                target && newAnchorTag.setAttribute(\"target\", target);\n                                if (sanitizedUrl && sanitizedUrl !== _utils__WEBPACK_IMPORTED_MODULE_3__.BLANK_URL) {\n                                    newAnchorTag.click();\n                                }\n                            }\n                        }\n                        else {\n                            this.eventManager.fire({\n                                type: EventType.RiveEvent,\n                                data: event_1,\n                            });\n                        }\n                    }\n                }\n            }\n            stateMachine.advanceAndApply(elapsedTime);\n            // stateMachine.instance.apply(this.artboard);\n        }\n        // Once the animations have been applied to the artboard, advance it\n        // by the elapsed time.\n        if (this.animator.stateMachines.length == 0) {\n            this.artboard.advance(elapsedTime);\n        }\n        var renderer = this.renderer;\n        // Canvas must be wiped to prevent artifacts\n        renderer.clear();\n        renderer.save();\n        // Update the renderer alignment if necessary\n        this.alignRenderer();\n        // Do not draw on 0 canvas size\n        if (!this._hasZeroSize) {\n            this.artboard.draw(renderer);\n        }\n        renderer.restore();\n        renderer.flush();\n        // Check for any animations that looped\n        this.animator.handleLooping();\n        // Check for any state machines that had a state change\n        this.animator.handleStateChanges();\n        // Report advanced time\n        this.animator.handleAdvancing(elapsedTime);\n        // Add duration to create frame to durations array\n        this.frameCount++;\n        var after = performance.now();\n        this.frameTimes.push(after);\n        this.durations.push(after - before);\n        while (this.frameTimes[0] <= after - 1000) {\n            this.frameTimes.shift();\n            this.durations.shift();\n        }\n        (_a = this._viewModelInstance) === null || _a === void 0 ? void 0 : _a.handleCallbacks();\n        // Calling requestAnimationFrame will rerun draw() at the correct rate:\n        // https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Basic_animations\n        if (this.animator.isPlaying) {\n            // Request a new rendering frame\n            this.startRendering();\n        }\n        else if (this.animator.isPaused) {\n            // Reset the end time so on playback it starts at the correct frame\n            this.lastRenderTime = 0;\n        }\n        else if (this.animator.isStopped) {\n            // Reset animation instances, artboard and time\n            // TODO: implement this properly when we have instancing\n            // this.initArtboard();\n            // this.drawFrame();\n            this.lastRenderTime = 0;\n        }\n    };\n    /**\n     * Align the renderer\n     */\n    Rive.prototype.alignRenderer = function () {\n        var _a = this, renderer = _a.renderer, runtime = _a.runtime, _layout = _a._layout, artboard = _a.artboard;\n        // Align things up safe in the knowledge we can restore if changed\n        renderer.align(_layout.runtimeFit(runtime), _layout.runtimeAlignment(runtime), {\n            minX: _layout.minX,\n            minY: _layout.minY,\n            maxX: _layout.maxX,\n            maxY: _layout.maxY,\n        }, artboard.bounds, this._devicePixelRatioUsed * _layout.layoutScaleFactor);\n    };\n    Object.defineProperty(Rive.prototype, \"fps\", {\n        get: function () {\n            return this.durations.length;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Rive.prototype, \"frameTime\", {\n        get: function () {\n            if (this.durations.length === 0) {\n                return 0;\n            }\n            return (this.durations.reduce(function (a, b) { return a + b; }, 0) / this.durations.length).toFixed(4);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Cleans up all Wasm-generated objects that need to be manually destroyed:\n     * artboard instances, animation instances, state machine instances,\n     * renderer instance, file and runtime.\n     *\n     * Once this is called, you will need to initialise a new instance of the\n     * Rive class\n     */\n    Rive.prototype.cleanup = function () {\n        var _a, _b;\n        this.destroyed = true;\n        // Stop the renderer if it hasn't already been stopped.\n        this.stopRendering();\n        // Clean up any artboard, animation or state machine instances.\n        this.cleanupInstances();\n        // Remove from observer\n        if (this._observed !== null) {\n            observers.remove(this._observed);\n        }\n        this.removeRiveListeners();\n        if (this.file) {\n            (_a = this.riveFile) === null || _a === void 0 ? void 0 : _a.cleanup();\n            this.file = null;\n        }\n        this.riveFile = null;\n        this.deleteRiveRenderer();\n        if (this._audioEventListener !== null) {\n            audioManager.remove(this._audioEventListener);\n            this._audioEventListener = null;\n        }\n        (_b = this._viewModelInstance) === null || _b === void 0 ? void 0 : _b.cleanup();\n        this._viewModelInstance = null;\n        this._dataEnums = null;\n    };\n    /**\n     * Cleans up the Renderer object. Only call this API if you no longer\n     * need to render Rive content in your session.\n     */\n    Rive.prototype.deleteRiveRenderer = function () {\n        var _a;\n        (_a = this.renderer) === null || _a === void 0 ? void 0 : _a.delete();\n        this.renderer = null;\n    };\n    /**\n     * Cleans up any Wasm-generated objects that need to be manually destroyed:\n     * artboard instances, animation instances, state machine instances.\n     *\n     * Once this is called, things will need to be reinitialized or bad things\n     * might happen.\n     */\n    Rive.prototype.cleanupInstances = function () {\n        if (this.eventCleanup !== null) {\n            this.eventCleanup();\n        }\n        // Delete all animation and state machine instances\n        this.stop();\n        if (this.artboard) {\n            this.artboard.delete();\n            this.artboard = null;\n        }\n    };\n    /**\n     * Tries to query the setup Artboard for a text run node with the given name.\n     *\n     * @param textRunName - Name of the text run node associated with a text object\n     * @returns - TextValueRun node or undefined if the text run cannot be queried\n     */\n    Rive.prototype.retrieveTextRun = function (textRunName) {\n        var _a;\n        if (!textRunName) {\n            console.warn(\"No text run name provided\");\n            return;\n        }\n        if (!this.artboard) {\n            console.warn(\"Tried to access text run, but the Artboard is null\");\n            return;\n        }\n        var textRun = this.artboard.textRun(textRunName);\n        if (!textRun) {\n            console.warn(\"Could not access a text run with name '\".concat(textRunName, \"' in the '\").concat((_a = this.artboard) === null || _a === void 0 ? void 0 : _a.name, \"' Artboard. Note that you must rename a text run node in the Rive editor to make it queryable at runtime.\"));\n            return;\n        }\n        return textRun;\n    };\n    /**\n     * Returns a string from a given text run node name, or undefined if the text run\n     * cannot be queried.\n     *\n     * @param textRunName - Name of the text run node associated with a text object\n     * @returns - String value of the text run node or undefined\n     */\n    Rive.prototype.getTextRunValue = function (textRunName) {\n        var textRun = this.retrieveTextRun(textRunName);\n        return textRun ? textRun.text : undefined;\n    };\n    /**\n     * Sets a text value for a given text run node name if possible\n     *\n     * @param textRunName - Name of the text run node associated with a text object\n     * @param textRunValue - String value to set on the text run node\n     */\n    Rive.prototype.setTextRunValue = function (textRunName, textRunValue) {\n        var textRun = this.retrieveTextRun(textRunName);\n        if (textRun) {\n            textRun.text = textRunValue;\n        }\n    };\n    // Plays specified animations; if none specified, it unpauses everything.\n    Rive.prototype.play = function (animationNames, autoplay) {\n        var _this = this;\n        animationNames = mapToStringArray(animationNames);\n        // If the file's not loaded, queue up the play\n        if (!this.readyForPlaying) {\n            this.taskQueue.add({\n                action: function () { return _this.play(animationNames, autoplay); },\n            });\n            return;\n        }\n        this.animator.play(animationNames);\n        if (this.eventCleanup) {\n            this.eventCleanup();\n        }\n        this.setupRiveListeners();\n        this.startRendering();\n    };\n    // Pauses specified animations; if none specified, pauses all.\n    Rive.prototype.pause = function (animationNames) {\n        var _this = this;\n        animationNames = mapToStringArray(animationNames);\n        // If the file's not loaded, early out, nothing to pause\n        if (!this.readyForPlaying) {\n            this.taskQueue.add({\n                action: function () { return _this.pause(animationNames); },\n            });\n            return;\n        }\n        if (this.eventCleanup) {\n            this.eventCleanup();\n        }\n        this.animator.pause(animationNames);\n    };\n    Rive.prototype.scrub = function (animationNames, value) {\n        var _this = this;\n        animationNames = mapToStringArray(animationNames);\n        // If the file's not loaded, early out, nothing to pause\n        if (!this.readyForPlaying) {\n            this.taskQueue.add({\n                action: function () { return _this.scrub(animationNames, value); },\n            });\n            return;\n        }\n        // Scrub the animation time; we draw a single frame here so that if\n        // nothing's currently playing, the scrubbed animation is still rendered/\n        this.animator.scrub(animationNames, value || 0);\n        this.drawFrame();\n    };\n    // Stops specified animations; if none specifies, stops them all.\n    Rive.prototype.stop = function (animationNames) {\n        var _this = this;\n        animationNames = mapToStringArray(animationNames);\n        // If the file's not loaded, early out, nothing to pause\n        if (!this.readyForPlaying) {\n            this.taskQueue.add({\n                action: function () { return _this.stop(animationNames); },\n            });\n            return;\n        }\n        // If there is no artboard, this.animator will be undefined\n        if (this.animator) {\n            this.animator.stop(animationNames);\n        }\n        if (this.eventCleanup) {\n            this.eventCleanup();\n        }\n    };\n    /**\n     * Resets the animation\n     * @param artboard the name of the artboard, or default if none given\n     * @param animations the names of animations for playback\n     * @param stateMachines the names of state machines for playback\n     * @param autoplay whether to autoplay when reset, defaults to false\n     *\n     */\n    Rive.prototype.reset = function (params) {\n        var _a, _b;\n        // Get the current artboard, animations, state machines, and playback states\n        var artBoardName = params === null || params === void 0 ? void 0 : params.artboard;\n        var animationNames = mapToStringArray(params === null || params === void 0 ? void 0 : params.animations);\n        var stateMachineNames = mapToStringArray(params === null || params === void 0 ? void 0 : params.stateMachines);\n        var autoplay = (_a = params === null || params === void 0 ? void 0 : params.autoplay) !== null && _a !== void 0 ? _a : false;\n        var autoBind = (_b = params === null || params === void 0 ? void 0 : params.autoBind) !== null && _b !== void 0 ? _b : false;\n        // Stop everything and clean up\n        this.cleanupInstances();\n        // Reinitialize an artboard instance with the state\n        this.initArtboard(artBoardName, animationNames, stateMachineNames, autoplay, autoBind);\n        this.taskQueue.process();\n    };\n    // Loads a new Rive file, keeping listeners in place\n    Rive.prototype.load = function (params) {\n        this.file = null;\n        // Stop all animations\n        this.stop();\n        // Reinitialize\n        this.init(params);\n    };\n    Object.defineProperty(Rive.prototype, \"layout\", {\n        /**\n         * Returns the current layout. Note that layout should be treated as\n         * immutable. If you want to change the layout, create a new one use the\n         * layout setter\n         */\n        get: function () {\n            return this._layout;\n        },\n        // Sets a new layout\n        set: function (layout) {\n            this._layout = layout;\n            // If the maxX or maxY are 0, then set them to the canvas width and height\n            if (!layout.maxX || !layout.maxY) {\n                this.resizeToCanvas();\n            }\n            if (this.loaded && !this.animator.isPlaying) {\n                this.drawFrame();\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Sets the layout bounds to the current canvas size; this is typically called\n     * when the canvas is resized\n     */\n    Rive.prototype.resizeToCanvas = function () {\n        this._layout = this.layout.copyWith({\n            minX: 0,\n            minY: 0,\n            maxX: this.canvas.width,\n            maxY: this.canvas.height,\n        });\n    };\n    /**\n     * Accounts for devicePixelRatio as a multiplier to render the size of the canvas drawing surface.\n     * Uses the size of the backing canvas to set new width/height attributes. Need to re-render\n     * and resize the layout to match the new drawing surface afterwards.\n     * Useful function for consumers to include in a window resize listener.\n     *\n     * This method will set the {@link devicePixelRatioUsed} property.\n     *\n     * Optionally, you can provide a {@link customDevicePixelRatio} to provide a\n     * custom value.\n     */\n    Rive.prototype.resizeDrawingSurfaceToCanvas = function (customDevicePixelRatio) {\n        if (this.canvas instanceof HTMLCanvasElement && !!window) {\n            var _a = this.canvas.getBoundingClientRect(), width = _a.width, height = _a.height;\n            var dpr = customDevicePixelRatio || window.devicePixelRatio || 1;\n            this.devicePixelRatioUsed = dpr;\n            this.canvas.width = dpr * width;\n            this.canvas.height = dpr * height;\n            this.resizeToCanvas();\n            this.drawFrame();\n            if (this.layout.fit === Fit.Layout) {\n                var scaleFactor = this._layout.layoutScaleFactor;\n                this.artboard.width = width / scaleFactor;\n                this.artboard.height = height / scaleFactor;\n            }\n        }\n    };\n    Object.defineProperty(Rive.prototype, \"source\", {\n        // Returns the animation source, which may be undefined\n        get: function () {\n            return this.src;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Rive.prototype, \"activeArtboard\", {\n        /**\n         * Returns the name of the active artboard\n         */\n        get: function () {\n            return this.artboard ? this.artboard.name : \"\";\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Rive.prototype, \"animationNames\", {\n        // Returns a list of animation names on the chosen artboard\n        get: function () {\n            // If the file's not loaded, we got nothing to return\n            if (!this.loaded || !this.artboard) {\n                return [];\n            }\n            var animationNames = [];\n            for (var i = 0; i < this.artboard.animationCount(); i++) {\n                animationNames.push(this.artboard.animationByIndex(i).name);\n            }\n            return animationNames;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Rive.prototype, \"stateMachineNames\", {\n        /**\n         * Returns a list of state machine names from the current artboard\n         */\n        get: function () {\n            // If the file's not loaded, we got nothing to return\n            if (!this.loaded || !this.artboard) {\n                return [];\n            }\n            var stateMachineNames = [];\n            for (var i = 0; i < this.artboard.stateMachineCount(); i++) {\n                stateMachineNames.push(this.artboard.stateMachineByIndex(i).name);\n            }\n            return stateMachineNames;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Returns the inputs for the specified instanced state machine, or an empty\n     * list if the name is invalid or the state machine is not instanced\n     * @param name the state machine name\n     * @returns the inputs for the named state machine\n     */\n    Rive.prototype.stateMachineInputs = function (name) {\n        // If the file's not loaded, early out, nothing to pause\n        if (!this.loaded) {\n            return;\n        }\n        var stateMachine = this.animator.stateMachines.find(function (m) { return m.name === name; });\n        return stateMachine === null || stateMachine === void 0 ? void 0 : stateMachine.inputs;\n    };\n    // Returns the input with the provided name at the given path\n    Rive.prototype.retrieveInputAtPath = function (name, path) {\n        if (!name) {\n            console.warn(\"No input name provided for path '\".concat(path, \"'\"));\n            return;\n        }\n        if (!this.artboard) {\n            console.warn(\"Tried to access input: '\".concat(name, \"', at path: '\").concat(path, \"', but the Artboard is null\"));\n            return;\n        }\n        var input = this.artboard.inputByPath(name, path);\n        if (!input) {\n            console.warn(\"Could not access an input with name: '\".concat(name, \"', at path:'\").concat(path, \"'\"));\n            return;\n        }\n        return input;\n    };\n    /**\n     * Set the boolean input with the provided name at the given path with value\n     * @param input the state machine input name\n     * @param value the value to set the input to\n     * @param path the path the input is located at an artboard level\n     */\n    Rive.prototype.setBooleanStateAtPath = function (inputName, value, path) {\n        var input = this.retrieveInputAtPath(inputName, path);\n        if (!input)\n            return;\n        if (input.type === StateMachineInputType.Boolean) {\n            input.asBool().value = value;\n        }\n        else {\n            console.warn(\"Input with name: '\".concat(inputName, \"', at path:'\").concat(path, \"' is not a boolean\"));\n        }\n    };\n    /**\n     * Set the number input with the provided name at the given path with value\n     * @param input the state machine input name\n     * @param value the value to set the input to\n     * @param path the path the input is located at an artboard level\n     */\n    Rive.prototype.setNumberStateAtPath = function (inputName, value, path) {\n        var input = this.retrieveInputAtPath(inputName, path);\n        if (!input)\n            return;\n        if (input.type === StateMachineInputType.Number) {\n            input.asNumber().value = value;\n        }\n        else {\n            console.warn(\"Input with name: '\".concat(inputName, \"', at path:'\").concat(path, \"' is not a number\"));\n        }\n    };\n    /**\n     * Fire the trigger with the provided name at the given path\n     * @param input the state machine input name\n     * @param path the path the input is located at an artboard level\n     */\n    Rive.prototype.fireStateAtPath = function (inputName, path) {\n        var input = this.retrieveInputAtPath(inputName, path);\n        if (!input)\n            return;\n        if (input.type === StateMachineInputType.Trigger) {\n            input.asTrigger().fire();\n        }\n        else {\n            console.warn(\"Input with name: '\".concat(inputName, \"', at path:'\").concat(path, \"' is not a trigger\"));\n        }\n    };\n    // Returns the TextValueRun object for the provided name at the given path\n    Rive.prototype.retrieveTextAtPath = function (name, path) {\n        if (!name) {\n            console.warn(\"No text name provided for path '\".concat(path, \"'\"));\n            return;\n        }\n        if (!path) {\n            console.warn(\"No path provided for text '\".concat(name, \"'\"));\n            return;\n        }\n        if (!this.artboard) {\n            console.warn(\"Tried to access text: '\".concat(name, \"', at path: '\").concat(path, \"', but the Artboard is null\"));\n            return;\n        }\n        var text = this.artboard.textByPath(name, path);\n        if (!text) {\n            console.warn(\"Could not access text with name: '\".concat(name, \"', at path:'\").concat(path, \"'\"));\n            return;\n        }\n        return text;\n    };\n    /**\n     * Retrieves the text value for a specified text run at a given path\n     * @param textName The name of the text run\n     * @param path The path to the text run within the artboard\n     * @returns The text value of the text run, or undefined if not found\n     *\n     * @example\n     * // Get the text value for a text run named \"title\" at one nested artboard deep\n     * const titleText = riveInstance.getTextRunValueAtPath(\"title\", \"artboard1\");\n     *\n     * @example\n     * // Get the text value for a text run named \"subtitle\" within a nested group two artboards deep\n     * const subtitleText = riveInstance.getTextRunValueAtPath(\"subtitle\", \"group/nestedGroup\");\n     *\n     * @remarks\n     * If the text run cannot be found at the specified path, a warning will be logged to the console.\n     */\n    Rive.prototype.getTextRunValueAtPath = function (textName, path) {\n        var run = this.retrieveTextAtPath(textName, path);\n        if (!run) {\n            console.warn(\"Could not get text with name: '\".concat(textName, \"', at path:'\").concat(path, \"'\"));\n            return;\n        }\n        return run.text;\n    };\n    /**\n     * Sets the text value for a specified text run at a given path\n     * @param textName The name of the text run\n     * @param value The new text value to set\n     * @param path The path to the text run within the artboard\n     * @returns void\n     *\n     * @example\n     * // Set the text value for a text run named \"title\" at one nested artboard deep\n     * riveInstance.setTextRunValueAtPath(\"title\", \"New Title\", \"artboard1\");\n     *\n     * @example\n     * // Set the text value for a text run named \"subtitle\" within a nested group two artboards deep\n     * riveInstance.setTextRunValueAtPath(\"subtitle\", \"New Subtitle\", \"group/nestedGroup\");\n     *\n     * @remarks\n     * If the text run cannot be found at the specified path, a warning will be logged to the console.\n     */\n    Rive.prototype.setTextRunValueAtPath = function (textName, value, path) {\n        var run = this.retrieveTextAtPath(textName, path);\n        if (!run) {\n            console.warn(\"Could not set text with name: '\".concat(textName, \"', at path:'\").concat(path, \"'\"));\n            return;\n        }\n        run.text = value;\n    };\n    Object.defineProperty(Rive.prototype, \"playingStateMachineNames\", {\n        // Returns a list of playing machine names\n        get: function () {\n            // If the file's not loaded, we got nothing to return\n            if (!this.loaded) {\n                return [];\n            }\n            return this.animator.stateMachines\n                .filter(function (m) { return m.playing; })\n                .map(function (m) { return m.name; });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Rive.prototype, \"playingAnimationNames\", {\n        // Returns a list of playing animation names\n        get: function () {\n            // If the file's not loaded, we got nothing to return\n            if (!this.loaded) {\n                return [];\n            }\n            return this.animator.animations.filter(function (a) { return a.playing; }).map(function (a) { return a.name; });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Rive.prototype, \"pausedAnimationNames\", {\n        // Returns a list of paused animation names\n        get: function () {\n            // If the file's not loaded, we got nothing to return\n            if (!this.loaded) {\n                return [];\n            }\n            return this.animator.animations\n                .filter(function (a) { return !a.playing; })\n                .map(function (a) { return a.name; });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Rive.prototype, \"pausedStateMachineNames\", {\n        /**\n         *  Returns a list of paused machine names\n         * @returns a list of state machine names that are paused\n         */\n        get: function () {\n            // If the file's not loaded, we got nothing to return\n            if (!this.loaded) {\n                return [];\n            }\n            return this.animator.stateMachines\n                .filter(function (m) { return !m.playing; })\n                .map(function (m) { return m.name; });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Rive.prototype, \"isPlaying\", {\n        /**\n         * @returns true if any animation is playing\n         */\n        get: function () {\n            return this.animator.isPlaying;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Rive.prototype, \"isPaused\", {\n        /**\n         * @returns true if all instanced animations are paused\n         */\n        get: function () {\n            return this.animator.isPaused;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Rive.prototype, \"isStopped\", {\n        /**\n         * @returns true if no animations are playing or paused\n         */\n        get: function () {\n            return this.animator.isStopped;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Rive.prototype, \"bounds\", {\n        /**\n         * @returns the bounds of the current artboard, or undefined if the artboard\n         * isn't loaded yet.\n         */\n        get: function () {\n            return this.artboard ? this.artboard.bounds : undefined;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Subscribe to Rive-generated events\n     * @param type the type of event to subscribe to\n     * @param callback callback to fire when the event occurs\n     */\n    Rive.prototype.on = function (type, callback) {\n        this.eventManager.add({\n            type: type,\n            callback: callback,\n        });\n    };\n    /**\n     * Unsubscribes from a Rive-generated event\n     * @param type the type of event to unsubscribe from\n     * @param callback the callback to unsubscribe\n     */\n    Rive.prototype.off = function (type, callback) {\n        this.eventManager.remove({\n            type: type,\n            callback: callback,\n        });\n    };\n    /**\n     * Unsubscribes from a Rive-generated event\n     * @deprecated\n     * @param callback the callback to unsubscribe from\n     */\n    Rive.prototype.unsubscribe = function (type, callback) {\n        console.warn(\"This function is deprecated: please use `off()` instead.\");\n        this.off(type, callback);\n    };\n    /**\n     * Unsubscribes all Rive listeners from an event type, or everything if no type is\n     * given\n     * @param type the type of event to unsubscribe from, or all types if\n     * undefined\n     */\n    Rive.prototype.removeAllRiveEventListeners = function (type) {\n        this.eventManager.removeAll(type);\n    };\n    /**\n     * Unsubscribes all listeners from an event type, or everything if no type is\n     * given\n     * @deprecated\n     * @param type the type of event to unsubscribe from, or all types if\n     * undefined\n     */\n    Rive.prototype.unsubscribeAll = function (type) {\n        console.warn(\"This function is deprecated: please use `removeAllRiveEventListeners()` instead.\");\n        this.removeAllRiveEventListeners(type);\n    };\n    /**\n     * Stops the rendering loop; this is different from pausing in that it doesn't\n     * change the state of any animation. It stops rendering from occurring. This\n     * is designed for situations such as when Rive isn't visible.\n     *\n     * The only way to start rendering again is to call `startRendering`.\n     * Animations that are marked as playing will start from the position that\n     * they would have been at if rendering had not been stopped.\n     */\n    Rive.prototype.stopRendering = function () {\n        if (this.loaded && this.frameRequestId) {\n            if (this.runtime.cancelAnimationFrame) {\n                this.runtime.cancelAnimationFrame(this.frameRequestId);\n            }\n            else {\n                cancelAnimationFrame(this.frameRequestId);\n            }\n            this.frameRequestId = null;\n        }\n    };\n    /**\n     * Starts the rendering loop if it has been previously stopped. If the\n     * renderer is already active, then this will have zero effect.\n     */\n    Rive.prototype.startRendering = function () {\n        if (this.loaded && this.artboard && !this.frameRequestId) {\n            if (this.runtime.requestAnimationFrame) {\n                this.frameRequestId = this.runtime.requestAnimationFrame(this._boundDraw);\n            }\n            else {\n                this.frameRequestId = requestAnimationFrame(this._boundDraw);\n            }\n        }\n    };\n    /**\n     * Enables frames-per-second (FPS) reporting for the runtime\n     * If no callback is provided, Rive will append a fixed-position div at the top-right corner of\n     * the page with the FPS reading\n     * @param fpsCallback - Callback from the runtime during the RAF loop that supplies the FPS value\n     */\n    Rive.prototype.enableFPSCounter = function (fpsCallback) {\n        this.runtime.enableFPSCounter(fpsCallback);\n    };\n    /**\n     * Disables frames-per-second (FPS) reporting for the runtime\n     */\n    Rive.prototype.disableFPSCounter = function () {\n        this.runtime.disableFPSCounter();\n    };\n    Object.defineProperty(Rive.prototype, \"contents\", {\n        /**\n         * Returns the contents of a Rive file: the artboards, animations, and state machines\n         */\n        get: function () {\n            if (!this.loaded) {\n                return undefined;\n            }\n            var riveContents = {\n                artboards: [],\n            };\n            for (var i = 0; i < this.file.artboardCount(); i++) {\n                var artboard = this.file.artboardByIndex(i);\n                var artboardContents = {\n                    name: artboard.name,\n                    animations: [],\n                    stateMachines: [],\n                };\n                for (var j = 0; j < artboard.animationCount(); j++) {\n                    var animation = artboard.animationByIndex(j);\n                    artboardContents.animations.push(animation.name);\n                }\n                for (var k = 0; k < artboard.stateMachineCount(); k++) {\n                    var stateMachine = artboard.stateMachineByIndex(k);\n                    var name_1 = stateMachine.name;\n                    var instance = new this.runtime.StateMachineInstance(stateMachine, artboard);\n                    var inputContents = [];\n                    for (var l = 0; l < instance.inputCount(); l++) {\n                        var input = instance.input(l);\n                        inputContents.push({ name: input.name, type: input.type });\n                    }\n                    artboardContents.stateMachines.push({\n                        name: name_1,\n                        inputs: inputContents,\n                    });\n                }\n                riveContents.artboards.push(artboardContents);\n            }\n            return riveContents;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Rive.prototype, \"volume\", {\n        /**\n         * Getter / Setter for the volume of the artboard\n         */\n        get: function () {\n            if (this.artboard && this.artboard.volume !== this._volume) {\n                this._volume = this.artboard.volume;\n            }\n            return this._volume;\n        },\n        set: function (value) {\n            this._volume = value;\n            if (this.artboard) {\n                this.artboard.volume = value * audioManager.systemVolume;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Rive.prototype, \"artboardWidth\", {\n        /**\n         * The width of the artboard.\n         *\n         * This will return 0 if the artboard is not loaded yet and a custom\n         * width has not been set.\n         *\n         * Do not set this value manually when using {@link resizeDrawingSurfaceToCanvas}\n         * with a {@link Layout.fit} of {@link Fit.Layout}, as the artboard width is\n         * automatically set.\n         */\n        get: function () {\n            var _a;\n            if (this.artboard) {\n                return this.artboard.width;\n            }\n            return (_a = this._artboardWidth) !== null && _a !== void 0 ? _a : 0;\n        },\n        set: function (value) {\n            this._artboardWidth = value;\n            if (this.artboard) {\n                this.artboard.width = value;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Rive.prototype, \"artboardHeight\", {\n        /**\n         * The height of the artboard.\n         *\n         * This will return 0 if the artboard is not loaded yet and a custom\n         * height has not been set.\n         *\n         * Do not set this value manually when using {@link resizeDrawingSurfaceToCanvas}\n         * with a {@link Layout.fit} of {@link Fit.Layout}, as the artboard height is\n         * automatically set.\n         */\n        get: function () {\n            var _a;\n            if (this.artboard) {\n                return this.artboard.height;\n            }\n            return (_a = this._artboardHeight) !== null && _a !== void 0 ? _a : 0;\n        },\n        set: function (value) {\n            this._artboardHeight = value;\n            if (this.artboard) {\n                this.artboard.height = value;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Reset the artboard size to its original values.\n     */\n    Rive.prototype.resetArtboardSize = function () {\n        if (this.artboard) {\n            this.artboard.resetArtboardSize();\n            this._artboardWidth = this.artboard.width;\n            this._artboardHeight = this.artboard.height;\n        }\n        else {\n            // If the artboard isn't loaded, we need to reset the custom width and height\n            this._artboardWidth = undefined;\n            this._artboardHeight = undefined;\n        }\n    };\n    Object.defineProperty(Rive.prototype, \"devicePixelRatioUsed\", {\n        /**\n         * The device pixel ratio used in rendering and canvas/artboard resizing.\n         *\n         * This value will be overidden by the device pixel ratio used in\n         * {@link resizeDrawingSurfaceToCanvas}. If you use that method, do not set this value.\n         */\n        get: function () {\n            return this._devicePixelRatioUsed;\n        },\n        set: function (value) {\n            this._devicePixelRatioUsed = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Initialize the data context with the view model instance.\n     */\n    Rive.prototype.bindViewModelInstance = function (viewModelInstance) {\n        var _a;\n        if (this.artboard && !this.destroyed) {\n            if (viewModelInstance && viewModelInstance.runtimeInstance) {\n                viewModelInstance.internalIncrementReferenceCount();\n                (_a = this._viewModelInstance) === null || _a === void 0 ? void 0 : _a.cleanup();\n                this._viewModelInstance = viewModelInstance;\n                if (this.animator.stateMachines.length > 0) {\n                    this.animator.stateMachines.forEach(function (stateMachine) {\n                        return stateMachine.bindViewModelInstance(viewModelInstance);\n                    });\n                }\n                else {\n                    this.artboard.bindViewModelInstance(viewModelInstance.runtimeInstance);\n                }\n            }\n        }\n    };\n    Object.defineProperty(Rive.prototype, \"viewModelInstance\", {\n        get: function () {\n            return this._viewModelInstance;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Rive.prototype.viewModelByIndex = function (index) {\n        var viewModel = this.file.viewModelByIndex(index);\n        if (viewModel !== null) {\n            return new ViewModel(viewModel);\n        }\n        return null;\n    };\n    Rive.prototype.viewModelByName = function (name) {\n        var viewModel = this.file.viewModelByName(name);\n        if (viewModel !== null) {\n            return new ViewModel(viewModel);\n        }\n        return null;\n    };\n    Rive.prototype.enums = function () {\n        if (this._dataEnums === null) {\n            var dataEnums = this.file.enums();\n            this._dataEnums = dataEnums.map(function (dataEnum) {\n                return new DataEnum(dataEnum);\n            });\n        }\n        return this._dataEnums;\n    };\n    Rive.prototype.defaultViewModel = function () {\n        if (this.artboard) {\n            var viewModel = this.file.defaultArtboardViewModel(this.artboard);\n            if (viewModel) {\n                return new ViewModel(viewModel);\n            }\n        }\n        return null;\n    };\n    Rive.prototype.getArtboard = function (name) {\n        var _a, _b;\n        return (_b = (_a = this.riveFile) === null || _a === void 0 ? void 0 : _a.getArtboard(name)) !== null && _b !== void 0 ? _b : null;\n    };\n    // Error message for missing source or buffer\n    Rive.missingErrorMessage = \"Rive source file or data buffer required\";\n    // Error message for removed rive file\n    Rive.cleanupErrorMessage = \"Attempt to use file after calling cleanup.\";\n    return Rive;\n}());\n\nvar ViewModel = /** @class */ (function () {\n    function ViewModel(viewModel) {\n        this._viewModel = viewModel;\n    }\n    Object.defineProperty(ViewModel.prototype, \"instanceCount\", {\n        get: function () {\n            return this._viewModel.instanceCount;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ViewModel.prototype, \"name\", {\n        get: function () {\n            return this._viewModel.name;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    ViewModel.prototype.instanceByIndex = function (index) {\n        var instance = this._viewModel.instanceByIndex(index);\n        if (instance !== null) {\n            return new ViewModelInstance(instance, null);\n        }\n        return null;\n    };\n    ViewModel.prototype.instanceByName = function (name) {\n        var instance = this._viewModel.instanceByName(name);\n        if (instance !== null) {\n            return new ViewModelInstance(instance, null);\n        }\n        return null;\n    };\n    ViewModel.prototype.defaultInstance = function () {\n        var runtimeInstance = this._viewModel.defaultInstance();\n        if (runtimeInstance !== null) {\n            return new ViewModelInstance(runtimeInstance, null);\n        }\n        return null;\n    };\n    ViewModel.prototype.instance = function () {\n        var runtimeInstance = this._viewModel.instance();\n        if (runtimeInstance !== null) {\n            return new ViewModelInstance(runtimeInstance, null);\n        }\n        return null;\n    };\n    Object.defineProperty(ViewModel.prototype, \"properties\", {\n        get: function () {\n            return this._viewModel.getProperties();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ViewModel.prototype, \"instanceNames\", {\n        get: function () {\n            return this._viewModel.getInstanceNames();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return ViewModel;\n}());\n\nvar DataEnum = /** @class */ (function () {\n    function DataEnum(dataEnum) {\n        this._dataEnum = dataEnum;\n    }\n    Object.defineProperty(DataEnum.prototype, \"name\", {\n        get: function () {\n            return this._dataEnum.name;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DataEnum.prototype, \"values\", {\n        get: function () {\n            return this._dataEnum.values;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return DataEnum;\n}());\n\nvar PropertyType;\n(function (PropertyType) {\n    PropertyType[\"Number\"] = \"number\";\n    PropertyType[\"String\"] = \"string\";\n    PropertyType[\"Boolean\"] = \"boolean\";\n    PropertyType[\"Color\"] = \"color\";\n    PropertyType[\"Trigger\"] = \"trigger\";\n    PropertyType[\"Enum\"] = \"enum\";\n    PropertyType[\"List\"] = \"list\";\n    PropertyType[\"Image\"] = \"image\";\n    PropertyType[\"Artboard\"] = \"artboard\";\n})(PropertyType || (PropertyType = {}));\nvar ViewModelInstance = /** @class */ (function () {\n    function ViewModelInstance(runtimeInstance, parent) {\n        this._parents = [];\n        this._children = [];\n        this._viewModelInstances = new Map();\n        this._propertiesWithCallbacks = [];\n        this._referenceCount = 0;\n        this._runtimeInstance = runtimeInstance;\n        if (parent !== null) {\n            this._parents.push(parent);\n        }\n    }\n    Object.defineProperty(ViewModelInstance.prototype, \"runtimeInstance\", {\n        get: function () {\n            return this._runtimeInstance;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    ViewModelInstance.prototype.handleCallbacks = function () {\n        if (this._propertiesWithCallbacks.length !== 0) {\n            this._propertiesWithCallbacks.forEach(function (property) {\n                property.handleCallbacks();\n            });\n            this._propertiesWithCallbacks.forEach(function (property) {\n                property.clearChanges();\n            });\n        }\n        this._children.forEach(function (child) { return child.handleCallbacks(); });\n    };\n    ViewModelInstance.prototype.addParent = function (parent) {\n        if (!this._parents.includes(parent)) {\n            this._parents.push(parent);\n            if (this._propertiesWithCallbacks.length > 0 ||\n                this._children.length > 0) {\n                parent.addToViewModelCallbacks(this);\n            }\n        }\n    };\n    ViewModelInstance.prototype.removeParent = function (parent) {\n        var index = this._parents.indexOf(parent);\n        if (index !== -1) {\n            var parent_1 = this._parents[index];\n            parent_1.removeFromViewModelCallbacks(this);\n            this._parents.splice(index, 1);\n        }\n    };\n    /*\n     * method for internal use, it shouldn't be called externally\n     */\n    ViewModelInstance.prototype.addToPropertyCallbacks = function (property) {\n        var _this = this;\n        if (!this._propertiesWithCallbacks.includes(property)) {\n            this._propertiesWithCallbacks.push(property);\n            if (this._propertiesWithCallbacks.length > 0) {\n                this._parents.forEach(function (parent) {\n                    parent.addToViewModelCallbacks(_this);\n                });\n            }\n        }\n    };\n    /*\n     * method for internal use, it shouldn't be called externally\n     */\n    ViewModelInstance.prototype.removeFromPropertyCallbacks = function (property) {\n        var _this = this;\n        if (this._propertiesWithCallbacks.includes(property)) {\n            this._propertiesWithCallbacks = this._propertiesWithCallbacks.filter(function (prop) { return prop !== property; });\n            if (this._children.length === 0 &&\n                this._propertiesWithCallbacks.length === 0) {\n                this._parents.forEach(function (parent) {\n                    parent.removeFromViewModelCallbacks(_this);\n                });\n            }\n        }\n    };\n    /*\n     * method for internal use, it shouldn't be called externally\n     */\n    ViewModelInstance.prototype.addToViewModelCallbacks = function (instance) {\n        var _this = this;\n        if (!this._children.includes(instance)) {\n            this._children.push(instance);\n            this._parents.forEach(function (parent) {\n                parent.addToViewModelCallbacks(_this);\n            });\n        }\n    };\n    /*\n     * method for internal use, it shouldn't be called externally\n     */\n    ViewModelInstance.prototype.removeFromViewModelCallbacks = function (instance) {\n        var _this = this;\n        if (this._children.includes(instance)) {\n            this._children = this._children.filter(function (child) { return child !== instance; });\n            if (this._children.length === 0 &&\n                this._propertiesWithCallbacks.length === 0) {\n                this._parents.forEach(function (parent) {\n                    parent.removeFromViewModelCallbacks(_this);\n                });\n            }\n        }\n    };\n    ViewModelInstance.prototype.clearCallbacks = function () {\n        this._propertiesWithCallbacks.forEach(function (property) {\n            property.clearCallbacks();\n        });\n    };\n    ViewModelInstance.prototype.propertyFromPath = function (path, type) {\n        var pathSegments = path.split(\"/\");\n        return this.propertyFromPathSegments(pathSegments, 0, type);\n    };\n    ViewModelInstance.prototype.viewModelFromPathSegments = function (pathSegments, index) {\n        var viewModelInstance = this.internalViewModelInstance(pathSegments[index]);\n        if (viewModelInstance !== null) {\n            if (index == pathSegments.length - 1) {\n                return viewModelInstance;\n            }\n            else {\n                return viewModelInstance.viewModelFromPathSegments(pathSegments, index++);\n            }\n        }\n        return null;\n    };\n    ViewModelInstance.prototype.propertyFromPathSegments = function (pathSegments, index, type) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;\n        if (index < pathSegments.length - 1) {\n            var viewModelInstance = this.internalViewModelInstance(pathSegments[index]);\n            if (viewModelInstance !== null) {\n                return viewModelInstance.propertyFromPathSegments(pathSegments, index + 1, type);\n            }\n            else {\n                return null;\n            }\n        }\n        var instance = null;\n        switch (type) {\n            case PropertyType.Number:\n                instance = (_b = (_a = this._runtimeInstance) === null || _a === void 0 ? void 0 : _a.number(pathSegments[index])) !== null && _b !== void 0 ? _b : null;\n                if (instance !== null) {\n                    return new ViewModelInstanceNumber(instance, this);\n                }\n                break;\n            case PropertyType.String:\n                instance = (_d = (_c = this._runtimeInstance) === null || _c === void 0 ? void 0 : _c.string(pathSegments[index])) !== null && _d !== void 0 ? _d : null;\n                if (instance !== null) {\n                    return new ViewModelInstanceString(instance, this);\n                }\n                break;\n            case PropertyType.Boolean:\n                instance = (_f = (_e = this._runtimeInstance) === null || _e === void 0 ? void 0 : _e.boolean(pathSegments[index])) !== null && _f !== void 0 ? _f : null;\n                if (instance !== null) {\n                    return new ViewModelInstanceBoolean(instance, this);\n                }\n                break;\n            case PropertyType.Color:\n                instance = (_h = (_g = this._runtimeInstance) === null || _g === void 0 ? void 0 : _g.color(pathSegments[index])) !== null && _h !== void 0 ? _h : null;\n                if (instance !== null) {\n                    return new ViewModelInstanceColor(instance, this);\n                }\n                break;\n            case PropertyType.Trigger:\n                instance = (_k = (_j = this._runtimeInstance) === null || _j === void 0 ? void 0 : _j.trigger(pathSegments[index])) !== null && _k !== void 0 ? _k : null;\n                if (instance !== null) {\n                    return new ViewModelInstanceTrigger(instance, this);\n                }\n                break;\n            case PropertyType.Enum:\n                instance = (_m = (_l = this._runtimeInstance) === null || _l === void 0 ? void 0 : _l.enum(pathSegments[index])) !== null && _m !== void 0 ? _m : null;\n                if (instance !== null) {\n                    return new ViewModelInstanceEnum(instance, this);\n                }\n                break;\n            case PropertyType.List:\n                instance = (_p = (_o = this._runtimeInstance) === null || _o === void 0 ? void 0 : _o.list(pathSegments[index])) !== null && _p !== void 0 ? _p : null;\n                if (instance !== null) {\n                    return new ViewModelInstanceList(instance, this);\n                }\n                break;\n            case PropertyType.Image:\n                instance = (_r = (_q = this._runtimeInstance) === null || _q === void 0 ? void 0 : _q.image(pathSegments[index])) !== null && _r !== void 0 ? _r : null;\n                if (instance !== null) {\n                    return new ViewModelInstanceAssetImage(instance, this);\n                }\n                break;\n            case PropertyType.Artboard:\n                instance = (_t = (_s = this._runtimeInstance) === null || _s === void 0 ? void 0 : _s.artboard(pathSegments[index])) !== null && _t !== void 0 ? _t : null;\n                if (instance !== null) {\n                    return new ViewModelInstanceArtboard(instance, this);\n                }\n                break;\n        }\n        return null;\n    };\n    ViewModelInstance.prototype.internalViewModelInstance = function (name) {\n        var _a;\n        if (this._viewModelInstances.has(name)) {\n            return this._viewModelInstances.get(name);\n        }\n        var viewModelRuntimeInstance = (_a = this._runtimeInstance) === null || _a === void 0 ? void 0 : _a.viewModel(name);\n        if (viewModelRuntimeInstance !== null) {\n            var viewModelInstance = new ViewModelInstance(viewModelRuntimeInstance, this);\n            viewModelInstance.internalIncrementReferenceCount();\n            this._viewModelInstances.set(name, viewModelInstance);\n            return viewModelInstance;\n        }\n        return null;\n    };\n    /**\n     * method to access a property instance of type number belonging\n     * to the view model instance or to a nested view model instance\n     * @param path - path to the number property\n     */\n    ViewModelInstance.prototype.number = function (path) {\n        var viewmodelInstanceValue = this.propertyFromPath(path, PropertyType.Number);\n        return viewmodelInstanceValue;\n    };\n    /**\n     * method to access a property instance of type string belonging\n     * to the view model instance or to a nested view model instance\n     * @param path - path to the string property\n     */\n    ViewModelInstance.prototype.string = function (path) {\n        var viewmodelInstanceValue = this.propertyFromPath(path, PropertyType.String);\n        return viewmodelInstanceValue;\n    };\n    /**\n     * method to access a property instance of type boolean belonging\n     * to the view model instance or to a nested view model instance\n     * @param path - path to the boolean property\n     */\n    ViewModelInstance.prototype.boolean = function (path) {\n        var viewmodelInstanceValue = this.propertyFromPath(path, PropertyType.Boolean);\n        return viewmodelInstanceValue;\n    };\n    /**\n     * method to access a property instance of type color belonging\n     * to the view model instance or to a nested view model instance\n     * @param path - path to the ttrigger property\n     */\n    ViewModelInstance.prototype.color = function (path) {\n        var viewmodelInstanceValue = this.propertyFromPath(path, PropertyType.Color);\n        return viewmodelInstanceValue;\n    };\n    /**\n     * method to access a property instance of type trigger belonging\n     * to the view model instance or to a nested view model instance\n     * @param path - path to the trigger property\n     */\n    ViewModelInstance.prototype.trigger = function (path) {\n        var viewmodelInstanceValue = this.propertyFromPath(path, PropertyType.Trigger);\n        return viewmodelInstanceValue;\n    };\n    /**\n     * method to access a property instance of type enum belonging\n     * to the view model instance or to a nested view model instance\n     * @param path - path to the enum property\n     */\n    ViewModelInstance.prototype.enum = function (path) {\n        var viewmodelInstanceValue = this.propertyFromPath(path, PropertyType.Enum);\n        return viewmodelInstanceValue;\n    };\n    /**\n     * method to access a property instance of type list belonging\n     * to the view model instance or to a nested view model instance\n     * @param path - path to the list property\n     */\n    ViewModelInstance.prototype.list = function (path) {\n        var viewmodelInstanceValue = this.propertyFromPath(path, PropertyType.List);\n        return viewmodelInstanceValue;\n    };\n    /**\n     * method to access a view model property instance belonging\n     * to the view model instance or to a nested view model instance\n     * @param path - path to the image property\n     */\n    ViewModelInstance.prototype.image = function (path) {\n        var viewmodelInstanceValue = this.propertyFromPath(path, PropertyType.Image);\n        return viewmodelInstanceValue;\n    };\n    /**\n     * method to access an artboard property instance belonging\n     * to the view model instance or to a nested view model instance\n     * @param path - path to the image property\n     */\n    ViewModelInstance.prototype.artboard = function (path) {\n        var viewmodelInstanceValue = this.propertyFromPath(path, PropertyType.Artboard);\n        return viewmodelInstanceValue;\n    };\n    /**\n     * method to access a view model property instance belonging\n     * to the view model instance or to a nested view model instance\n     * @param path - path to the view model property\n     */\n    ViewModelInstance.prototype.viewModel = function (path) {\n        var pathSegments = path.split(\"/\");\n        var parentViewModelInstance = pathSegments.length > 1\n            ? this.viewModelFromPathSegments(pathSegments.slice(0, pathSegments.length - 1), 0)\n            : this;\n        if (parentViewModelInstance != null) {\n            return parentViewModelInstance.internalViewModelInstance(pathSegments[pathSegments.length - 1]);\n        }\n        return null;\n    };\n    ViewModelInstance.prototype.internalReplaceViewModel = function (name, value) {\n        var _a;\n        if (value.runtimeInstance !== null) {\n            var result = ((_a = this._runtimeInstance) === null || _a === void 0 ? void 0 : _a.replaceViewModel(name, value.runtimeInstance)) ||\n                false;\n            if (result) {\n                value.internalIncrementReferenceCount();\n                var oldInstance_1 = this.internalViewModelInstance(name);\n                if (oldInstance_1 !== null) {\n                    oldInstance_1.removeParent(this);\n                    if (this._children.includes(oldInstance_1)) {\n                        this._children = this._children.filter(function (child) { return child !== oldInstance_1; });\n                    }\n                    oldInstance_1.cleanup();\n                }\n                this._viewModelInstances.set(name, value);\n                value.addParent(this);\n            }\n            return result;\n        }\n        return false;\n    };\n    /**\n     * method to replace a view model property with another view model value\n     * @param path - path to the view model property\n     * @param value - view model that will replace the original\n     */\n    ViewModelInstance.prototype.replaceViewModel = function (path, value) {\n        var _a;\n        var pathSegments = path.split(\"/\");\n        var viewModelInstance = pathSegments.length > 1\n            ? this.viewModelFromPathSegments(pathSegments.slice(0, pathSegments.length - 1), 0)\n            : this;\n        return ((_a = viewModelInstance === null || viewModelInstance === void 0 ? void 0 : viewModelInstance.internalReplaceViewModel(pathSegments[pathSegments.length - 1], value)) !== null && _a !== void 0 ? _a : false);\n    };\n    /*\n     * method to add one to the reference counter of the instance.\n     * Use if the file owning the reference is destroyed but the instance needs to stay around\n     */\n    ViewModelInstance.prototype.incrementReferenceCount = function () {\n        var _a;\n        this._referenceCount++;\n        (_a = this._runtimeInstance) === null || _a === void 0 ? void 0 : _a.incrementReferenceCount();\n    };\n    /*\n     * method to subtract one to the reference counter of the instance.\n     * Use if incrementReferenceCount has been called\n     */\n    ViewModelInstance.prototype.decrementReferenceCount = function () {\n        var _a;\n        this._referenceCount--;\n        (_a = this._runtimeInstance) === null || _a === void 0 ? void 0 : _a.decrementReferenceCount();\n    };\n    Object.defineProperty(ViewModelInstance.prototype, \"properties\", {\n        get: function () {\n            var _a;\n            return (((_a = this._runtimeInstance) === null || _a === void 0 ? void 0 : _a.getProperties().map(function (prop) { return (__assign({}, prop)); })) || []);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    ViewModelInstance.prototype.internalIncrementReferenceCount = function () {\n        this._referenceCount++;\n    };\n    ViewModelInstance.prototype.cleanup = function () {\n        var _this = this;\n        this._referenceCount--;\n        if (this._referenceCount <= 0) {\n            this._runtimeInstance = null;\n            this.clearCallbacks();\n            this._propertiesWithCallbacks = [];\n            this._viewModelInstances.forEach(function (value) {\n                value.cleanup();\n            });\n            this._viewModelInstances.clear();\n            var children = __spreadArray([], this._children, true);\n            this._children.length = 0;\n            var parents = __spreadArray([], this._parents, true);\n            this._parents.length = 0;\n            children.forEach(function (child) {\n                child.removeParent(_this);\n            });\n            parents.forEach(function (parent) {\n                parent.removeFromViewModelCallbacks(_this);\n            });\n        }\n    };\n    return ViewModelInstance;\n}());\n\nvar ViewModelInstanceValue = /** @class */ (function () {\n    function ViewModelInstanceValue(instance, parent) {\n        this.callbacks = [];\n        this._viewModelInstanceValue = instance;\n        this._parentViewModel = parent;\n    }\n    ViewModelInstanceValue.prototype.on = function (callback) {\n        // Since we don't clean the changed flag for properties that don't have listeners,\n        // we clean it the first time we add a listener to it\n        if (this.callbacks.length === 0) {\n            this._viewModelInstanceValue.clearChanges();\n        }\n        if (!this.callbacks.includes(callback)) {\n            this.callbacks.push(callback);\n            this._parentViewModel.addToPropertyCallbacks(this);\n        }\n    };\n    ViewModelInstanceValue.prototype.off = function (callback) {\n        if (!callback) {\n            this.callbacks.length = 0;\n        }\n        else {\n            this.callbacks = this.callbacks.filter(function (cb) { return cb !== callback; });\n        }\n        if (this.callbacks.length === 0) {\n            this._parentViewModel.removeFromPropertyCallbacks(this);\n        }\n    };\n    ViewModelInstanceValue.prototype.internalHandleCallback = function (callback) { };\n    ViewModelInstanceValue.prototype.handleCallbacks = function () {\n        var _this = this;\n        if (this._viewModelInstanceValue.hasChanged) {\n            this.callbacks.forEach(function (callback) {\n                _this.internalHandleCallback(callback);\n            });\n        }\n    };\n    ViewModelInstanceValue.prototype.clearChanges = function () {\n        this._viewModelInstanceValue.clearChanges();\n    };\n    ViewModelInstanceValue.prototype.clearCallbacks = function () {\n        this.callbacks.length = 0;\n    };\n    Object.defineProperty(ViewModelInstanceValue.prototype, \"name\", {\n        get: function () {\n            return this._viewModelInstanceValue.name;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return ViewModelInstanceValue;\n}());\n\nvar ViewModelInstanceString = /** @class */ (function (_super) {\n    __extends(ViewModelInstanceString, _super);\n    function ViewModelInstanceString(instance, parent) {\n        return _super.call(this, instance, parent) || this;\n    }\n    Object.defineProperty(ViewModelInstanceString.prototype, \"value\", {\n        get: function () {\n            return this._viewModelInstanceValue.value;\n        },\n        set: function (val) {\n            this._viewModelInstanceValue.value = val;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    ViewModelInstanceString.prototype.internalHandleCallback = function (callback) {\n        callback(this.value);\n    };\n    return ViewModelInstanceString;\n}(ViewModelInstanceValue));\n\nvar ViewModelInstanceNumber = /** @class */ (function (_super) {\n    __extends(ViewModelInstanceNumber, _super);\n    function ViewModelInstanceNumber(instance, parent) {\n        return _super.call(this, instance, parent) || this;\n    }\n    Object.defineProperty(ViewModelInstanceNumber.prototype, \"value\", {\n        get: function () {\n            return this._viewModelInstanceValue.value;\n        },\n        set: function (val) {\n            this._viewModelInstanceValue.value = val;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    ViewModelInstanceNumber.prototype.internalHandleCallback = function (callback) {\n        callback(this.value);\n    };\n    return ViewModelInstanceNumber;\n}(ViewModelInstanceValue));\n\nvar ViewModelInstanceBoolean = /** @class */ (function (_super) {\n    __extends(ViewModelInstanceBoolean, _super);\n    function ViewModelInstanceBoolean(instance, parent) {\n        return _super.call(this, instance, parent) || this;\n    }\n    Object.defineProperty(ViewModelInstanceBoolean.prototype, \"value\", {\n        get: function () {\n            return this._viewModelInstanceValue.value;\n        },\n        set: function (val) {\n            this._viewModelInstanceValue.value = val;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    ViewModelInstanceBoolean.prototype.internalHandleCallback = function (callback) {\n        callback(this.value);\n    };\n    return ViewModelInstanceBoolean;\n}(ViewModelInstanceValue));\n\nvar ViewModelInstanceTrigger = /** @class */ (function (_super) {\n    __extends(ViewModelInstanceTrigger, _super);\n    function ViewModelInstanceTrigger(instance, parent) {\n        return _super.call(this, instance, parent) || this;\n    }\n    ViewModelInstanceTrigger.prototype.trigger = function () {\n        return this._viewModelInstanceValue.trigger();\n    };\n    ViewModelInstanceTrigger.prototype.internalHandleCallback = function (callback) {\n        callback();\n    };\n    return ViewModelInstanceTrigger;\n}(ViewModelInstanceValue));\n\nvar ViewModelInstanceEnum = /** @class */ (function (_super) {\n    __extends(ViewModelInstanceEnum, _super);\n    function ViewModelInstanceEnum(instance, parent) {\n        return _super.call(this, instance, parent) || this;\n    }\n    Object.defineProperty(ViewModelInstanceEnum.prototype, \"value\", {\n        get: function () {\n            return this._viewModelInstanceValue.value;\n        },\n        set: function (val) {\n            this._viewModelInstanceValue.value = val;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ViewModelInstanceEnum.prototype, \"valueIndex\", {\n        get: function () {\n            return this._viewModelInstanceValue\n                .valueIndex;\n        },\n        set: function (val) {\n            this._viewModelInstanceValue.valueIndex = val;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ViewModelInstanceEnum.prototype, \"values\", {\n        get: function () {\n            return this._viewModelInstanceValue.values;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    ViewModelInstanceEnum.prototype.internalHandleCallback = function (callback) {\n        callback(this.value);\n    };\n    return ViewModelInstanceEnum;\n}(ViewModelInstanceValue));\n\nvar ViewModelInstanceList = /** @class */ (function (_super) {\n    __extends(ViewModelInstanceList, _super);\n    function ViewModelInstanceList(instance, parent) {\n        return _super.call(this, instance, parent) || this;\n    }\n    Object.defineProperty(ViewModelInstanceList.prototype, \"length\", {\n        get: function () {\n            return this._viewModelInstanceValue.size;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    ViewModelInstanceList.prototype.addInstance = function (instance) {\n        if (instance.runtimeInstance != null) {\n            this._viewModelInstanceValue.addInstance(instance.runtimeInstance);\n            instance.addParent(this._parentViewModel);\n        }\n    };\n    ViewModelInstanceList.prototype.addInstanceAt = function (instance, index) {\n        if (instance.runtimeInstance != null) {\n            if (this._viewModelInstanceValue.addInstanceAt(instance.runtimeInstance, index)) {\n                instance.addParent(this._parentViewModel);\n                return true;\n            }\n        }\n        return false;\n    };\n    ViewModelInstanceList.prototype.removeInstance = function (instance) {\n        if (instance.runtimeInstance != null) {\n            this._viewModelInstanceValue.removeInstance(instance.runtimeInstance);\n            instance.removeParent(this._parentViewModel);\n        }\n    };\n    ViewModelInstanceList.prototype.removeInstanceAt = function (index) {\n        this._viewModelInstanceValue.removeInstanceAt(index);\n    };\n    ViewModelInstanceList.prototype.instanceAt = function (index) {\n        var runtimeInstance = this._viewModelInstanceValue.instanceAt(index);\n        if (runtimeInstance != null) {\n            var viewModelInstance = new ViewModelInstance(runtimeInstance, this._parentViewModel);\n            return viewModelInstance;\n        }\n        return null;\n    };\n    ViewModelInstanceList.prototype.swap = function (a, b) {\n        this._viewModelInstanceValue.swap(a, b);\n    };\n    ViewModelInstanceList.prototype.internalHandleCallback = function (callback) {\n        callback();\n    };\n    return ViewModelInstanceList;\n}(ViewModelInstanceValue));\n\nvar ViewModelInstanceColor = /** @class */ (function (_super) {\n    __extends(ViewModelInstanceColor, _super);\n    function ViewModelInstanceColor(instance, parent) {\n        return _super.call(this, instance, parent) || this;\n    }\n    Object.defineProperty(ViewModelInstanceColor.prototype, \"value\", {\n        get: function () {\n            return this._viewModelInstanceValue.value;\n        },\n        set: function (val) {\n            this._viewModelInstanceValue.value = val;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    ViewModelInstanceColor.prototype.rgb = function (r, g, b) {\n        this._viewModelInstanceValue.rgb(r, g, b);\n    };\n    ViewModelInstanceColor.prototype.rgba = function (r, g, b, a) {\n        this._viewModelInstanceValue.argb(a, r, g, b);\n    };\n    ViewModelInstanceColor.prototype.argb = function (a, r, g, b) {\n        this._viewModelInstanceValue.argb(a, r, g, b);\n    };\n    // Value 0 to 255\n    ViewModelInstanceColor.prototype.alpha = function (a) {\n        this._viewModelInstanceValue.alpha(a);\n    };\n    // Value 0 to 1\n    ViewModelInstanceColor.prototype.opacity = function (o) {\n        this._viewModelInstanceValue.alpha(Math.round(Math.max(0, Math.min(1, o)) * 255));\n    };\n    ViewModelInstanceColor.prototype.internalHandleCallback = function (callback) {\n        callback(this.value);\n    };\n    return ViewModelInstanceColor;\n}(ViewModelInstanceValue));\n\nvar ViewModelInstanceAssetImage = /** @class */ (function (_super) {\n    __extends(ViewModelInstanceAssetImage, _super);\n    function ViewModelInstanceAssetImage(instance, root) {\n        return _super.call(this, instance, root) || this;\n    }\n    Object.defineProperty(ViewModelInstanceAssetImage.prototype, \"value\", {\n        set: function (image) {\n            var _a;\n            this._viewModelInstanceValue.value((_a = image === null || image === void 0 ? void 0 : image.nativeImage) !== null && _a !== void 0 ? _a : null);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    ViewModelInstanceAssetImage.prototype.internalHandleCallback = function (callback) {\n        callback();\n    };\n    return ViewModelInstanceAssetImage;\n}(ViewModelInstanceValue));\n\nvar ViewModelInstanceArtboard = /** @class */ (function (_super) {\n    __extends(ViewModelInstanceArtboard, _super);\n    function ViewModelInstanceArtboard(instance, root) {\n        return _super.call(this, instance, root) || this;\n    }\n    Object.defineProperty(ViewModelInstanceArtboard.prototype, \"value\", {\n        set: function (artboard) {\n            var _a;\n            this._viewModelInstanceValue.value((_a = artboard === null || artboard === void 0 ? void 0 : artboard.nativeArtboard) !== null && _a !== void 0 ? _a : null);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    ViewModelInstanceArtboard.prototype.internalHandleCallback = function (callback) {\n        callback();\n    };\n    return ViewModelInstanceArtboard;\n}(ViewModelInstanceValue));\n\n// Loads Rive data from a URI via fetch.\nvar loadRiveFile = function (src) { return __awaiter(void 0, void 0, void 0, function () {\n    var req, res, buffer;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                req = new Request(src);\n                return [4 /*yield*/, fetch(req)];\n            case 1:\n                res = _a.sent();\n                return [4 /*yield*/, res.arrayBuffer()];\n            case 2:\n                buffer = _a.sent();\n                return [2 /*return*/, buffer];\n        }\n    });\n}); };\n// #endregion\n// #region utility functions\n/*\n * Utility function to ensure an object is a string array\n */\nvar mapToStringArray = function (obj) {\n    if (typeof obj === \"string\") {\n        return [obj];\n    }\n    else if (obj instanceof Array) {\n        return obj;\n    }\n    // If obj is undefined, return empty array\n    return [];\n};\n// #endregion\n// #region testing utilities\n// Exports to only be used for tests\nvar Testing = {\n    EventManager: EventManager,\n    TaskQueueManager: TaskQueueManager,\n};\n// #endregion\n// #region asset loaders\n/**\n * Decodes bytes into an audio asset.\n *\n * Be sure to call `.unref()` on the audio once it is no longer needed. This\n * allows the engine to clean it up when it is not used by any more animations.\n */\nvar decodeAudio = function (bytes) { return __awaiter(void 0, void 0, void 0, function () {\n    var decodedPromise, audio, audioWrapper;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                decodedPromise = new Promise(function (resolve) {\n                    return RuntimeLoader.getInstance(function (rive) {\n                        rive.decodeAudio(bytes, resolve);\n                    });\n                });\n                return [4 /*yield*/, decodedPromise];\n            case 1:\n                audio = _a.sent();\n                audioWrapper = new _utils__WEBPACK_IMPORTED_MODULE_3__.AudioWrapper(audio);\n                _utils__WEBPACK_IMPORTED_MODULE_3__.finalizationRegistry.register(audioWrapper, audio);\n                return [2 /*return*/, audioWrapper];\n        }\n    });\n}); };\n/**\n * Decodes bytes into an image.\n *\n * Be sure to call `.unref()` on the image once it is no longer needed. This\n * allows the engine to clean it up when it is not used by any more animations.\n */\nvar decodeImage = function (bytes) { return __awaiter(void 0, void 0, void 0, function () {\n    var decodedPromise, image, imageWrapper;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                decodedPromise = new Promise(function (resolve) {\n                    return RuntimeLoader.getInstance(function (rive) {\n                        rive.decodeImage(bytes, resolve);\n                    });\n                });\n                return [4 /*yield*/, decodedPromise];\n            case 1:\n                image = _a.sent();\n                imageWrapper = new _utils__WEBPACK_IMPORTED_MODULE_3__.ImageWrapper(image);\n                _utils__WEBPACK_IMPORTED_MODULE_3__.finalizationRegistry.register(imageWrapper, image);\n                return [2 /*return*/, imageWrapper];\n        }\n    });\n}); };\n/**\n * Decodes bytes into a font.\n *\n * Be sure to call `.unref()` on the font once it is no longer needed. This\n * allows the engine to clean it up when it is not used by any more animations.\n */\nvar decodeFont = function (bytes) { return __awaiter(void 0, void 0, void 0, function () {\n    var decodedPromise, font, fontWrapper;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                decodedPromise = new Promise(function (resolve) {\n                    return RuntimeLoader.getInstance(function (rive) {\n                        rive.decodeFont(bytes, resolve);\n                    });\n                });\n                return [4 /*yield*/, decodedPromise];\n            case 1:\n                font = _a.sent();\n                fontWrapper = new _utils__WEBPACK_IMPORTED_MODULE_3__.FontWrapper(font);\n                _utils__WEBPACK_IMPORTED_MODULE_3__.finalizationRegistry.register(fontWrapper, font);\n                return [2 /*return*/, fontWrapper];\n        }\n    });\n}); };\n// #endregion\n\n})();\n\n/******/ \treturn __nested_webpack_exports__;\n/******/ })()\n;\n});\n//# sourceMappingURL=rive.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@rive-app/canvas/rive.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@rive-app/react-canvas/dist/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@rive-app/react-canvas/dist/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval(__webpack_require__.ts("Object.defineProperty(exports, \"__esModule\", ({value:!0}));var e=__webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\"),n=__webpack_require__(/*! @rive-app/canvas */ \"(app-pages-browser)/./node_modules/@rive-app/canvas/rive.js\");function t(e){return e&&\"object\"==typeof e&&\"default\"in e?e:{default:e}}var r=/*#__PURE__*/t(e),u=function(){return u=Object.assign||function(e){for(var n,t=1,r=arguments.length;t<r;t++)for(var u in n=arguments[t])Object.prototype.hasOwnProperty.call(n,u)&&(e[u]=n[u]);return e},u.apply(this,arguments)};function a(e,n){var t={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&n.indexOf(r)<0&&(t[r]=e[r]);if(null!=e&&\"function\"==typeof Object.getOwnPropertySymbols){var u=0;for(r=Object.getOwnPropertySymbols(e);u<r.length;u++)n.indexOf(r[u])<0&&Object.prototype.propertyIsEnumerable.call(e,r[u])&&(t[r[u]]=e[r[u]])}return t}function i(e,n,t,r){return new(t||(t=Promise))(function(u,a){function i(e){try{l(r.next(e))}catch(e){a(e)}}function o(e){try{l(r.throw(e))}catch(e){a(e)}}function l(e){var n;e.done?u(e.value):(n=e.value,n instanceof t?n:new t(function(e){e(n)})).then(i,o)}l((r=r.apply(e,n||[])).next())})}function o(e,n){var t,r,u,a,i={label:0,sent:function(){if(1&u[0])throw u[1];return u[1]},trys:[],ops:[]};return a={next:o(0),throw:o(1),return:o(2)},\"function\"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function o(a){return function(o){return function(a){if(t)throw new TypeError(\"Generator is already executing.\");for(;i;)try{if(t=1,r&&(u=2&a[0]?r.return:a[0]?r.throw||((u=r.return)&&u.call(r),0):r.next)&&!(u=u.call(r,a[1])).done)return u;switch(r=0,u&&(a=[2&a[0],u.value]),a[0]){case 0:case 1:u=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,r=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!(u=i.trys,(u=u.length>0&&u[u.length-1])||6!==a[0]&&2!==a[0])){i=0;continue}if(3===a[0]&&(!u||a[1]>u[0]&&a[1]<u[3])){i.label=a[1];break}if(6===a[0]&&i.label<u[1]){i.label=u[1],u=a;break}if(u&&i.label<u[2]){i.label=u[2],i.ops.push(a);break}u[2]&&i.ops.pop(),i.trys.pop();continue}a=n.call(e,i)}catch(e){a=[6,e],r=0}finally{t=u=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,o])}}}function l(n){var t=n||c(),r=e.useState(t),u=r[0],a=r[1];return e.useEffect(function(){if(\"undefined\"!=typeof window&&\"matchMedia\"in window){var e=function(){var e=n||c();a(e)},t=window.matchMedia(\"screen and (resolution: \".concat(u,\"dppx)\"));return t.hasOwnProperty(\"addEventListener\")?t.addEventListener(\"change\",e):t.addListener(e),function(){t.hasOwnProperty(\"removeEventListener\")?t.removeEventListener(\"change\",e):t.removeListener(e)}}},[u,n]),u}function c(){var e=\"undefined\"!=typeof window&&\"number\"==typeof window.devicePixelRatio?window.devicePixelRatio:1;return Math.min(Math.max(1,e),3)}var s=function(){function e(){}return e.prototype.observe=function(){},e.prototype.unobserve=function(){},e.prototype.disconnect=function(){},e}();var f=globalThis.ResizeObserver||s,d=void 0!==globalThis.ResizeObserver,v=!d;function p(n,t){void 0===t&&(t=!0);var r=e.useState({width:0,height:0}),u=r[0],a=r[1];e.useEffect(function(){if(\"undefined\"!=typeof window&&t){var e=function(){a({width:window.innerWidth,height:window.innerHeight})};return v&&(e(),window.addEventListener(\"resize\",e)),function(){return window.removeEventListener(\"resize\",e)}}},[]);var i,o,l,c=e.useRef(new f((i=function(e){d&&a({width:e[e.length-1].contentRect.width,height:e[e.length-1].contentRect.height})},o=0,l=0,function(){for(var e=this,n=[],t=0;t<arguments.length;t++)n[t]=arguments[t];clearTimeout(l),l=window.setTimeout(function(){return i.apply(e,n)},o)})));return e.useEffect(function(){var e=c.current;if(t){var r=n.current;return n.current&&d&&e.observe(n.current),function(){e.disconnect(),r&&d&&e.unobserve(r)}}e.disconnect()},[n,c]),u}var h={useDevicePixelRatio:!0,fitCanvasToArtboardHeight:!1,useOffscreenRenderer:!0,shouldResizeCanvasToContainer:!0};function b(e){return Object.assign({},h,e)}function g(n){var t=n.riveLoaded,r=void 0!==t&&t,u=n.canvasElem,a=n.containerRef,i=n.options,o=void 0===i?{}:i,c=n.onCanvasHasResized,s=n.artboardBounds,f=b(o),d=e.useState({height:0,width:0}),v=d[0],h=v.height,g=v.width,y=d[1],w=e.useState({height:0,width:0}),m=w[0],C=m.height,R=m.width,E=w[1],V=e.useState(!0),x=V[0],k=V[1],O=f.fitCanvasToArtboardHeight,I=f.shouldResizeCanvasToContainer,P=f.useDevicePixelRatio,M=f.customDevicePixelRatio,T=p(a,I),S=l(M),D=null!=s?s:{},L=D.maxX,A=D.maxY,z=e.useCallback(function(){var e,n,t,r,u=null!==(n=null===(e=a.current)||void 0===e?void 0:e.clientWidth)&&void 0!==n?n:0,i=null!==(r=null===(t=a.current)||void 0===t?void 0:t.clientHeight)&&void 0!==r?r:0;return O&&s?{width:u,height:u*(s.maxY/s.maxX)}:{width:u,height:i}},[a,O,L,A]);e.useEffect(function(){if(I&&a.current&&r){var e=z(),n=e.width,t=e.height,i=!1;if(u){var o=n!==g||t!==h;if(f.fitCanvasToArtboardHeight&&o&&(a.current.style.height=t+\"px\",i=!0),f.useDevicePixelRatio){if(o||(n*S!==R||t*S!==C)){var l=S*n,s=S*t;u.width=l,u.height=s,u.style.width=n+\"px\",u.style.height=t+\"px\",E({width:l,height:s}),i=!0}}else o&&(u.width=n,u.height=t,E({width:n,height:t}),i=!0);y({width:n,height:t})}c&&(x||i)&&c&&c(),x&&k(!1)}},[u,a,T,S,z,x,k,C,R,h,g,c,I,O,P,r]),e.useEffect(function(){E({width:0,height:0})},[u])}var y,w=function(){function e(){}return e.prototype.observe=function(){},e.prototype.unobserve=function(){},e.prototype.disconnect=function(){},e}(),m=globalThis.IntersectionObserver||w,C=function(){function e(){var e=this;this.elementsMap=new Map,this.onObserved=function(n){n.forEach(function(n){var t=e.elementsMap.get(n.target);t&&t(n)})},this.observer=new m(this.onObserved)}return e.prototype.registerCallback=function(e,n){this.observer.observe(e),this.elementsMap.set(e,n)},e.prototype.removeCallback=function(e){this.observer.unobserve(e),this.elementsMap.delete(e)},e}(),R=function(){return y||(y=new C),y};function E(e){var n=e.setContainerRef,t=e.setCanvasRef,i=e.className,o=void 0===i?\"\":i,l=e.style,c=e.children,s=a(e,[\"setContainerRef\",\"setCanvasRef\",\"className\",\"style\",\"children\"]),f=u({width:\"100%\",height:\"100%\"},l);return r.default.createElement(\"div\",u({ref:n,className:o},!o&&{style:f}),r.default.createElement(\"canvas\",u({ref:t,style:{verticalAlign:\"top\",width:0,height:0}},s),c))}function V(t,i){void 0===i&&(i={});var o=e.useState(null),c=o[0],s=o[1],f=e.useRef(null),d=e.useRef(null),v=e.useState(null),p=v[0],h=v[1],y=Boolean(t),w=b(i),m=l(),C=e.useCallback(function(){if(p){if(p.layout&&p.layout.fit===n.Fit.Layout&&c){var e=m*p.layout.layoutScaleFactor;p.devicePixelRatioUsed=m,p.artboardWidth=(null==c?void 0:c.width)/e,p.artboardHeight=(null==c?void 0:c.height)/e}p.startRendering(),p.resizeToCanvas()}},[p,m]);g({riveLoaded:!!p,canvasElem:c,containerRef:f,options:w,onCanvasHasResized:C,artboardBounds:null==p?void 0:p.bounds});var V=e.useCallback(function(e){null===e&&c&&(c.height=0,c.width=0),s(e)},[]);e.useEffect(function(){if(c&&t){var e,r=null!=p;if(null==p){var i=w.useOffscreenRenderer,o=t.onRiveReady,l=a(t,[\"onRiveReady\"]);e=new n.Rive(u(u({useOffscreenRenderer:i},l),{canvas:c})),null!=d.current&&d.current.cleanup(),d.current=e,e.on(n.EventType.Load,function(){r=!0,o&&o(e),c?h(e):e.cleanup()})}return function(){r||null==e||e.cleanup()}}},[c,y,p]);var x=e.useCallback(function(e){f.current=e},[]),k={observe:e.useCallback(function(e,n){R().registerCallback(e,n)},[]),unobserve:e.useCallback(function(e){R().removeCallback(e)},[])},O=k.observe,I=k.unobserve;e.useEffect(function(){var e,n=!1,t=function(){if(c&&n){var e=c.getBoundingClientRect();e.width>0&&e.height>0&&e.top<(window.innerHeight||document.documentElement.clientHeight)&&e.bottom>0&&e.left<(window.innerWidth||document.documentElement.clientWidth)&&e.right>0&&(null==p||p.startRendering(),n=!1)}};return c&&!1!==w.shouldUseIntersectionObserver&&O(c,function(r){r.isIntersecting?p&&p.startRendering():p&&p.stopRendering(),n=!r.isIntersecting,clearTimeout(e),r.isIntersecting||0!==r.boundingClientRect.width||(e=setTimeout(t,10))}),function(){c&&I(c)}},[O,I,p,c,w.shouldUseIntersectionObserver]),e.useEffect(function(){return function(){p&&(p.cleanup(),h(null))}},[p,c]),e.useEffect(function(){return function(){null!=d.current&&d.current.cleanup()}},[]);var P=null==t?void 0:t.animations;e.useEffect(function(){p&&P&&(p.isPlaying?(p.stop(p.animationNames),p.play(P)):p.isPaused&&(p.stop(p.animationNames),p.pause(P)))},[P,p]);var M=e.useCallback(function(e){return r.default.createElement(E,u({setContainerRef:x,setCanvasRef:V},e))},[V,x]);return{canvas:c,container:f.current,setCanvasRef:V,setContainerRef:x,rive:p,RiveComponent:M}}function x(n,t,r){var a=e.useState(null),i=a[0],o=a[1],l=e.useState(r.defaultValue),c=l[0],s=l[1],f=e.useState(null),d=f[0],v=f[1],p=e.useRef(null),h=e.useRef(n),b=e.useRef(r);e.useEffect(function(){b.current=r},[r]);var g=e.useCallback(function(){var e=p.current,n=h.current,t=b.current;if(!e||!n)return o(null),s(t.defaultValue),v(null),function(){};var r=t.getProperty(e,n);if(r){o(r),s(t.getValue(r)),t.getExtendedData&&v(t.getExtendedData(r));var u=function(){s(t.getValue(r)),t.getExtendedData&&v(t.getExtendedData(r)),t.onPropertyEvent&&t.onPropertyEvent()};return r.on(u),function(){r.off(u)}}return function(){}},[]);e.useEffect(function(){return p.current=t,h.current=n,g()},[t,n,g]);var y=e.useCallback(function(e){if(i&&p.current===t)try{return e(i),void(b.current.getExtendedData&&v(b.current.getExtendedData(i)))}catch(e){}if(p.current)try{var n=b.current.getProperty(p.current,h.current);n&&(o(n),e(n),b.current.getExtendedData&&v(b.current.getExtendedData(n)))}catch(e){}},[i,t]),w=e.useMemo(function(){return b.current.buildPropertyOperations(y)},[y]),m=u({value:c},w);return r.getExtendedData&&(m.extendedData=d),m}exports[\"default\"]=function(e){var n=e.src,t=e.artboard,i=e.animations,o=e.stateMachines,l=e.layout,c=e.useOffscreenRenderer,s=void 0===c||c,f=e.shouldDisableRiveListeners,d=void 0!==f&&f,v=e.shouldResizeCanvasToContainer,p=void 0===v||v,h=e.automaticallyHandleEvents,b=void 0!==h&&h,g=e.children,y=a(e,[\"src\",\"artboard\",\"animations\",\"stateMachines\",\"layout\",\"useOffscreenRenderer\",\"shouldDisableRiveListeners\",\"shouldResizeCanvasToContainer\",\"automaticallyHandleEvents\",\"children\"]),w=V({src:n,artboard:t,animations:i,layout:l,stateMachines:o,autoplay:!0,shouldDisableRiveListeners:d,automaticallyHandleEvents:b},{useOffscreenRenderer:s,shouldResizeCanvasToContainer:p}).RiveComponent;return r.default.createElement(w,u({},y),g)},exports.useResizeCanvas=g,exports.useRive=V,exports.useRiveFile=function(t){var r=this,u=e.useState(null),a=u[0],l=u[1],c=e.useState(\"idle\"),s=c[0],f=c[1];return e.useEffect(function(){var e=null;return i(r,void 0,void 0,function(){return o(this,function(r){try{f(\"loading\"),(e=new n.RiveFile(t)).init(),e.on(n.EventType.Load,function(){null==e||e.getInstance(),l(e),f(\"success\")}),e.on(n.EventType.LoadError,function(){f(\"failed\")}),l(e)}catch(e){console.error(e),f(\"failed\")}return[2]})}),function(){null==e||e.cleanup()}},[t.src,t.buffer]),{riveFile:a,status:s}},exports.useStateMachineInput=function(t,r,u,a){var i=e.useState(null),o=i[0],l=i[1];return e.useEffect(function(){function e(){if(t&&r&&u||l(null),t&&r&&u){var e=t.stateMachineInputs(r);if(e){var n=e.find(function(e){return e.name===u});void 0!==a&&n&&(n.value=a),l(n||null)}}else l(null)}e(),t&&t.on(n.EventType.Load,function(){e()})},[t]),o},exports.useViewModel=function(t,r){var u=null!=r?r:{},a=u.name,i=u.useDefault,o=void 0!==i&&i,l=e.useState(null),c=l[0],s=l[1];return e.useEffect(function(){function e(){var e;if(t){var n=null;n=null!=a?(null===(e=t.viewModelByName)||void 0===e?void 0:e.call(t,a))||null:t.defaultViewModel()||null,s(n)}else s(null)}return e(),t&&t.on(n.EventType.Load,e),function(){t&&t.off(n.EventType.Load,e)}},[t,a,o]),c},exports.useViewModelInstance=function(n,t){var r=null!=t?t:{},u=r.name,a=r.useDefault,i=void 0!==a&&a,o=r.useNew,l=void 0!==o&&o,c=r.rive,s=e.useState(null),f=s[0],d=s[1];return e.useEffect(function(){var e,t,r;if(n){var a=null;a=null!=u?n.instanceByName(u)||null:i?(null===(e=n.defaultInstance)||void 0===e?void 0:e.call(n))||null:l?(null===(t=n.instance)||void 0===t?void 0:t.call(n))||null:(null===(r=n.defaultInstance)||void 0===r?void 0:r.call(n))||null,d(a),c&&a&&c.viewModelInstance!==a&&c.bindViewModelInstance(a)}else d(null)},[n,u,i,l,c]),f},exports.useViewModelInstanceArtboard=function(n,t){return{setValue:x(n,t,{getProperty:e.useCallback(function(e,n){return e.artboard(n)},[]),getValue:e.useCallback(function(){},[]),defaultValue:null,buildPropertyOperations:e.useCallback(function(e){return{setValue:function(n){e(function(e){e.value=n})}}},[])}).setValue}},exports.useViewModelInstanceBoolean=function(n,t){var r=x(n,t,{getProperty:e.useCallback(function(e,n){return e.boolean(n)},[]),getValue:e.useCallback(function(e){return e.value},[]),defaultValue:null,buildPropertyOperations:e.useCallback(function(e){return{setValue:function(n){e(function(e){e.value=n})}}},[])});return{value:r.value,setValue:r.setValue}},exports.useViewModelInstanceColor=function(n,t){var r=x(n,t,{getProperty:e.useCallback(function(e,n){return e.color(n)},[]),getValue:e.useCallback(function(e){return e.value},[]),defaultValue:null,buildPropertyOperations:e.useCallback(function(e){return{setValue:function(n){e(function(e){e.value=n})},setRgb:function(n,t,r){e(function(e){e.rgb(n,t,r)})},setRgba:function(n,t,r,u){e(function(e){e.rgba(n,t,r,u)})},setAlpha:function(n){e(function(e){e.alpha(n)})},setOpacity:function(n){e(function(e){e.opacity(n)})}}},[])});return{value:r.value,setValue:r.setValue,setRgb:r.setRgb,setRgba:r.setRgba,setAlpha:r.setAlpha,setOpacity:r.setOpacity}},exports.useViewModelInstanceEnum=function(n,t){var r=x(n,t,{getProperty:e.useCallback(function(e,n){return e.enum(n)},[]),getValue:e.useCallback(function(e){return e.value},[]),defaultValue:null,getExtendedData:e.useCallback(function(e){return e.values},[]),buildPropertyOperations:e.useCallback(function(e){return{setValue:function(n){e(function(e){e.value=n})}}},[])});return{value:r.value,values:r.extendedData||[],setValue:r.setValue}},exports.useViewModelInstanceImage=function(n,t){return{setValue:x(n,t,{getProperty:e.useCallback(function(e,n){return e.image(n)},[]),getValue:e.useCallback(function(){},[]),defaultValue:null,buildPropertyOperations:e.useCallback(function(e){return{setValue:function(n){e(function(e){e.value=n})}}},[])}).setValue}},exports.useViewModelInstanceList=function(n,t){var r,u=e.useState(0)[1],a=x(n,t,{getProperty:e.useCallback(function(e,n){return e.list(n)},[]),getValue:e.useCallback(function(e){return e.length},[]),defaultValue:null,onPropertyEvent:function(){u(function(e){return e+1})},buildPropertyOperations:e.useCallback(function(e){return{addInstance:function(n){e(function(e){return e.addInstance(n)})},addInstanceAt:function(n,t){var r=!1;return e(function(e){r=e.addInstanceAt(n,t)}),r},removeInstance:function(n){e(function(e){return e.removeInstance(n)})},removeInstanceAt:function(n){e(function(e){return e.removeInstanceAt(n)})},getInstanceAt:function(n){var t=null;return e(function(e){t=e.instanceAt(n)}),t},swap:function(n,t){e(function(e){return e.swap(n,t)})}}},[])});return{length:null!==(r=a.value)&&void 0!==r?r:0,addInstance:a.addInstance,addInstanceAt:a.addInstanceAt,removeInstance:a.removeInstance,removeInstanceAt:a.removeInstanceAt,getInstanceAt:a.getInstanceAt,swap:a.swap}},exports.useViewModelInstanceNumber=function(n,t){var r=x(n,t,{getProperty:e.useCallback(function(e,n){return e.number(n)},[]),getValue:e.useCallback(function(e){return e.value},[]),defaultValue:null,buildPropertyOperations:e.useCallback(function(e){return{setValue:function(n){e(function(e){e.value=n})}}},[])});return{value:r.value,setValue:r.setValue}},exports.useViewModelInstanceString=function(n,t){var r=x(n,t,{getProperty:e.useCallback(function(e,n){return e.string(n)},[]),getValue:e.useCallback(function(e){return e.value},[]),defaultValue:null,buildPropertyOperations:e.useCallback(function(e){return{setValue:function(n){e(function(e){e.value=n})}}},[])});return{value:r.value,setValue:r.setValue}},exports.useViewModelInstanceTrigger=function(n,t,r){var u=(null!=r?r:{}).onTrigger;return{trigger:x(n,t,{getProperty:e.useCallback(function(e,n){return e.trigger(n)},[]),getValue:e.useCallback(function(){},[]),defaultValue:null,onPropertyEvent:u,buildPropertyOperations:e.useCallback(function(e){return{trigger:function(){e(function(e){e.trigger()})}}},[])}).trigger}},Object.keys(n).forEach(function(e){\"default\"===e||exports.hasOwnProperty(e)||Object.defineProperty(exports,e,{enumerable:!0,get:function(){return n[e]}})});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@rive-app/react-canvas/dist/index.js\n"));

/***/ })

}]);